[{"body":" Basics of operating systems Linux file system hierarchy Navigation of Linux file system Working with files: Create, View, Manipulate Command line overview  Let\u0026#39;s learn about the computer\u0026#39;s file system! üíª -- ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/file_system/","title":"1 - File System Basics"},{"body":" Git terminology Working with a local repository Creating, initializing, and cloning a repository Basics of branching Staging and committing work Setting up remote repository (GitHub) and pushing local commits  Let\u0026#39;s learn about Git! üíª -- ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/git/","title":"2 - Version Control with Git and GitHub"},{"body":"Programming fundamentals in Python including:\n Functions Data types Conditional logic (if, elif, else and boolean expressions) Control flow (while and for loops) Classes and objects  Introduction to Python üíª -- ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/python/","title":"3 - Programming in Python"},{"body":" Basic knowledge of HTML Basic knowledge of CSS Practical lesson demonstrating HTML \u0026amp; CSS Basic knowledge of JavaScript Practical lesson demonstrating HTML, CSS \u0026amp; JavaScript Job Opportunities (frontend dev)  Basic knowledge of HTML üíª -- ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/web/","title":"4 - Introduction to Web Development"},{"body":"In this awesome course you will learn fundamental computer science skills that are an absolute MUST for working in IT üéâ\nYou will be also introduced to the fundamentals of programming and gain experience with: Python, GitHub, HTML, CSS, JavaScript.\nSections üìö These docs consist of four parts:\n File System Basics Version Control with Git and GitHub Python Programming Introduction to Web Development  After this course ü§î You will...\n Understand files and file systems Use git/GitHub for version control Create basic programs in Python Understand the fundamentals of the web and web development  After the successful completion of this introductory course, you can choose to apply for any other intermediate-level courses offered by ReDI!\nCourses links File System Basics Version Control with Git and GitHub Python Programming Web Fundamentals ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/","title":"Welcome to the course üéâ"},{"body":"Pre Requisites   Review the course content from last class, and try to continue going through the exercises! If you get stuck on any of them, no problem -- make a note of this so we can review these tasks at the beginning of class on Thursday.\nReview 31/March - Installing Python   (Optional) create a repository (local and remote) to gather your Python exercises from last class. Add and commit the file to the repository, and then push these to GitHub.\n  (Optional practice) go through exercises on w3 schools for Python through Functions section OR on particular areas that you would like to review. This is entirely optional but good practice! No need to go over Lambda, Classes, Inheritance, or Modules as we have not seen these yet.\n   Class Curriculum    Section content Expected time (mins) Pre - Requirements     Lesson Goals 5 minutes ‚ùå   Questions from last class \u0026amp; review of a few exercises 10-15 minutes ‚ùå   Overview of loops (for, while) 10-15 minutes ‚ùå   Hands-on Python exercises (in small groups) 20 minutes ‚ùå   Break (in-person troubleshooting of Python installations if needed) 10 minutes ‚ùå   Continue hands-on Python exercises (in small groups) rest of class ‚ùå   Check-out 5 minutes ‚ùå    0. Lesson Goals  Have a working development environment on Python. Build familiarity with the concepts of data types, functions, and control flow (loops, conditionals) Continue writing code in Python  1. Check-In  Are there any remaining questions from last class? What exercises were the most challenging? (Respond in the chat)  2. for and while loops Loops are a tool that help us execute a block of code a specified amount of times or based on a condition. In Python, there are two loops: for and while loops.\nwhile loops while loops allow us to execute a block of code as long as the condition evaluates to True.\nPlease excuse the ugly diagram :)\nSyntax:\n1while condition: 2 # do things Examples:\n1# This is called an \u0026#34;infinite loop\u0026#34; since the condition is always True!! 2while True: 3 print(\u0026#34;I\u0026#39;m an infinite loop! I won\u0026#39;t stop unless I\u0026#39;m forced to!\u0026#34;) 1count = 0 2while count \u0026lt; 10: 3 print(\u0026#34;hello #\u0026#34;, count) 4 # increment the value of `count` 5 count += 1 6 # outputs: 7 # hello # 0 8 # hello # 1 9 # hello # 2 10 # hello # 3 11 # hello # 4 12 # hello # 5 13 # hello # 6 14 # hello # 7 15 # hello # 8 16 # hello # 9 17 Check-in question: can someone explain what's going on in each of these examples?\nfor loops for loops provide a way to go through each value (or set of values) in an iterable (e.g. a list, string, dictionary, etc.) and execute a block of code that uses that value.\nSyntax:\n1for variable(s) in iterable: 2 # do things Examples: (feel free to try executing these in your IDLE terminal, notebook cell (in Colab), VSCode, or PyCharm :)\n1for num in [1, 2, 3]: 2 print(num) 3 # outputs: 4 # 1 5 # 2 6 # 3 1for letter in \u0026#39;word\u0026#39;: 2 new_word = letter + \u0026#39;!!\u0026#39; 3 print(new_word) 4 # outputs: 5 # w!! 6 # o!! 7 # r!! 8 # d!! 1# python 2for num, letter in [(1, \u0026#39;a\u0026#39;), (2, \u0026#39;b\u0026#39;)]: 3 # Here, we convert number to string using `str` before concatenating with another string 4 print(str(num) + letter) 5 # outputs: 6 # 1a 7 # 2b 8 With for loops, it can also be useful to use the range operator in Python which creates an iterable of numbers. The syntax of this is range(start, end, step), but you will also see this as just range(start, end) or range(end) (in this last case, the start is assumed to be 0). Note that the end value is not included (in other words, \u0026quot;numbers starting with start up until (not through) end\u0026quot;). Here are some examples:\n1for i in range(3): 2 print(i) 3 # outputs: 4 # 0 5 # 1 6 # 2 1list(range(1, 4)) # we can create a list out of a `range` 2# [1, 2, 3] 1list(range(-1, 9, 3)) # here, the step (space between values) is 3 2# [-1, 2, 5, 8] 3. Hands-on Python Tasks Work in groups to solve the following tasks in your Python Dev setup. As a group exercise, we expect you to discuss with your group members to solve the problems together. This may mean having one person share their screen and talking through the code you will write together, and making sure you all understand before moving on to the next task. You are not expected to get through all of these in class, and they range from easier to harder. We will continue working on these exercises in the next session as well.\nTo build on the skills that we have learned earlier in the semester, if working in VSCode or PyCharm, please create a new repository and commit your changes as you go. You can check out the reference sheets to help remember the necessary git and command line commands. Click here for the cheat sheet\nOptionally, you may send in a link to a GitHub repository with your solutions (if working in VSCode or PyCharm) or share your notebook (if working in Colab) if you would like feedback on your work :)\nNote: if you are writing in Colab or a Python Notebook, then try to keep each task in a separate code cell. If you are writing in a pure Python file, consider wrapping each task in a function (that is, write a function to solve the task) and call these functions in the if __name__ == '__main__': block to test out your code. This might look something like:\n1# in your file: 2def task_n(a, b): 3 # code to solve task 1 4 ... 5 6 return answer_to_task_n 7 8if __name__ == \u0026#39;__main__\u0026#39;: 9 print(task_n(1, 2)) # prints output of task_n 10 Note: it can be helpful to test out your functions by making sure that the functions return what you expect for a few different inputs. Make sure to try out a variety of inputs including some \u0026quot;edge cases\u0026quot;, or cases that are trickier and can cause problems. These edge cases often have to do with \u0026quot;0\u0026quot; or empty-inputs. (Optional): In Python, you can also write assert statements, where you would state what you believe the function to output to be, and it fails if this is not the case.\nLet's use an example task 0 to illustrate all the points above.\nTask 0 (warmup) Write a function called add_10 that takes in an integer, adds 10, and returns this value. Test out these steps and make sure you feel comfortable with the process. The following tasks won't have a walk through, but you should follow the same rough process.\nSteps:\n Write out your function skeleton, or the empty function with the name and parameters. (Note: n is commonly used to denote a number, but you can also write more descriptive variable names):  1def add_10(n): 2 # TODO: add logic to add 10 3 return \u0026#34;Not implemented\u0026#34; Let's call this function somewhere so we can see what it's outputting. In a .py file:  1if __name__ == \u0026#39;__main__\u0026#39;: 2 # the text is not required, but it helps me see what I called to get the output 3 print(\u0026#34;add_10(3): \u0026#34;, add_10(3)) # for now, this returns \u0026#34;add_10(3): Not implemented\u0026#34; 4 Let's add in some logic and check the values that it is outputting. If these values don't match your expectations (which often happens in programming), then take another look and try to understand what's going wrong. You can add print statements in your code as well to tell you what the values of different variables and conditions are while you are running your code. You should feel encouraged to look things up when you run into issues as well.  1def add_10(n): 2 return n + 10 3 4if __name__ == \u0026#39;__main__\u0026#39;: 5 print(\u0026#34;add_10(3): \u0026#34;, add_10(3)) # this should now print \u0026#34;add_10(3): 13\u0026#34; 6 print(\u0026#34;add_10(-10): \u0026#34;, add_10(-10)) # this should now print \u0026#34;add_10(-10): 0\u0026#34; 7 Optional: you can also use assert statements to confirm your expectations. This is a way of writing simple \u0026quot;test cases\u0026quot; to make sure your logic works. This looks something like:  1def add_10(n): 2 return n + 10 3 4if __name__ == \u0026#39;__main__\u0026#39;: 5 assert add_10(3) == 13 6 assert add_10(-10) == 0 7 assert add_10(0) == 10 8 What happens if the assert statement is wrong? (Hint: try out something like assert add_10(3) == 5 which we expect to fail and see what happens.)\nYou can also add this in to a test function to organize your code:\n1def add_10(n): 2 return n + 10 3 4def test_add_10(): 5 assert add_10(3) == 13 6 assert add_10(-10) == 0 7 assert add_10(0) == 10 8 9 10if __name__ == \u0026#39;__main__\u0026#39;: 11 test_add_10() # expect no output if all assertions passed 12 Task 1 Write a function called longer_string that takes in two strings and returns the longer of the two. If they are the same length, return the first string.\nTask 2 Write a function called is_odd that takes in an integer and returns True if the number is odd and False otherwise.\nHint: look up (Google) what the modulo (%) operator in Python is and use it to determine if a number is odd or even.  Task 3 (parts 1, 2) Write a function called hello_world_n that takes in an integer n and prints \u0026quot;Hello, world!\u0026quot; n times.\n do this using a for loop do this using a while loop  Task 4 Write a function called sum_list that takes in a list of integers (i.e. [3, 0, 10, 4, 5, 3]) and returns the sum of them. Do not use the sum function in your logic, but you can use this to test your logic! (Hint: assert sum(lst) == ...)\nTask 5 Write a function that takes in a list of integers (i.e. [3, 0, 10, 4, 5, 3]) and prints the value of each element greater than 4. For example:\n  input: [3, 0, 10, 4, 5, 3]\n1# output: 2# 10 3# 5   input: [4, 5, 6, 6, 5, 4]\n1# output: 2# 5 3# 6 4# 6 5# 5   input: [4, 3, 2, 1]\n1# no output   Optional Challenge: change your function to take in a second parameter, min_val. Now, print all values in the list greater than this value.\nExample input: [4, 3, 2, 1], 2\n1 # output: 2 # 4 3 # 3   (Challenge) Task 6 (parts 1, 2) Note: this one is optional and meant to be challenging! :)\nLike with task 4, do not use the Python function max in your function, but you can use this to test it out!\n Write a function that takes in a list of integers (i.e. [3, 0, 10, 4, 5, 3]) and returns largest value in the list. Write a function that takes in a list of strings (i.e. ['a', 'asdf', '']) and returns the longest string in the list.  (Challenge) Task 7 (parts 1, 2, 3) Note: this one is optional and meant to be challenging! :)\n  Write a function that takes in an integer and prints all numbers below it that are divisible by 3. (Hint: recall Task 2 -- how can you check if a number is divisible by 3?)\nExample input: 12\n1# output: 2# 0 3# 3 4# 6 5# 9    Modify the function to return how many numbers are divisible by 3, in addition to printing each number. (i.e. the returned value for the example input above would be 4 (0, 3, 6, 9)).\n  Modify this function to make it general -- if the function takes in n and k, find out how many numbers less than n are divisible by k.\nExample input: 8, 2\n1# output: 2# 0 3# 2 4# 4 5# 6 6# returns 4   Additional Resources  W3 schools Python while loops W3 schools Python for loops Tutorialspoint loops in Python additional practice problems on loops and conditions (note: some are challenging!) additional practice problems (note: challenging!)  ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/python/practical_python/","title":"05/April - Practical Python Session"},{"body":"Prerequisites  You have completely set up one of the three Python development options  VsCode PyCharm Google Colab Notebook   You have solved the tasks from the last class   Class Curriculum    Section content Expected time (mins) Pre - Requirements     Lesson Goals 5 minutes ‚ùå   Check-in on pre-reqs and questions from last class 15 minutes ‚ùå   Procedural programming 10 minutes ‚ùå   Object-oriented Programming 10 minutes ‚ùå   Pillars of object-oriented programming 10 minutes ‚ùå   Break 10 minutes ‚ùå   Task: Extend the pet clinic example 20 minutes ‚ùå   Bonus Task: Implement a REDI Course Management System 20 minutes ‚ùå   Check-out 10 minutes ‚ùå    0. Lesson Goals  Learn the difference between procedural vs. object-oriented programming. Learn the pillars of object-oriented programming in Python  Classes Objects Constructor functions Object Methods Inheritance    1. Check-In  What was particularly challenging last class? Are there any remaining questions from last class? What exercises were the most challenging? (Respond in the chat)  2. Procedural Programming Procedural programming involves writing sequential code which is executed from top to the bottom of the file. You are not allowed to switch steps otherwise the program will fail to run. You can think of procedural programming like the process of boiling some spaghetti.\n You get a clean pot You pour some water into the pot You switch on the cooker You wait for the water to start boiling You add the Spaghetti You add some salt You wait for about 10 to 15 minutes for the Spaghetti to cook  Here are some characteristics of procedural programming:\n In procedural programming, program is divided into small parts called functions. Procedural programming follows top down approach. Adding new data and functions is not easy. Procedural programming does not have any proper way for hiding data so it is less secure. In procedural programming, function is more important than data. Procedural programs are not modelled according to real-world structure. Procedural programming languages include C, FORTRAN, Pascal, Basic etc  3. Object-Oriented Programming Object-oriented programming involves writing code in terms of the objects that make up the problem you are trying to solve. The definitions of these objects in the code can be switched around without causing the program to fail. You can think of object-oriented programming like the process of solving a jigsaw puzzle.\nHere are some characteristics of object-oriented programming:\n In object-oriented programming, the program is divided into small parts called objects. Object-oriented programming follows bottom up approach. Adding new data and function is easy. Object-oriented programming provides data hiding so it is more secure. In object-oriented programming, data is more important than function. Object-oriented programs are modelled according to real-world structure. Object-oriented programming languages include C++, Java, Python, C# etc.  4. Pillars of Object-Oriented Programming in Python Classes Classes represent a group of objects you would like to manage in your program. Classes in python are declared as follows:\n1class class_name: 2 class_body For example if you are writing code to manage the pets at a pet clinic then your program is managing different pets, whether they are dogs, cats, turtles etc. In your program you would represent all these different breeds using a Pet class.\n1class Pet: 2 pass  Note: The pass keyword is used when we do not want to specify any details of the class.  Objects When we define a class only the description or a blueprint of all possible objects defined by that class is created. For example one particular cat at the pet clinic is an object of the Pet class. When you create an object from a class in your code, you assign it to a variable to allow you do something meaningful with that specific object. You create an object and assign it to a variable as follows:\n1object_variable = class_name() For example, an object for a cat called Maya can be created from the Pet class as follows:\n1maya = Pet() Now you can print the Maya object\n1print(maya) 2# outputs something like -\u0026gt; \u0026lt;__main__.Pet object at 0x7ff41e9bcdd0\u0026gt;  Note: The 0x7ff41e9bcdd0 above is the address of Maya in memory on my computer. The value will be different on your computer  Constructor functions The examples above are classes and objects in their simplest form, and are not really useful in real life applications.\nTo understand the meaning of classes we have to understand the built-in __init__() constructor function.\nAll classes have a function called __init__(), which is always executed when an object of the class is being constructed.\nUse the __init__() function to assign values to object properties, or other operations that are necessary to do when the object is being created:\nFor example, in the example from above\n1maya = Pet() We know that object relates to a cat called Maya because we stored the object in a variable called maya.\nNow consider if we instead named the variable differently:\n1pet_one = Pet() We've lost all hints that the pet_one object actually refers to Maya. We can add a constructor function to the Pet class which will allow us to give names to pets objects we create.\n1class Pet: 2 def __init__(self, name): 3 self.name = name  Note: The self parameter is a reference to the current class object and is used to access variables that belong to the object.  With the new constructor function added to the Pet class, we can now create pet objects with actual names\n1pet_one = Pet(\u0026#34;Maya\u0026#34;) 2pet_two = Pet(\u0026#34;Felix\u0026#34;) And we can selectively print the names of each pet\n1print(pet_one.name) 2print(pet_two.name) 3# outputs 4# Maya 5# Felix Object Methods Objects can also contain functions called Methods. Methods allow the program to perform actions on objects.\nLet us add a hello method to the Pet class that the pets can use to introduce themselves (if they could speak)\n1class Pet: 2 def __init__(self, name): 3 self.name = name 4 5 def hello(self): 6 print(\u0026#34;Hello my name is \u0026#34; + self.name) Now we can create a pet called called Maya and have her say hello!\n1pet_one = Pet(\u0026#34;maya\u0026#34;) 2pet_one.hello() 3# output -\u0026gt; Hello my name is maya Class inheritance Understanding the concept of class can be a bit difficult at first. This section is not essential if you are still struggling with the previous concepts. ;)  Inheritance allows us to define a class that is a sub-category of another class. For example at the pet clinic, we have a Pet class. But using the Pet class, we cannot differentiate between cats, dogs, turtles or birds.\nWe can create new classes for the different kinds of animals at the pet clinic and have all of them inherit from the Pet class.\n1class Pet: 2 def __init__(self, name): 3 self.name = name 4 5 def hello(self): 6 print(\u0026#34;Hello my name is \u0026#34; + self.name) 7 8class Cat(Pet): 9 pass 10 11class Dog(Pet): 12 pass 13 14class Turtle(Pet): 15 pass 16 17class Bird(Pet): 18 pass The Pet class is known as the parent class.\nThe Cat, Dog, Turtle and Bird classes are known as child class.\nNow we can create more pet objects using their specific classes and they will all be able to say hello because they've inherited the hello method from the Pet class\n1cat_one = Cat(\u0026#34;maya\u0026#34;) 2dog_one = Dog(\u0026#34;bosco\u0026#34;) 3turtle_one = Turtle(\u0026#34;speedy\u0026#34;) 4bird_one = Bird(\u0026#34;diver\u0026#34;) 5 6cat_one.hello() 7dog_one.hello() 8turtle_one.hello() 9bird_one.hello() 10 11# outputs 12# Hello my name is maya 13# Hello my name is bosco 14# Hello my name is speedy 15# Hello my name is diver Even though we now have various child classes of the parent class Pet, each of those child classes have characteristics that apply to only them. For example cats can meow, dogs can bark, birds can fly and turtles can hide in their shell.\nWe can add more specific class methods into the various child classes to provide more specific behaviors.\nLets add:\n A meow method to the Cat class which causes the cat to make the meow sound A bark method to the Dog class which causes the cat to bark A fly method to the Bird class which causes the bird to fly A hide method to the Turtle class which causes the turtle to go into its shell  1class Pet: 2 def __init__(self, name): 3 self.name = name 4 5 def hello(self): 6 print(\u0026#34;Hello my name is \u0026#34; + self.name) 7 8class Cat(Pet): 9 def meow(self): 10 print(\u0026#34;Meeeeeooooww! I am a cat!\u0026#34;) 11 12class Dog(Pet): 13 def bark(self): 14 print(\u0026#34;Wooof! Woof! I am a dog!\u0026#34;) 15 16class Turtle(Pet): 17 def hide(self): 18 print(\u0026#34;Hide! I\u0026#39;m shy! I am a turtle!\u0026#34;) 19 20class Bird(Pet): 21 def fly(self): 22 print(\u0026#34;Swoooosh! I\u0026#39;m flying away! I am a bird!\u0026#34;) Now lets get all our pets to first say hello and then perform the actions they are good at\n1cat_one = Cat(\u0026#34;maya\u0026#34;) 2dog_one = Dog(\u0026#34;bosco\u0026#34;) 3turtle_one = Turtle(\u0026#34;speedy\u0026#34;) 4bird_one = Bird(\u0026#34;diver\u0026#34;) 5 6cat_one.hello() 7cat_one.meow() 8 9dog_one.hello() 10dog_one.bark() 11 12turtle_one.hello() 13turtle_one.hide() 14 15bird_one.hello() 16bird_one.fly() 17 18# outputs 19# Hello my name is maya 20# Meeeeeooooww! I am a cat! 21# Hello my name is bosco 22# Wooof! Woof! I am a dog! 23# Hello my name is speedy 24# Hide! I\u0026#39;m shy! I am a turtle! 25# Hello my name is diver 26# Swoooosh! I\u0026#39;m flying away! I am a bird! Small challenge : \u0026quot;It's almost Easter...\u0026quot; In this exercise, we will try to create a small game using Object Oriented Programming. It is still possible not to use classes, but you will see that it complicates the code considerably... The ultimate goal of this challenge is to show you the power of classes !\nThe game : context \u0026amp; rules Every year, in a small rural village, the municipality organizes a treasure hunt. Many sweets are hidden in the town and the participants have to find them within a given time. The one who finds the most sweets wins the game. Let's code this.\nThe slides available here give you a better understanding of how the game will be run.\nHere is the code that simulate the game, the goal is to reimplement this code by using classes.\n1from random import randrange 2 3 4def update_challenger_points(challenger, world): 5 \u0026#34;\u0026#34;\u0026#34; 67Desc : tells whether the challenger wins a point. If yes it modifies the number of points. 8Params : world, challenger 9Return : None 1011\u0026#34;\u0026#34;\u0026#34; 12 if world[challenger[\u0026#39;position\u0026#39;]] == 1: 13 challenger[\u0026#39;collected_treasures\u0026#39;] += 1 14 15 16def set_challenger_mood(challenger, new_mood): 17 \u0026#34;\u0026#34;\u0026#34; 1819Desc : sets the mood of the challenger 20Params : challenger, new_mood 21Return : None 2223\u0026#34;\u0026#34;\u0026#34; 24 challenger[\u0026#39;mood\u0026#39;] = new_mood 25 26 27def set_challenger_position(challenger, new_pos): 28 \u0026#34;\u0026#34;\u0026#34; 2930Desc : sets the mood of the challenger 31Params : challenger, new_mood 32Return : None 3334\u0026#34;\u0026#34;\u0026#34; 35 challenger[\u0026#39;position\u0026#39;] = new_pos 36 37 38 39def update_challenger_position(challenger, world): 40 \u0026#34;\u0026#34;\u0026#34; 4142Desc : gives the new box number where the challenger has to go + sets the new position of the challenger 43Params : challenger, world 44Return : the new given position 4546\u0026#34;\u0026#34;\u0026#34; 47 square_number = randrange(len(world)) # HINT : randrange is a method from the \u0026#39;random\u0026#39; library. It gives an integer between 0 and len(world). 48 set_challenger_position(challenger, square_number) 49 return square_number 50 51 52def print_challenger(challenger): 53 \u0026#34;\u0026#34;\u0026#34; 5455Desc : return the relevant information of the challenger when programmers use \u0026#39;print\u0026#39; 56Params : challenger 57Return : the name of the challenger 5859\u0026#34;\u0026#34;\u0026#34; 60 print(challenger[\u0026#39;name\u0026#39;]) 61 62 63def interview_challengers_podium(sport_commentator, challengers): 64 \u0026#34;\u0026#34;\u0026#34; 6566Desc : interviews the first three challengers and asks them their mood after the competition. The answer of this question is printed. 67Params : challengers 68Return : the list of moods in the same order than the ranking 6970\u0026#34;\u0026#34;\u0026#34; 71 # TO BE COMPLETED 72 pass 73 74 75def announce_challengers(sport_commentator, challengers): 76 \u0026#34;\u0026#34;\u0026#34; 7778Desc : announces(print) the challenger 79Params : challengers 80Return : True 8182\u0026#34;\u0026#34;\u0026#34; 83 print(\u0026#34;[{}]:\u0026#39;The name of the challenger number one is {}\u0026#39;\u0026#34;.format(sport_commentator[\u0026#39;name\u0026#39;], challengers[0][\u0026#39;name\u0026#39;])) 84 print(\u0026#34;[{}]:\u0026#39;The name of the challenger number one is {}\u0026#39;\u0026#34;.format(sport_commentator[\u0026#39;name\u0026#39;], challengers[1][\u0026#39;name\u0026#39;])) 85 print(\u0026#34;[{}]:\u0026#39;The name of the challenger number one is {}\u0026#39;\u0026#34;.format(sport_commentator[\u0026#39;name\u0026#39;], challengers[2][\u0026#39;name\u0026#39;])) 86 print(\u0026#34;[{}]:\u0026#39;The name of the challenger number one is {}\u0026#39;\u0026#34;.format(sport_commentator[\u0026#39;name\u0026#39;], challengers[3][\u0026#39;name\u0026#39;])) 87 # TO BE REFACTORED (use a for...loop that depends dynamicaly on the number of challengers) 88 return 1 89 90 91def annouce_winner(sport_commentator, winner): 92 \u0026#34;\u0026#34;\u0026#34; 9394Desc : announces the winner 95Params : challengers 96Return : True 9798\u0026#34;\u0026#34;\u0026#34; 99 print(\u0026#34;[{}]:\u0026#39;And the winner is {}\u0026#39;\u0026#34;.format(sport_commentator[\u0026#39;name\u0026#39;], winner[\u0026#39;name\u0026#39;])) 100 return True 101 102 103def find_winner(challengers): 104 \u0026#34;\u0026#34;\u0026#34; 105106Desc : finds the challenger who has collected the most treasure and prints and returns the winner 107Params : challengers 108Return : the winner (as an object) 109110\u0026#34;\u0026#34;\u0026#34; 111 # TODO : case when there is a draw 112 hyp_winner = challengers[0] 113 for challenger in challengers: 114 if challenger[\u0026#39;collected_treasures\u0026#39;] \u0026gt; hyp_winner[\u0026#39;collected_treasures\u0026#39;]: 115 hyp_winner = challenger 116 return hyp_winner 117 118 119 120 121 122if __name__ == \u0026#39;__main__\u0026#39;: 123 124 # Part one : data definition 125 moods = [\u0026#34;happy\u0026#34;, \u0026#34;anxious\u0026#34;, \u0026#34;impatient\u0026#34;, \u0026#34;desappointed\u0026#34;, \u0026#34;amazed\u0026#34;] 126 127 # Note to the programmer : if you want to add challengers to the game you must follow the following rules : 128 # a challenger is a challenger IF AND ONLY IF he/she has a name, an age, a mood, a position and a collected_treasures 129 130 challenger_1 = {\u0026#39;name\u0026#39;: \u0026#34;Antoine\u0026#34;, \u0026#39;age\u0026#39;: 23, \u0026#39;mood\u0026#39;: moods[0], \u0026#39;position\u0026#39;: 0, \u0026#39;collected_treasures\u0026#39;: 0} 131 challenger_2 = {\u0026#39;name\u0026#39;: \u0026#34;Thomas\u0026#34;, \u0026#39;age\u0026#39;: 18, \u0026#39;mood\u0026#39;: moods[1], \u0026#39;position\u0026#39;: 0, \u0026#39;collected_treasures\u0026#39;: 0} 132 challenger_3 = {\u0026#39;name\u0026#39;: \u0026#34;Julia\u0026#34;, \u0026#39;age\u0026#39;: 28, \u0026#39;mood\u0026#39;: moods[0], \u0026#39;position\u0026#39;: 0, \u0026#39;collected_treasures\u0026#39;: 0} 133 challenger_4 = {\u0026#39;name\u0026#39;: \u0026#34;Richard\u0026#34;, \u0026#39;age\u0026#39;: 40, \u0026#39;mood\u0026#39;: moods[2], \u0026#39;position\u0026#39;: 0, \u0026#39;collected_treasures\u0026#39;: 0} 134 135 challengers = [challenger_1, challenger_2, challenger_3, challenger_4] 136 137 sport_commentator = {\u0026#39;name\u0026#39;: \u0026#34;Kathrine\u0026#34;, \u0026#39;age\u0026#39;:68 } 138 139 world_2D = [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1] 140 141 n_turns = 8 142 143 # Part two : game execution 144 announce_challengers(sport_commentator, challengers) 145 146 print(\u0026#34;The game is starting...\u0026#34;) 147 148 for turn_index in range(n_turns): 149 for challenger in challengers: 150 update_challenger_position(challenger, world_2D) 151 update_challenger_points(challenger, world_2D) 152 153 winner = find_winner(challengers) 154 annouce_winner(sport_commentator, winner) 155 156 157 for challenger in challengers: 158 if challenger == winner: 159 set_challenger_mood(challenger, moods[4]) 160 else: 161 set_challenger_mood(challenger, moods[3]) 162 163 interview_challengers_podium(sport_commentator, challengers) 164 Guide lines and TODO: First step : work only with the story\n Write down objects that you would like to build in this problem. Attach data and functionalities to these objects.  With the slides, build a list of all objects you can find and the related actions/functionalities. Do you have objects that have the same data and the same actions/functionalities ? If so, think of the class. ;)  Second step : explore the existing code\n  Have a look at the code and try to think which piece of code you would be able to reuse. Which functions could be used as class methods ?\n  Make ties with what you found in the first step.\n  If you have finish these two steps, it's time now to write python code. Make sure that you know well the syntax of python classes, don't hesitate to read again the part 4 of the lecture.  Third step : Refactoring : write your own classes\n Refactor your code in order to get rid of all function that are defined above the if __name__ == '__main__'. In order to do it, you need to create several classes. Refactoring definition: \u0026quot;In computer programming and software design, code refactoring is the process of restructuring existing computer code [...] without changing its external behavior.\u0026quot; Wikipedia  Fourth step : draw conclusions What are the benefits/the desavantages of a such refactoring ? Write at least four bullets.  Fifth step : finalize some functions\n To finish the challenge, you have to refactor the function formerly called announce_challengers() and to fill in the function formely called interview_challengers_podium().  5.Bonus Task: Extend the pet Clinic Example  Write out all the code in the examples above in your preferred python environment and verify that they work for you Add the ability to specify an age of the pet to the Pet class Create a list of 20 pets:  5 cats with different names and ages 5 dogs with different names and ages 5 turtles with different names and ages 5 birds with different names and ages   Update the hello method in the Pet class to also print the age of the pet Using a for-loop, go through the list of 20 pets and for each pet with an even-numbered age, make the pet say hello!  6. Bonus Task: Implement a REDI School Management System  Create a School class which represents all the different REDI school locations Each school location will be an object of the School class Create a Course class which represents all the different courses offered at REDI School Each actual course will be an object of the Course class Create a Student class which represents all the different students in a REDI School course Each actual student will be an object of the Student class Each student object must have a name Each course object must have a course name and a list of students Each school object must have a location name and a list of courses Test your system by:  Creating 3 REDI School objects representing the locatios in Germany Creating 1 course object representing a course offered at one of the schools (3 course objects in total) Creating students objects representing each of the students of the Intro To CS course.    Additional Resources  Python Classes/Objects Python Inheritance  ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/python/python_classes/","title":"12/April - Object-oriented Python"},{"body":"Prerequisites  Read through the content from the previous class. Review the following concepts and try to answer these questions:  What is object orientated programming Difference between an Object and a Class How do we define a constructor function How do we define attributes on a class How do we create a method on a class How do we create an inhertiance class   [Recommended]: review the w3 schools' materials on Python classes [Optional]: Work on the bonus task (task 6) from the previous class   Class Curriculum    Section content Expected time (mins) Pre - Requirements     Lesson Goals 5 minutes ‚ùå   Recap \u0026amp; questions from last class 30 - 45 minutes ‚ùå   Kahoot 10 - 15 minutes ‚ùå   Break 10 minutes ‚ùå   Exercises in groups 40-50 minutes ‚ùå   Check-out 10 minutes ‚ùå    0. Lesson Goals  Recap content and activity from last class Understand and practice object-oriented programming concepts  1. Check-In  What was particularly challenging last class? Are there any remaining questions from last class?  2. Kahoot Let's do a Kahoot to check our understanding of the concepts covered last class!\n3. Exercises (part 1) In groups, go through the exercises on this tutorial. Try not to look at the solutions until you have finished the problem. Copy the skeleton code into your local development setup (VSCode, PyCharm, or Google Colab) and try to achieve the \u0026quot;expected output\u0026quot; described for each exercise. Make sure everyone in your group has understood and produced the proper output before moving on to the next task in this section :)\n4. Exercises (part 2) In groups, let's start building a card game in Python. (While we won't implement an entire game in this activity, implementing a Blackjack, Poker, or other game-player could be a fun project!)\nThe goal will be to describe the real-world situation of a deck of cards using Python code. This is meant to be challenging; Google is your friend here, use it to look up how to do things and to help you understand the material!\nExample solutions to parts 1-3 will be posted after class :)\n If you aren't sure what a deck of cards is, feel free to check out this Wikipedia page or chat with your group :). The rest of this exercise assumes a standard 52-card deck (French deck), but feel free to use a different style if you wish.\n  Define a Card class.\n What properties should this class have? Include an object method that displays the card. (Hint: you can print the properties of the card.) Test your implementation by creating and displaying a few cards (ex. Ace of Spades, 4 of Hearts, 10 of Diamonds, Queen of Clubs...)    Define a Deck class.\n What properties should this class have? In the init constructor, make sure to build some representation of the 52-card deck. (Hint: use a nested for loop to create all the necessary cards) Include an object method that displays the deck. Test your implementation by displaying the deck. Is the whole deck there and as you expect?    (Challenge) Define a Hand class. A Hand is a list of cards that has a total value. For now, go ahead and assume that the value of a Hand is the sum of the values of each card and you can feel free to use the following scheme: Ace = 1 point, 2 = 2 points ... , King = 13 points. (Hint: consider using a dictionary mapping from card type to value.)\n What properties should this class have? Include a method to get the value of the hand. Include a method to display the hand. Test your implementation by creating (instantiating) a few Hand objects and displaying them.    (Optional challenge tasks / Project ideas) Note: all of these are supposed to be challenging, and implementing a combination of these (or the last one) could be an exciting project later in the coming weeks as well! Feel free to extend the example above by picking any of the additional tasks to \u0026quot;add-on\u0026quot; to your deck of cards:\n Deck: add a draw function which returns the next card drawn in the deck. Deck: add a shuffle function which gives the deck a random order. (Hint: use the Python random library to do this; feel free to Google or ask for help on how to access these functions) Hand: choose a game of your choice (i.e. Blackjack, Poker, ...) and write a method to either 1) compare two hands or 2) an object method that tells you if this is a winnning hand Game: (this could be a project for later in the class ;)) choose a 2-player card game of your choice and implement a game played by two auto-players ???: feel free to add additional classes or properties that you think make sense or are missing!  ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/python/python_classes_practical/","title":"14/April - Practical Object-oriented Python"},{"body":"Prerequisites Please complete these prerequisites before class, so we can spend as much time as possible on troubleshooting and practice! :)\n‚ú® Remember, reach out on the class slack channel if you run into any issues or have questions!\n   Homework videos from last class posted on slack on the internet, reposted here:\n How the Internet Works in 4 Minutes - 4:03 IP addresses and DNS - 6:45 Packets, Routers, and Reliability - 6:25 HTTP and HTML - 7:07 (Optional) Wires, cables, and WiFi This video is for those who want more details on how information is broken up and transported through the wires that make up the internet, the differences between fiber optics/radio/copper cables, and how WiFI is different than wired internet. It's very interesting but not required :)    Install GitHub Desktop\nIf you are running Mac or Windows on your computer, please install the GitHub Desktop app by following the instructions at this link.\nIf you are using Linux, please reach out to the teachers and let us know, since GitHub Desktop is not available for Linux. You can instead follow the instructions here to install git on Linux.\nNote: GitHub desktop should also automatically install git on the command line. If this does not happen by default and you would like to practice using command line git (warning: more challenging!), you can follow the instructions for your OS here.\n  Sign up and sign in to GitHub üöÄ\nOpen GitHub Desktop. If you are prompted to sign in or create an account, click the prompt to create an account if you don't already have one, otherwise sign in. Both options should open up a GitHub webpage.\nIf you are not prompted to create an account upon opening GitHub Desktop, sign up here: https://github.com/join\nYou can then follow the instructions linked here to sign into (authenticate) your account.\nWhy? In this class, we will use git/GitHub Desktop to...\n store our code collaborate with each other on assignments and projects share and showcase our work    Install Visual Studio Code (VSCode) and configure GitHub Desktop to use this Download and install here: https://code.visualstudio.com/\nAfter you have downloaded this, follow the instructions linked here to configure Visual Studio Code as the default text editor for GitHub Desktop.\nWhat is this? VSCode is an Integrated Development Environment (IDE), which can be used for developing and testing software. Today, we will use this to view and edit text files, and in the future we will use this for editing and writing code.\n  (Optional but highly recommended if you have time!) watch this video: Git and GitHub explained for Beginners. You can skip the section on ignoring files (11:38-15:38).\n  (Optional) if you are unfamiliar with the concept of files and file systems, discussed last class, please watch the following videos as well:\n files and file systems  If this video was difficult to understand or you are unfamiliar with navigating the file system on your computer currently, we recommend that you watch this video and this followup video   this video until 8:30 on file paths     Class Curriculum    Section content Expected time (mins) Pre - Requirements     Lesson Goals 5 minutes ‚ùå   Review and questions from last class 20 minutes videos   Overview of Version Control and GitHub 15-20 minutes ‚ùå   Demo of GitHub and an Open Source Project 5 minutes ‚ùå   Demo of Tasks Today 5-10 minutes ‚ùå   Class break 10 minutes ‚ùå   GitHub Practice in Groups 30-45 minutes GitHub Desktop and account   Wrap-up 5-10 minutes ‚ùå     0. Lesson Goals  Review information about the internet and files Use the GitHub Desktop tutorial to create a repository, branch, commit, and pull request Practice the Fork \u0026amp; Clone workflow that we will use throughout this class for sharing tasks   1. Review and Questions from Last Class (Intro to the Internet)  Kahoot! Go to www.kahoot.it and enter the game PIN from the session. Any questions on the content from last class?   2. Overview of Version Control and GitHub What is Version Control and why is it useful?  System for managing changes to files (including programs, text files, image files, etc.)  Version Control Systems for software (including git) help us understand changes made: what was the change? who made it? when? why?   May display a revision history or information about past edits Why is it useful?  Safely storing and accessing past versions of files  maybe something is now broken, and you want to use an older version that worked you don't want to lose your work on a project if your computer crashes   Collaborating on documents with others: modifying the same document can be tricky without a way of resolving conflicting changes   Some examples involving Version Control Systems:  Google Docs containing a document revision history Microsoft Office restoring an older version of a file if the program crashes with unsaved work Storing a code project in a GitHub repository :)   What are some examples from the teachers' experience?  What are Git and GitHub?  git: Version Control System for tracking and storing files, developed by the creater of Linux (Linus Torvalds); free, open source, and widely used in the software engineering industry GitHub: internet service that allows you to store and collaborate on collections of files stored as git repositories  Why GitHub Desktop?  git is a powerful tool but can be confusing and intimidating at first GitHub Desktop is an open-source tool that is more accessible to new developers and does not require comfort using the command line GitHub Desktop is relies on \u0026quot;best practice\u0026quot; workflows, which should help instill good habits when learning GitHub Desktop has nice visualizations of what is happening within commits, merges, etc. which will help build your understanding of git Skills learned while using GitHub desktop can be applied later to using git on the command line for more advanced, custom use in the future :)  Working with Git \u0026amp; GitHub We will practice these during the class activities today -- it's ok if it doesn't all make sense at the start. The GitHub Desktop Docs are also a great resource!\n This image illustrates the concept of branches (starting a new version with changes), commits (snapshots of these changes/versions), and merges (combining changes from different versions). This image was modified from https://www.nobledesktop.com/learn/git/git-branches.\nStarting a brand new project Scenario: you are just starting on your project, and want to create a repository to store your future work.\nIn this case, we want to create a new repository, which is basically just an empty directory plus some additional hidden files so that git knows that this is a repository and it should watch out for changes.\n  In GitHub Desktop, select File \u0026gt; New Repository or expand Current Repository and click Add \u0026gt; Create New Repository.\n  Fill in the fields in the popup, including the Name. Some notes:\n Name: name of the new directory that will be created and contain your new project. Local Path: points to a directory (folder) where the new repository will live. If you have a directory where you keep your work for this class (recommended), make sure to point Local Path to this directory. Initialize your repository with a README: a README is just a file describing the repository's purpose and use. Git Ignore: you can ignore this one for now. This lets git know if it should ignore changes from certain files. License: you can ignore this one for now. The License describes how others can use and build on your project.    Click Create Repository.\n  If you want to make this repository available on GitHub (the remote), click Publish Repository. In the popup, you can select whether or not the repository should be private (only you + others specifically added to the reopsitory can see it) or not (everyone can see it), and then click on Publish Repository.\n  Joining or copying an existing project Scenario A: your project partner already created a repository and you want to create a local copy so you can collaborate on this.\nScenario B: your computer crashed. Luckily, your project is stored on GitHub, and you want to make a new local copy of this.\nIn these situations, we want to clone an existing repository, which means create a local copy of the repository in your file system (i.e. you can edit these even when not connected to the internet).\n In GitHub Desktop, clone an existing repository by either selecting File \u0026gt; Clone Repository or expand Current Repository and click Add \u0026gt; Clone Repository. If the repository already exists under your own GitHub remote, you can find it under GitHub.com, otherwise, you may need to enter the repository URL after selecting the URL tab.  Scenario C: you want to create a remote copy of starter code used for class activities and projects, which you can then copy locally. Scenario D: you want to contribute to an open source project that you find interesting.\nIn these cases, you additionally may need to fork the project, or create a copy of the repository that you own in GitHub. After completing steps 1 \u0026amp; 2 above:\n  In GitHub desktop, create a new branch.\n  Click Publish Branch. A popup should appear asking something like, \u0026quot;Do you want to fork this repository?\u0026quot; Click Fork This Repository.\n  Another popup will appear like \u0026quot;How are you planning to use this fork?\u0026quot;:\n For most of our class activities (Scenario C above), select \u0026quot;For my own purposes\u0026quot; For contributing to open source projects or projects owned by others (Scenario D above), select \u0026quot;To contribute to the parent project\u0026quot;    You can find more information in the GitHub Desktop Docs here.\nMaking changes Scenario: you have a great idea for a new feature to add to your project.\n Make sure that your Current Branch is main (or the repository default branch). Click on Fetch Origin, which updates your main branch so that you have all the latest changes that you and your project partners have merged. Create a new branch, which will contain your new version of the project with the new feature. In GitHub Desktop, do this by clicking on Current Branch \u0026gt; New Branch or Branch \u0026gt; New Branch. Give your branch (version) a useful and descriptive name, ideally about the changes/feature you want to make in this version. Change the files in your local repository. You can use a text editor or IDE (Integrated Development Environment) to do this. Add the files to your staging area (changes that will be included in the next commit you make). In GitHub Desktop, this means making sure that the box is checked next to the file name on the left-hand side. Create a commit, or a saved snapshot of the files. To do this in GitHub Desktop, add a Summary (and optional Description) of the changes you have made so far and then click the Commit to \u0026lt;branch-name\u0026gt; button. Generally, commit often while working on a new feature! Push these changes to the remote repository; in other words, publish the changes made on this branch to GitHub. In GitHub Desktop, do this by clicking on Publish branch. Repeat steps 3-6 as needed, until you are done making changes (i.e. your feature is done). (If you are working by yourself on this project, you can skip this step!) Create a pull request (PR) on GitHub so that your other project collaborators can look over the changes and leave any feedback. To do this, go to the GitHub page for the repository and view your branch: on the left side, there should be a button with main and a down arrow -- click this and select your branch. At the top, if there is an option to \u0026quot;Pull request\u0026quot;, click that, otherwise click on the \u0026quot;Pull request\u0026quot; tab and then \u0026quot;New pull request\u0026quot;. Merge the changes from your new branch to the main branch, which means combine your new changes with the main branch (including any new changes that have been added to main in the meantime). If you created a PR (step 8), you can merge the PR directly in GitHub. Otherwise, switch to the main branch in GitHub Desktop. Then, click on Current Branch \u0026gt; Choose a branch to merge into main or Branch \u0026gt; Merge into current branchand select your feature branch. Delete your old feature branch if you don't need it anymore.  You can find more information on managing branches and commits in this section of the GitHub Desktop Docs.\nGlossary    Term Meaning     repository (also known as repo) the place where code is stored.   commit a snapshot of changes made to a repository   branch a pointer to a commit; a way to create a separate version of the files   remote a repository that is hosted by a web service   origin the remote repository associated with a project   head the last commit in the current branch   status the current state of the git repository   pull get the latest changes from the remote repository on your local repo   push push the latest changes from the local repository to the remote repo   pull request (also known as a PR) lets you get feedback on your code changes   staging area the intermediate area where a change is added before it is commit     3. Practice with GitHub Use the instructions on workflows above as well as the GitHub Desktop Documentation to work through these tasks in groups. Within the steps, there will be some observational questions about the process. Make sure to discuss and move forward together as a group.\nBefore beginning, we recommend that you create a directory (folder) like redi-code or intro-cs-22 (or another name of your choice) on your computer where you can store all of your repositories and code for this class!\nTask: GitHub Desktop Tutorial In GitHub Desktop, select Create a Tutorial Repository, and follow through the steps of the tutorial. Make sure to read the explanations provided throughout the guide!\nFor more help on completing the tutorial including pictures, check the docs here.\nTask: Creating a Repository and Making Changes  Create a new repository called test-repo-03-22. See the instructions above for starting a brand new project. Initialize the project with a README. Open the repository in VSCode (or another text editor). In VSCode, add some text to the README.md file. In GitHub Desktop, can you see the changes that you made to the README.md file? If not, check in with your group and/or a teacher. Once you have seen the changes, add a message to the Summary field at the bottom left-hand corner and create a commit, saving a snapshot of this new version. Publish this repository to a remote repository on GitHub. You can choose to make it public by unchecking the Keep this code private button if you'd like to share the repository page with the teachers! Check the repository page on GitHub. There should be a button in GitHub Desktop to Open the repository page on GitHub in your browser which will take you to this page. If you cannot find this page or the repository does not exist under your GitHub account, ask your group members and/or a teacher. In VSCode, create a new file called new-file.txt and write some text. In GitHub Desktop, what does this new file look like? Add a descriptive message and create a new commit. Publish these changes to GitHub.  Congratulations! You have created a new repository locally and pushed these changes to GitHub!\nTask: Working with an Existing Repository (Fork \u0026amp; Clone)  Fork and make a local copy of this repository: https://github.com/ReDI-School/intro-to-cs-git-review. See the instructions above for joining or copying an existing project for more details, and make sure to follow the additional steps to fork the repository! Open the files in the repository in VSCode (or another text editor if you weren't able to install VSCode). If you configured VSCode as your default editor, you can do this easily by going to Repository \u0026gt; Open in Visual Studio Code. Time to make some changes! Review the instructions above for making changes if needed to help with the following steps :) In GitHub Desktop, create a new branch called test-branch to contain the new changes. In the some-files directory in the repository, delete the file that is empty (has no contents). (Hint: open and look through the files in VSCode to find the empty files.). In GitHub Desktop, how can you tell that the file has been deleted? Create a commit to \u0026quot;save\u0026quot; your changes. Give it the following message (summary): \u0026quot;Delete file \u0026lt;name-of-file\u0026gt;\u0026quot;, replacing \u0026lt;name-of-file\u0026gt; with the name of the deleted file. One of the non-empty files has the contents: \u0026quot;Hello, I'm a file! What's your name?\u0026quot;. Modify this file that answers the question with your name (or one of your choosing)! Can you tell that a file has been modified? If not, ask someone in your group or a teacher for help before moving on. If so, in the same way as above, create another commit with a descriptive message of your choice. Publish your two commits to the remote repository on GitHub. c.txt seems to be out of place. Move this file into the some-files directory. In VSCode, you can do this by dragging the file into the desired directory. What does this change look like in GitHub Desktop? Create a commit for this change. Delete the delete-me directory. Create a commit for this change. Publish your remaining two commits to the remote repository on GitHub. Let's go ahead and create a pull request (PR) to merge test-branch to main. Assign someone in your group and one of your teachers as reviewers for the PR. (Optional) review any other PRs that you are tagged on. (Optional) once you have received an approving review on your PR, you can merge the PR!   Extra resources  GitHub's Git Guides: lots of useful guides explaining the different commands and components of git  About Git: more information about version control and git   GitHub's Git Cheatsheet: contains a useful glossary and cheatsheet of basic git commands and concepts Writing a good commit messages, by FreeCodeCamp A visual introduction to Git, by Ashley Keller Introduction to Version Control and Git: more information on version control and why we use it as well as an overview of Git and GitHub    Homework  Finish the exercises from class. Optionally: send a link to the GitHub page of your repository to the teachers, and tag a teacher on your pull request (PR). (Optional): make additional changes to the repository you created in the second task in class. (Optional): go through the GitHub collaboration tutorial. Review the extra resources and reach out to the class slack channel if you have any questions!  ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/git/git_and_github_desktop/","title":"22/March - Version Control with Git and GitHub"},{"body":"Small exercises to play with fundamental concepts The purpose of this page and these exercises is to familiarise you with basic programming concepts and to get you to ask questions. Write down all your questions so that we can answer them in the next session. If you have difficulties, please let us know on Slack. Good luck ;)  All the exercises can be done by using this Website. You don't necesseraly need to create an account.  Quick recap of the last session Python is a high-level programming language and is interpreted. It means that the program runs python files directly and translates the source code into the machine language. It differs from compiled languages which need to be compiled before beeing executed. C, C++, Fortran, Cobol are examples of compiled languages.\nThere are two ways to run python code. Either we write python commands we want to execute in a file we've created (with the .py extension) or we can directly write commands in a python interpreter.\nOn replit.com, you have on the left side a python file in which you can write. On the right side, you have the python interpreter in which you can directly write code and execute it. Write a line of python code just in front of the small arrow \u0026gt; and press enter to see the result.\n1\u0026gt; print( \u0026#34;hello world\u0026#34;) 2# output: =\u0026gt; \u0026#34;hello world\u0026#34; Data Types The notion of type in many programming languages is an essential aspect. It caracterises an object. Here is the definition given by Wikipedia:\n\u0026quot; A data type or simply type is an attribute of data which tells the compiler or interpreter how the programmer intends to use the data \u0026quot;\nBy reading this definition, we understand that types imply sets of rules that the interpreter and the programmer have to follow. In Python, all objects have at least one type. If you feel confortable with the concept, you can have a look at this graph which represents the type hiarchy.\nObjects of the same type share some properties, methods (because they belong to the same class but Shhhh this concept will come later)\nMore commonly used data types:  Strings (ex: 'asdf', 'hello my name is x', 'a', '123') Integers (ex: 1, -100, 1383234) Floats (floating point values) (ex: 1.0, -100.1234, 0.0000003, 1e5) Booleans (ex: True, False) Lists (ex: [3, 1, 'r', 'e'], [], [3.2, 3, 4.5]) Functions (ex: def my_function (a, b): ...)  Practice Python to have a better understanding ! 1) Find the type of your data :\nYou can use the keyword type() to know the type of an object.\nExample :\n1\u0026gt;\u0026gt;\u0026gt; type(\u0026#34;hello\u0026#34;) 2# outputs: -\u0026gt; \u0026lt;str\u0026gt; Try to diplay the other common types given just above and observe the output.\n2) Operations on types and between types\nTry + operator on integers, lists, strings and see what happens. When you add two strings or lists together, it is called concatenation.\nExample :\n1\u0026gt;\u0026gt;\u0026gt; print(\u0026#34;Hey\u0026#34;+\u0026#34; guys\u0026#34;+ \u0026#34;!\u0026#34;) 2# outputs: -\u0026gt; Hey guys ! Now try to add a string with an integer. Is it working ?\n3) Data conversion\na) Give the result of the addition 3.5+2.5 in type int (and not a float).\nb) Add \u0026quot;Hey, I'm\u0026quot; and int(24) together to create one string with \u0026quot;Hey, I'm 24\u0026quot;. Make it work !\nIf it's to hard, you can have a look here to get more precisions about the error message.  Variables If you don't remember exactly what a variable is, have a look at the course page.\n1) Which type for a variable ?\nWhen you assigned an object to a variable, the variable gets the type of this object.\nWhat is the type and the value of a at the end of the program ?\n1a = 1 2b = \u0026#34; world \u0026#34; 3 4a += 2 5a = \u0026#34;hello\u0026#34; 6 7a = (a + b)*2 8  a+=1 is equivalent to a=a+1  2) Modify a variable\nAs you can see in the piece of code written above, a variable can be edited as many time as you wish. Its type can change in a single piece of code... (However, it's not recommended to change the type of a variable in the same program. It can be confusing for the programmer).\nIterables If you don't remember exactly what an iterable is, have a look at the course page.\n1tab = [\u0026#34;a\u0026#34;, 123, \u0026#39;google\u0026#39;, True]   Give me the third element of the list. Which type is it ?\n  What is the length of this list ?\n  Add the string \u0026quot;new_item\u0026quot; at the end of tab ?\n  Consider the new list :\n1google_tab = [\u0026#39;google\u0026#39;, True, \u0026#39;google\u0026#39;, True, \u0026#39;google\u0026#39;, True, \u0026#39;google\u0026#39;, True, \u0026#39;google\u0026#39;, True, \u0026#39;google\u0026#39;, True, \u0026#39;google\u0026#39;, True, \u0026#39;google\u0026#39;, True]  Could you give in one line a way to get google_tab without all the google strings ? The keyword is slicing ;)    Functions or methods A function/method is an object that take inputs (parameters) and give you back outputs. (You can draw a pararel with mathematical functions.) You know some functions that have already been implemented by Python for us!\nlen and print are both build-in methods. You can verify it by using the method : type\n1\u0026gt;\u0026gt;\u0026gt; type(len) 2# outputs: -\u0026gt; \u0026lt;class \u0026#39;builtin_function_or_method\u0026#39;\u0026gt; Try it by yourself !\nSmall challenge Create a function called minutes_to_date(minutes)that translates minutes in this format YYear:DDay:HHours:MMinutes\n Give the result of minute_to_date(123234987)  1def minutes_to_date(minutes): 2 # Write your function that translates the minutes variable into a new one called new_date. 3 return new_date   ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/python/exercises_intro_to_python/","title":"24/March - Exercises : intro to Python"},{"body":"Pre Requisites None for today!\n Class Curriculum    Section content Expected time (mins) Pre - Requirements     Check-in and questions from last class 5 minutes ‚ùå   Lesson Goals 5 minutes ‚ùå   Python Overview 15 minutes ‚ùå   Hands-on Python exercise (in pairs) 45-60 minutes ‚ùå   Break 10 minutes ‚ùå   Synthesis of Python Concepts from Exercise 15-30 minutes ‚ùå   (Possible) \u0026quot;Hello World\u0026quot; in Python Exercise 20 minutes ‚ùå   Check-out 5 minutes ‚ùå    Lesson Goal Have a high-level idea of what Python is and start getting comfortable reading and writing basic statements in this programming language.\n0. Python Overview Q\u0026amp;A Intro   What is Python?\n  What is a high-level programming language?\n  What are terms that you may hear when discussing programs and programming languages?\n  BLACK_BOX - outputs ] --   How and in what fields is Python typically used?\n  What examples of things you can do with Python?\n   What questions do you have so far?  1. Hands-on Python Activity Go through this Exercise at your own pace in your groups. Make sure you are all doing this together and asking questions.\nThere is no rush -- it is completely fine not to finish the whole exercise!!\nThe purpose here is to start getting familiar with Python syntax through trial-and-error (so getting things wrong is completely expected and part of this process!). After this section, we will go through the activity as a group and discuss our observations of rules and concepts from Python that we took from the exercise.\nWhen you get an answer wrong, make sure you look at the correct answer below and try to understand what the expression means from the correct answer.\nRefresher of some math operators that you will see:\n +: addition -: subtraction *: multiplication a \u0026lt; b: less than --\u0026gt; \u0026quot;a is less than b\u0026quot; a \u0026gt; b: greater than --\u0026gt; \u0026quot;a is greater than b\u0026quot;  2. Python Concepts - Sharing \u0026amp; Synthesizing We will go over many of these concepts in more detail in the coming weeks, so no problem if it takes a little time for them to make sense!\nOne note about the code snippets below: in Python, we can write comments by using the # symbol; anything after this symbol is not interpreted as code or executed. This can be a really convenient way to write notes to yourselves (or future developers!) when trying to understand code you wrote.\n What observations did you have from the exercise?  Data Types   What is a data type?\n  What are examples of different data types that you saw?\n strings (ex: 'asdf', 'hello my name is x', 'a', '123') integers (ex: 1, -100, 1383234) floats (floating point values) (ex: 1.0, -100.1234, 0.0000003, 1e5) booleans (ex: True, False) lists (ex: [3, 1, 'r', 'e'], [], [3.2, 3, 4.5]) functions (ex: def my_function (a, b): ...)  (more data types that weren't shown in this exercise will be discussed in later sessions)\n  Variables   What is a variable? What's an example?\nSome word (starting with a letter, and can contain letters, numbers, and underscore _) that represents some value. We set the value of a variable with =, for example: test_var = 10 sets the variable test_var to be equal to the value of 10. Setting the value of a variable is often called assigning a variable.\n  Iterables (lists, strings, ...)   What does the len keyword do? i.e. len('asdf') or len([1,2,3,4])\nlen gets the length of any \u0026quot;iterable\u0026quot; -- any \u0026quot;thing\u0026quot; that is made up of other things that you can \u0026quot;iterate\u0026quot; or count through: list, string, tuple, dictionary, set...\n  What does the [#] syntax do?\nThis indexes into an iterable and gets you the # value of it. Note that the \u0026quot;first\u0026quot; index is \u0026quot;0\u0026quot;, because we 0-index in Python. For example:\n1 a = \u0026#39;asdf\u0026#39; 2 b = [1,2,3,4] 3 a[0] 4 # outputs: -\u0026gt; \u0026#39;a\u0026#39; 5 b[3] 6 # outputs: -\u0026gt; 4   Booleans and conditions   What does the == symbol mean? What about !=?\n== is \u0026quot;equals\u0026quot;, != is \u0026quot;does not equal\u0026quot;.\n  What is the difference between = and ==?\n= is for assigning some value to a variable, while == is for testing for equality between the two sides.\n  What does the if keyword do?\nThis is a conditional statement: if CONDITION: means: \u0026quot;if CONDITION evaluates to True, then execute the code that follows directly after the statement\u0026quot;\n  How about an if ... else statement?\n1if CONDITION_A: 2 STATEMENT_A 3else: 4 STATEMENT_B In this example, \u0026quot;if CONDITION_A evaluates to True, then execute STATEMENT_A. Otherwise (if CONDITION_A evaluates to False), then execute STATEMENT_B. --\u0026gt;\n  How about if ... elif ... else?\n1if CONDITION_A: 2 STATEMENT_A 3elif CONDITION_B: 4 STATEMENT_B 5else: 6 STATEMENT_C In this example, \u0026quot;if CONDITION_A evaluates to True, then execute STATEMENT_A only. Otherwise (if CONDITION_A evaluates to False), then check if CONDITION_B evaluates to True and if so, execute STATEMENT_B only. If both CONDITION_A and CONDITION_B evaluate to False, then execute STATEMENT_C. Note that here, we are only ever execute one of the STATEMENT_'s, even if multiple conditions evaluate to True.\n  Functions   What is a function?\n1def my_test_function(a): 2 return a A function is a sequence of steps or tasks (written in a block of code), which may or may not take in arguments. Whenever we call a function, we execute this defined set of steps (with any arguments passed in). The above example function takes in some value and simply returns, or gives us back, this value when we call it like so: my_test_function(12) # evaluates to 12\n  3. (if there is time) \u0026quot;Hello, World!\u0026quot; in Python It's something of a tradition in the Computer Science world when learning a new language to write code that outputs \u0026quot;Hello, World!\u0026quot;. Check out this Wikipedia article for more information on why :).\nFor today, go ahead and try that out in this Python playground, which will allow you to execute some test code by clicking on the Play button (triangle) on the top of the console window.\nExample solutions will be posted in a few days :)\nTask 0: write code that outputs \u0026quot;Hello, World!\u0026quot; Tip: there is a built-in print function in Python that takes some input and outputs this to standard out (STDOUT), which is in this case the right side of the playground console. (Recall that the # stands for a \u0026quot;comment\u0026quot; in Python, meaning that this line is just a \u0026quot;note\u0026quot; to yourself and does not need to be included.)\nExample usage:\n1print(\u0026#34;asdf asdf\u0026#34;) 2# outputs -\u0026gt; asdf asdf 3print(\u0026#34;my name is\u0026#34;, \u0026#34;Robot\u0026#34;) 4# outputs -\u0026gt; my name is Robot   Task 1: create and call a function that prints \u0026quot;Hello, World!\u0026quot; Tip: Modify the code you wrote in the previous task so that this happens within a function that you define.  Task 2: create a function that returns the string \u0026quot;Hello, World!\u0026quot;. Call this function and print the output. A solution:\n1def hello_world(): 2 return \u0026#34;Hello, World!\u0026#34; 3 4print(hello_world()) Task 3: modify your function so you can greet a specific name: \u0026quot;Hello, Person\u0026quot; In other words:\n1my_hello_world(\u0026#34;Noor\u0026#34;) 2# expected output -\u0026gt; \u0026#34;Hello, Noor\u0026#34; \"Hello, Noor\" print(hello_world(\"Jose\")) # output - \"Hello, Jose\" ``` Another solution: ```python def hello_world(name): print(\"Hello, \" + name) hello_world(\"Noor\") # output - \"Hello, Noor\" hello_world(\"Jose\") # output - \"Hello, Jose\" ``` -- Additional practice (all optional)  Modify your \u0026quot;greeter\u0026quot; using any of the concepts we discussed; perhaps include a conditional expression (i.e. only greet IF ...). Try to write and evaluate any Python expressions that you saw in the silent teacher activity in the playground. Write your own function to return or print some value.  Extra resources and references from class  Python playground \u0026quot;Hello, World!\u0026quot; on Wikipedia Silent Teacher exercise from class Python foundation docs List of some open source Python projects  ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/python/intro_to_python/","title":"24/March - Introduction to Python"},{"body":"Pre Requisites  Review the course content from last class and bring any questions you have ! We will answer these questions at the beginning of class. (Remember, if you have a question, so does someone else in the class, so please feel free to ask :) ) Review 24/March - Introduction to Python Read through the Python Installation Overview section below. Spend some time thinking about which option may make sense for you. VSCode or PyCharm will give you the most options and would enable you to continue practicing your command line and git/GitHub skills. Try getting set up with at least one of the options, but don't spend more than 1-2 hours on this if you run into a lot of unexpected problems. We will troubleshoot at the beginning of this session as well as in person at the ReDI school on Thursday for those who have issues installing.  Python Installation Overview Google Colab Overview  free, requires a google account (gmail) and an internet connection no need to install Python on your computer, as Colab comes with an interpreter built-in that can run your code easy to create a new document or create a \u0026quot;copy\u0026quot; of assignments that we create can use the UI to save copies to GitHub or to your Google Drive makes it easy to execute and write code in notebook \u0026quot;cells\u0026quot;; it's possible to mix code and text in a readable and clear way notebook-style is very common in the Data Science space, so if you think you may want to go in the direction of data science or analytics, this could be a great option  here's an example iPython Notebook in Colab if you'd like to get a sense of what these are!   can be used for writing Python Notebooks (.ipynb only, no pure .py files) one of the options used in the Intro to Python course with ReDI school recommended if you don't feel as comfortable installing Python on your machine or had difficulties with this, you don't want to work on the command line or use git/GitHub, or you are particularly interested in learning data science/analysis in the future  Setup instructions  Visit Google Colab. You may need to login with your gmail account or else create a Google Account in order to use Google Colab. In the bottom right, click on New Notebook. This will create a new Python Notebook in your Google Drive. Some notes:  You can rename this file by clicking on the name (probably Untitled0) in the top left and renaming this. (See diagram below). (Note) If you want to save this Notebook in GitHub, you can create a repository in GitHub and initialize it with a README or other file. Then, in your Colab notebook, click File \u0026gt; Save Copy to GitHub. You may need to authorize your account (let GitHub know that it's ok for Colab to write to your repositories on your behalf), but then you can select this repository, and Colab will save a copy to it with the current state. If you make changes that you want to commit, you can repeat this process.   In your notebook, click into the cell and write a Python statement of your choice (perhaps, a function to print hello world or add two numbers together). Then, click the play button (or use Shift + Enter) to execute this line of code. After a few seconds, the result of the expression should appear under the cell.  Done! Optionally: check out the Welcome to Colaboratory notebook that Google has provided, and watch the short introductory video in it. This will just give you a sense of what you can do in Colab.  VSCode  free IDE that we have previously used in this class requires you to have installed a version of Python on your machine can be used for writing and executing Python Notebooks (like in Colab) as well as pure Python scripts and modules (.ipynb and .py files) can install extensions to add Python syntax-highlighting and coding tips will require you to continue practicing your command line and git/GitHub skills recommended if you feel comfortable installing Python, want to continue using the command line to navigate your file system and using git/GitHub as you develop your project, or you want to continue deepening your knowledge of one IDE rather than trying out a new platform  Setup Instructions   Download and install Python at this link (latest version -- 3.10.0). Complete all of the installer steps.\n  (Optional) in the installed Python folder, there should be an IDLE program. Double click or run this program, which opens a Python interactive shell. This will execute Python code statements. Try it out by printing something (hint: use the print function)\n  In VSCode, install the following extensions by clicking on the extensions tab on the left, searching for the following extensions, and clicking \u0026quot;Install\u0026quot; (see diagram):\n Python MagicPython Visual Studio IntelliCode Another option: Python Extension Pack which includes all three of the above extensions plus a few more    In VSCode in the View menu in the top left corner, click Command Palette (or use the shortcut Command-Shift-P) which should bring down a dropdown menu. Here, type \u0026quot;Python: Select Interpreter\u0026quot; and click on this option. This should bring up a list of all Python versions installed on your computer -- select 3.10.0, the version you installed.   (Optional) test that this works! Create a new project or a new file with the .py ending (for example: hello_world.py). Have this file output \u0026quot;Hello World!\u0026quot; (hint: use the print function). Click on the green play button in the top right corner to run the code. This should open the terminal in VSCode and print out the output. If you run into errors, try restarting VSCode to make sure all changes were in place, and then if you run into the same issue, Google this error or ask a teacher or peer in class!\n  PyCharm (Community Edition)  Community Edition is free; upgrading to the Professional Edition is not necessary for the purposes of this course an IDE (integrated development environment) designed for Python requires you to have installed a version of Python on your machine built-in awesome features that help you write and execute Python code (function signature help + completion, syntax highlighting) can manage different Python virtual environments for you (different versions of Python, different additional packages specific to projects, etc.) can be used for writing and executing Python Notebooks (like in Colab) as well as pure Python scripts and modules (.ipynb and .py files) will require you to continue practicing your command line and git/GitHub skills one of the options used in the Intro to Python course with ReDI school recommended if you feel comfortable installing Python, want to continue using the command line to navigate your file system and using git/GitHub as you develop your project, or you think you may want to continue learning Python after this course  Setup Instructions   Download and install Python at this link (latest version -- 3.10.0). Complete all of the installer steps.\n  (Optional) in the installed Python folder, there should be an IDLE program. Double click or run this program, which opens a Python interactive shell. This will execute Python code statements. Try it out by printing something (hint: use the print function)\n  In PyCharm, can select different Python interpreters for each project. Since this is our first project, we need to add and setup a first interpreter. (In the future, you can select this interpreter again, or set up a new one in a similar way.)\n  Open PyCharm and click on New Project. Choose a location for the new project; your normal coding folder is a good idea, as this will create a new directory within it.\n  PyCharm will now ask you to configure your interpreter. Click on Previously configured interpreter, then on the three dots to the right of the select. (Note) you can also use PyCharm to create Virtual Environments. This is a more advanced topic and is out of scope for today, but feel free to look into this and reach out if you would like to know more!\n  Select System Installation and select the path to your Python 3.10 installation. Make sure that this is the path to the version of Python you just installed (3.10), not any other version that was already installed on your computer. (Note: the image shows the path to 3.9, but it should say 3.10 for you if you downloaded the latest version of Python.)   Click Ok to finish configuring the Python version\n  PyCharm may have already created a test main.py file for you. (If not, go ahead and create a file like hello_world.py and have it print out hello world or something else!) Then press the green play button in the top right corner to run this code.\n   Class Curriculum    Section content Expected time (mins) Pre - Requirements     Lesson Goals 5 minutes ‚ùå   Check-in on pre-reqs and questions from last class 10-15 minutes Read and attempt installation instructions   Short review/demo of each installation option 20 minutes Read and attempt installation instructions   Break 10 minutes ‚ùå   Troubleshooting installation in groups 5-30 minutes Read and attempt installation instructions   Hands-on Python exercises (in small groups) rest of class ‚ùå   Check-out 5 minutes ‚ùå    0. Lesson Goals  Have a working development environment on Python. Build familiarity with the concepts of data types, functions, and control flow (loops, conditionals) Continue writing code in Python  1. Check-In  What was particularly challenging last class? Are there any remaining questions from last class? Was there anything you found strange or surprising last class? What are you excited to learn more about? Were there any challenges understanding the pre-requisites for today's class?  2. Short review of each installation option  Colab, PyCharm, VSCode We will also take a look at a Python Notebook (.ipynb) vs. normal Python file .py. What is the difference between these two formats? How do we run each of these?  Notebooks are made up of \u0026quot;cells\u0026quot; which allow you to execute blocks of code. Cells can also contain Markdown or text, so these can be useful for demoing information or for storing plots, charts, and doing data analysis. Notebooks are commonly used in the Data Science and Machine Learning fields. .py files are Python files, and can be executed by a Python interpreter via path/to/python/installation filename.py where you replace path/to/python/installation with the path to the location that you installed Python on your machine and filename.py with the name of your Python file. Your interpreter will also look for a main.py in your module or the statement: if __name__ == '__main__': in a file to know where to begin running your code. This is where you can tell the interpreter to start calling your functions.   We will take a look at the IDLE Python terminal that comes with your Python installation and how you can interactively execute lines of code here. (There are other Python terminals that you can install or use, such as ipython.) This can be useful for testing out your logic and syntax as you are writing a longer program as well!  3. Troubleshooting in Groups We will split up into groups based on whether folks have Python installed or are having issues so that we can troubleshoot and get everyone set up as quickly as possible :) We can also continue this during the in-person session if we can't solve these issues quickly enough!\nGroups that are done with installation can start working on the Python problems from the following section.\n4. Hands-on Python Tasks Work in groups to solve the following tasks in your new Python Dev setup. As a group exercise, we expect you to discuss with your group members to solve the problems together. This may mean having one person share their screen and talking through the code you will write together, and making sure you all understand before moving on to the next task. If you do not get through the exercises in class, please keep trying to work through them as homework.\nIf you are already familiar with Python and would like an additional challenge, try to use git to commit and push your work. (That means, create a local and corresponding remote repository, add your Python file to the repo, commit your changes, and push these to the remote repo.)\nThere are a lot of tasks, but they are each fairly short. The goal here is to get more practice with data types and the syntax that we learned from the last session.\nSetup First, let's make sure we have a place to write our Python code. Please follow the setup for your dev environment.\nGoogle Colab Create a new notebook. For each task, we recommend creating a new cell (block within the Colab notebook) and writing your code there. Make sure to evaluate the code in the cell (click the play button, or hit the keys: Shift-Enter or Ctrl-Enter) to check the outputs.\nVSCode Create and save a new file (File \u0026gt; New File) -- you can call it something like python_exercises_nov2.py or whatever else you would like, but make sure it has the .py file extension. Make sure your Python interpreter is configured properly (according to the installation instructions). Enter the following line into your file: print('hello'). Then, try to find the play button in the top right corner and press that, or else right click somewhere within the file and select Run Python File in Terminal. Make sure you can see the output 'hello' in the terminal at the bottom.\nPyCharm You can use the project that you set up as part of installing PyCharm or create a new project, depending on how you would like to organize your work. Create a new file (File \u0026gt; New, or right-clicking on the left-hand bar and selecting New \u0026gt; File) -- you can call it something like python_exercises_nov2.py or whatever else you would like, but make sure it has the .py file extension. Enter the following line into your file: print('hello'). Then, right click on the file tab and select Run 'YOUR_FILE_NAME'. Make sure you can see the output 'hello' in the terminal at the bottom. After the first time, you can also simply click the green play button in the top right corner (and make sure the drop-down next to this shows the file name you want to run).\nBackup Option If your setup is not yet working properly, you can also use the IDLE terminal that comes with the Python installation or else the Python playground from last class.\nTask 0 - Comments Comments are lines of code that Python will intentionally ignore. Comments are a great way to leave notes to yourself and to other people who will later need to figure out what that code does.\nThere are two ways to write comments in Python:\nUsing # will tell Python to ignore the remainder of the text on the current line. This is an in-line comment:\n1# This is an in-line comment. You can also have comments that span multiple lines which are done with three single or double quotes to start and 3 to end.\n1\u0026#39;\u0026#39;\u0026#39; 2This is a mutiline comment 3\u0026#39;\u0026#39;\u0026#39; NOTE: As you write code, you should regularly add comments to clarify the function of parts of your code. Good commenting can help communicate the intent of your code‚Äîboth for others and for your future self.\nFor each of the following tasks, add a comment about your code that states which task you are working on (ex. # Code for task 12). Once you have completed a task, you can comment out the printed value from that section, so that you do not continue to see the output of all the previous tasks each time. (There isn't a real output for this task!)\nTask 1 - Declare variables Last class, we went over several Python data types. A \u0026quot;data type\u0026quot; describes the quality or structure of a piece of information. Some of the data types that we saw last class include:\n int for integers (1,0,-4), str for strings ('asdf', 'b', '234'), float for floating point numbers (1.2, 3.44444, 6.2837), bool for booleans (True, False), list for lists ([1,2,3], ['qw45', 134]),  For example, computers distinguish between numbers, such as the number 12, and strings, such as \u0026quot;12\u0026quot;, \u0026quot;dog\u0026quot;, or \u0026quot;123 cats\u0026quot;, which are collections of characters. Computers can perform mathematical operations on a number, but not on a string.\nVariables allow computers to store and manipulate data in a dynamic fashion. They do this by using a \u0026quot;label\u0026quot; to point to the data rather than using the data itself. Any of the data types may be stored in a variable, and the value of a variable can be modified.\nWe can create a new Python variable by assigning a value to a label, using the = assignment operator.\n1my_name = \u0026#34;tess\u0026#34;; creates a variable called my_name. A variable name can be composed of characters, numbers, and the _ underscore character. It can't start with a number.\nCreate a variable called our_class and assign it the value \u0026quot;Intro to CS\u0026quot;. Print the value of this variable to make sure that it has been set to Intro to CS.\nTask 2 - Assign the value of one variable to another After a value is assigned to a variable using the assignment operator, you can assign the value of that variable to another variable using the assignment operator. Here's an example:\n1my_var = \u0026#39;asdf\u0026#39; 2my_num = my_var 3print(my_num) 4# outputs \u0026#39;asdf\u0026#39; Create a variable a and assign it to the value of 5. Assign the contents of a to a new variable, b. Print the values of a and b and make sure these are the same.\nTask 3 - Adding  Create a variable c and assign it to the value of two integers added together (i.e. 2 + 4). Print c and make sure that this is equal to the sum of the two numbers you have added together. Print the sum of c and 2. Using the variable a (value = 5) from Task 2, print the sum of a and c. Increment (increase) the value of c by 2.  Hint: you can increment the value of a variable by using either the += operator (i.e. my_var += 5) or by reassigning the variable (i.e. my_var = my_var + 5).\nTask 4 - Subtracting  Create a variable d and assign it to the value of an integer subtracted from another (i.e. 4 - 3). Print d and make sure that this is equal to the difference of the two numbers. Print the expression subtracting d from a. Decrement (decrease) the value of d by 2.  Hint: just like with +=, you can decrement by using the -= operator or by reassigning the variable (i.e. my_var = my_var - 5).\nTask 5 - Multiplying  Create a variable e and assign it to the value of an integer multiplied by another (i.e. 3 * 9). Print e and make sure that this is equal to the product of the two numbers you have multiplied. Print the expression multiplying e with a. Multiply the value of e by 2.  Hint: just like with -=, you can multiply the value of a variable by using the *= operator or by reassigning the variable (i.e. my_var = my_var * 5).\nTask 6 - Dividing  Create a variable f and assign it to the value of a number divided by another (i.e. 3 / 9). Print f and make sure that this is equal to the quotient (result of the division). Print the expression dividing f by a. Divide the value of f by 2.  Hint: just like with *=, you can multiply the value of a variable by using the /= operator or by reassigning the variable (i.e. my_var = my_var / 5).\nNote that there are multiple \u0026quot;types\u0026quot; of division. In Python, / (as used above) divides as we normally think of division and can return a floating point value. There is a second operator, //, that performs what is called \u0026quot;integer division\u0026quot; which means that it discards the remainder (i.e. no value after the decimal point).\nTask 7 - Modulo (remainder) The modulo (%) or remainder operator gives the remainder of the division of two numbers. Example:\n15 % 2 = 1 because 22 * 2 = 4 35 - 4 = 1 (Remainder) This can be useful to check, among other things, whether a number is even or odd, by checking the remainder of the division of the number by 2:\n117 % 2 = 1 (17 is Odd) 248 % 2 = 0 (48 is Even) Copy the following code and replace VALUE_HERE with an integer so that the value of mod_output is equal to 3.\n1a = VALUE_HERE 2mod_output = 9 % a 3print(mod_output) Task 8 - String variables Recall that a string is a series of zero or more characters that are enclosed in either single or double quotes, or triple quotes (the same as with multiline comments). Valid strings in Python include:\n1\u0026#34;\u0026#34; # empty string 2\u0026#34;\u0026#39;hello\u0026#39;\u0026#34; 3\u0026#39;adf\u0026#39; 4\u0026#39;\u0026#34;asdf\u0026#34;\u0026#39; 5\u0026#34;\u0026#34;\u0026#34;asdf\u0026#34;\u0026#34;\u0026#34; In Python, you can \u0026quot;concatenate\u0026quot;, or join, two strings together using the + operator. In Python, 'hello' + ' world' would equal 'hello world'.\n Create two new string variables: my_first_name and my_last_name and assign them to the values of your first and last name. Print out the value of each variable to confirm this. Concatenate the two string variables and print this result. Additionally, try to add a space between the two. (Hint: you can concatenate more than one string in an expression, like: 'hello' + ',' + 'world'). Create a new variable called my_fullname and set this to the value of my_first_name concatenated with a space and then my_last_name (as in the exercise directly above this). Recall the += operator that we used to increment a variable. This can also be used to concatenate a string onto the end of a string variable. Try this operator out by adding the line: my_first_name += ' is awesome' and printing out my_first_name. Is this value what you expected?  Task 9 - String lengths In Python, you can find the length of a String value by writing using the built-in len function. Example:\n1len(\u0026#34;redi\u0026#34;) 2# outputs 4 3len(\u0026#39;hello, world\u0026#39;) 4# outputs 12  Copy the following snippet into your file, and then print the lengths of each of the following variables:  1empty = \u0026#39;\u0026#39; 2language = \u0026#34;Python\u0026#34; 3sentence = \u0026#34;I\u0026#39;m a really long sentence\u0026#34;  Write a line of code that defines the variable total_length as the sum of the lengths of all three variables above.  Task 10 - Strings as iterables Bracket notation, or \u0026quot;array indexing\u0026quot; is a way to get a character at a specific index within a string. (This also works for lists and other ordered iterables). Most modern programming languages, like Python, don't start counting at 1 like humans do, but instead start at 0. This is referred to as \u0026quot;zero-indexing\u0026quot;.\nFor example, the character at the index 0 in the word Hello is H. So if word = \u0026quot;Hello\u0026quot;, you can get the value of the first letter of this string by using: word[0].\nIn Python, you can also use negative numbers to index backwards into a word. For example, word[-1] will get you the last letter in the word.\n Use bracket notation to find the first character in sentence from task 9, and print this out. Use bracket notation and the len operator to find the last letter in the word, and print this out. (Hint: the last index is equal to the length of the word - 1 (because of zero-indexing)). Use the negative number indexing to find and print the second to last letter in sentence.  Task 11 - Slicing strings You can use the same principle we just used to retrieve a part of the string (sometimes referred to as a \u0026quot;substring\u0026quot;). Here are some examples (note: leaving the index off before or after the : is shorthand for the start and end of the word):\n1word = \u0026#34;Hello!\u0026#34; 2word[1:2] # outputs: \u0026#34;e\u0026#34; 3word[0:3] # outputs: \u0026#34;Hel\u0026#34;; equivalent to word[:3] 4word[:] # outputs: \u0026#34;Hello!\u0026#34; 5word[3:6] # outputs: \u0026#34;lo!\u0026#34;; equivalent to word[3:] 6word[2:-2] # outputs: \u0026#34;ll\u0026#34;; equivalent to word[2:len(word) - 2]  Using the variable sentence from task 9, sentence = \u0026quot;I'm a really long sentence\u0026quot;, create a new variable only_really that contains only the word really in the sentence, and print the value of this variable. Using the variable sentence again, create a new variable called first_letters that contains the first 4 letters of sentence.  Task 12 - Lists Lists are one of the more complex Python data types. Lists hold other data types like strings, integers, floats, and even lists. Each list item has an index, like strings. The index starts from 0. Just as with strings, the len function also gives you the length of a list. Also like strings, you can slice a list, which means to get some part of the overall list. Here are some examples to illustrate this:\n1# creating some lists 2fruits = [\u0026#39;apple\u0026#39;,\u0026#39;banana\u0026#39;,\u0026#39;orange\u0026#39;] 3stuff = [12, \u0026#39;asdf\u0026#39;, 123.013, [1,2,3]] 4 5# here\u0026#39;s the indexing 6fruits = [\u0026#39;apple\u0026#39;,\u0026#39;banana\u0026#39;,\u0026#39;orange\u0026#39;] 7# 0 1 2 8# like strings, lists can also use negative indexing 9fruits = [\u0026#39;apple\u0026#39;,\u0026#39;banana\u0026#39;,\u0026#39;orange\u0026#39;] 10# -3 -2 -1 11 12# get the length of the list 13len(fruits) 14# outputs: 3 15 16# slice a list 17fruits[:2] 18# outputs: [\u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;] 19fruits[1:3] 20# outputs: [\u0026#39;banana\u0026#39;, \u0026#39;orange\u0026#39;]  Create a list with the first names of your breakout room group, and assign this to the variable first_names. Print the list. Print out the value of the second name in first_names. (Hint: use the bracket notation asa with strings.) Print the length of the list of names. Create a slice of the list containing the first two names and print this slice.  Task 13 - Appending and removing elements from a list There are several methods that you can use with lists. The .append() method adds an item to a list, while the .remove() method removes an item from the list:\n1fruits = [\u0026#39;apple\u0026#39;,\u0026#39;banana\u0026#39;,\u0026#39;orange\u0026#39;] 2fruits.append(\u0026#39;mango\u0026#39;) 3# value of fruits is now: [\u0026#39;apple\u0026#39;,\u0026#39;banana\u0026#39;,\u0026#39;orange\u0026#39;,\u0026#39;mango\u0026#39;] 4fruits.remove(\u0026#39;banana\u0026#39;) 5# value of fruits is now: [\u0026#39;apple\u0026#39;,\u0026#39;orange\u0026#39;,\u0026#39;mango\u0026#39;]  Using the list of your names (first_names), add one name and print the list. Using the list of your names (first_names), remove one name and print the list.  Task 14 - Dictionaries Dictionaries are a Python data structure. While lists allow you to create ordered collections of values, dictionaries allow you to create collections of key / value pairs. An analogy for a dictionary is a telephone book: you can look up a telephone number (value) by a person's name (key).\nHere are some dictionary examples:\n1empty_dict = dict() 2dog = { \u0026#39;name\u0026#39;: \u0026#39;Roger\u0026#39; } 3# assign the value: 8 to the key: \u0026#39;age\u0026#39; 4dog[\u0026#39;age\u0026#39;] = 8 5# the dog dictionary now looks like: { \u0026#39;name\u0026#39;: \u0026#39;Roger\u0026#39;, \u0026#39;age\u0026#39;: 8 } 6 7# access a value by a key 8dog[\u0026#39;name\u0026#39;] 9# outputs: \u0026#39;Roger\u0026#39; Dictionaries also contain the .keys(), .values(), and .items() methods which return iterables (like lists) of these values:\n1list(dog.keys()) 2# outputs: [\u0026#39;name\u0026#39;, \u0026#39;age\u0026#39;] 3list(dog.values()) 4# outputs: [\u0026#39;Roger\u0026#39;, 8] 5list(dog.items()) 6# outputs: [(\u0026#39;name\u0026#39;, \u0026#39;Roger\u0026#39;), (\u0026#39;age\u0026#39;, 8)]  Create a dictionary called person with the keys first_name amd last_name and give them some values. Print out the dictionary. In the person dictionary, assign the job key to the value programmer, and print out the dictionary. Access and print out the value of the first_name key in the person dictionary. Print out the keys, values, and items in the person dictionary.  Task 15 - Booleans Booleans may only be one of two values: True or False. These are like on-off switches, where True is on and False is off. These states are mutually exclusive -- a condition can only be either True or False but not both. You can use the not keyword to \u0026quot;flip the switch\u0026quot; of the boolean value.\n1val1 = True 2val2 = not True 3print(val2) 4# outputs: False  Create a variable called boolean_var and set it to False. Print the value of the opposite of boolean_var (using not).  Task 16 - Comparisons There are many comparison operators in Python. All of these operators return a boolean True or False value. Here are some of these operators:\n ==: equality operator: compares two values and returns True if they're equivalent or False if they are not !=: inequality operator: opposite of equality, returns True if two values are not equivalent and False if they are \u0026gt;: greater than operator: returns True if the left side is greater than the right side and False if not \u0026lt;: less than operator: returns True if the left side is less than the right side and False if not  Note that you can assign a boolean expression to a variable:\n1a = 1 \u0026gt; 2 2print(a) 3# outputs: False Assign these examples to variables and print them out:\n 1 == 1 1 == '1' 2 != '2' 2 \u0026lt; 4 2 \u0026gt; 3 1 != True 0 != False  Were any of these results surprising?\nTask 17 - Control Flow When you're dealing with booleans, and expressions that return a boolean in particular, we can execute different code depending on their True or False values, using if, elif, and else statements. Pay attention to the indentation and white space in Python, as this is very important! Indented blocks \u0026quot;belong\u0026quot; to the overhanging lines above them; you can think of this as \u0026quot;stepping into\u0026quot; indented blocks if conditions evaluate to true.\nThis is a conditional statement: if CONDITION: means: \u0026quot;if CONDITION evaluates to True, then execute the indented code that follows directly after the statement\u0026quot;\nHere's an example for if...else:\n1if CONDITION_A: 2 STATEMENT_A 3else: 4 STATEMENT_B In this example, \u0026quot;if CONDITION_A evaluates to True, then execute STATEMENT_A. Otherwise (if CONDITION_A evaluates to False), then execute STATEMENT_B.\nAnd for if...elif...else:\n1if CONDITION_A: 2 STATEMENT_A 3elif CONDITION_B: 4 STATEMENT_B 5else: 6 STATEMENT_C (Note: elif stands for \u0026quot;else if\u0026quot;, and you can have as many of these as you want in between the beginning if and ending else statements.)\nIn this example, \u0026quot;if CONDITION_A evaluates to True, then execute STATEMENT_A only. Otherwise (if CONDITION_A evaluates to False), then check if CONDITION_B evaluates to True and if so, execute STATEMENT_B only. If both CONDITION_A and CONDITION_B evaluate to False, then execute STATEMENT_C. Note that here, we are only ever execute one of the STATEMENT_'s, even if multiple conditions evaluate to True.\n Use the definition: my_list = [1, 2, 3]. Create an if statement that checks if the last value of the list is equal to 3 and if so, prints \u0026quot;the condition was true\u0026quot;. Building off of the above exercise, make the condition false (so that \u0026quot;the condition was true\u0026quot; no longer prints). Now, add an else clause that prints \u0026quot;the condition was false\u0026quot;. Now, add an elif condition that checks if the length of the list is equal to 3 and if so, prints \u0026quot;the elif condition is true\u0026quot;.  Task 18 - Functions A function lets us create a set of instructions that we can run when needed. Functions are essential in Python and in many other programming languages. They help us create meaningful programs, because they allow us to decompose a program into manageable parts, and they promote readability and code reuse.\nHere is an example function:\n1def greet(name): 2 print(\u0026#39;Hello,\u0026#39;, name) This is the function definition. There is a def keyword, so that the Python interpreter knows that this is a function definition, function name (greet), arguments (name in this case), and a body (the set of instructions, which is the part that follows the colon and is indented one level on the left).\nTo run this function, we must call it. This is the syntax to call the function: greet('Rami') We can execute this function as many times as we want to.\nThe name of the function, hello, is very important. It should be descriptive, so anyone calling it can imagine what the function does.\n Write a function called was_it_sunny that takes in a boolean argument it_was, that prints \u0026quot;yes\u0026quot; if the parameter value was True and \u0026quot;no\u0026quot; otherwise. Call this function twice, once with the value True and once with False, and print the outputs of these calls. Write a function that takes in 3 values and returns a list containing those three values.  ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/python/installing_python/","title":"31/03/2022 - Installing Python"},{"body":"Intro to Computer Science Spring 2022, Berlin üá©üá™\nHere you will find most of the content for our courses, prerequisites for each class, summaries of the classes and extra content so you can work on your own.\nGet started with the course üöÄ\n Margaret Hamilton - She sent rockets to the moon üöÄ\n  ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/","title":"Berlin 2022 - Intro to Computer Science"},{"body":"This section contains cheat sheets and glossaries on some of the topics we have covered for quick reference.\nTable of Contents  Table of Contents Command Line  Useful commands   git \u0026amp; GitHub Desktop  Glossary Working with GitHub Desktop  Starting a brand new project Joining or copying an existing project Making changes   Commands (Command Line Git)   HTML  Important HTML Tags     Command Line Useful commands    command what it does     man (mac/linux), help (windows) show information about what a command does and how to use it   pwd print working directory (print the path to where I currently am in the file system)   cd change directory (this moves you, the viewer of the terminal, to a new location in the file system). You may use an absolute file path or a relative path where . is the current working directory and .. is the parent directory.   ls list the contents of the directory   mkdir make a directory   touch create a new file   rm delete a file (note: to delete a directory, add the option -r or -d)   cp copy a file (note: to copy a directory you probably need to add an option (like -r))   mv move a file or directory to a new location (note: this can also be useful for changing the name of a file/directory)   echo print some text; often used in conjunction with other commands   cat print the contents of the file   \u0026gt; this is an operator: X \u0026gt; Y will redirect (send) the outputs of command X to Y; if Y exists, it this will overwrite the existing file.   \u0026gt;\u0026gt; this is an operator similar to the above: X \u0026gt;\u0026gt; Y will send the outputs of command X to Y; if Y exists, it this will append to the existing file.    git \u0026amp; GitHub Desktop Glossary    Term Meaning     repository (also known as repo) the place where code is stored.   commit a snapshot of changes made to a repository   branch a pointer to a commit; a way to create a separate version of the files   remote a repository that is hosted by a web service   origin the remote repository associated with a project   head the last commit in the current branch   status the current state of the git repository   pull get the latest changes from the remote repository on your local repo   push push the latest changes from the local repository to the remote repo   pull request (also known as a PR) lets you get feedback on your code changes   staging area the intermediate area where a change is added before it is commit    Working with GitHub Desktop Common ways of using GitHub Desktop based on scenarios that you may run into.\nStarting a brand new project Scenario: you are just starting on your project, and want to create a repository to store your future work.\nIn this case, we want to create a new repository, which is basically just an empty directory plus some additional hidden files so that git knows that this is a repository and it should watch out for changes.\n  In GitHub Desktop, select File \u0026gt; New Repository or expand Current Repository and click Add \u0026gt; Create New Repository.\n  Fill in the fields in the popup, including the Name. Some notes:\n Name: name of the new directory that will be created and contain your new project. Local Path: points to a directory (folder) where the new repository will live. If you have a directory where you keep your work for this class (recommended), make sure to point Local Path to this directory. Initialize your repository with a README: a README is just a file describing the repository's purpose and use. Git Ignore: you can ignore this one for now. This lets git know if it should ignore changes from certain files. License: you can ignore this one for now. The License describes how others can use and build on your project.    Click Create Repository.\n  If you want to make this repository available on GitHub (the remote), click Publish Repository. In the popup, you can select whether or not the repository should be private (only you + others specifically added to the reopsitory can see it) or not (everyone can see it), and then click on Publish Repository.\n  Joining or copying an existing project Scenario A: your project partner already created a repository and you want to create a local copy so you can collaborate on this.\nScenario B: your computer crashed. Luckily, your project is stored on GitHub, and you want to make a new local copy of this.\nIn these situations, we want to clone an existing repository, which means create a local copy of the repository in your file system (i.e. you can edit these even when not connected to the internet).\n In GitHub Desktop, clone an existing repository by either selecting File \u0026gt; Clone Repository or expand Current Repository and click Add \u0026gt; Clone Repository. If the repository already exists under your own GitHub remote, you can find it under GitHub.com, otherwise, you may need to enter the repository URL after selecting the URL tab.  Scenario C: you want to create a remote copy of starter code used for class activities and projects, which you can then copy locally. Scenario D: you want to contribute to an open source project that you find interesting.\nIn these cases, you additionally may need to fork the project, or create a copy of the repository that you own in GitHub. After completing steps 1 \u0026amp; 2 above:\n  In GitHub desktop, create a new branch.\n  Click Publish Branch. A popup should appear asking something like, \u0026quot;Do you want to fork this repository?\u0026quot; Click Fork This Repository.\n  Another popup will appear like \u0026quot;How are you planning to use this fork?\u0026quot;:\n For most of our class activities (Scenario C above), select \u0026quot;For my own purposes\u0026quot; For contributing to open source projects or projects owned by others (Scenario D above), select \u0026quot;To contribute to the parent project\u0026quot;    You can find more information in the GitHub Desktop Docs here.\nMaking changes Scenario: you have a great idea for a new feature to add to your project.\n Make sure that your Current Branch is main (or the repository default branch). Click on Fetch Origin, which updates your main branch so that you have all the latest changes that you and your project partners have merged. Create a new branch, which will contain your new version of the project with the new feature. In GitHub Desktop, do this by clicking on Current Branch \u0026gt; New Branch or Branch \u0026gt; New Branch. Give your branch (version) a useful and descriptive name, ideally about the changes/feature you want to make in this version. Change the files in your local repository. You can use a text editor or IDE (Integrated Development Environment) to do this. Add the files to your staging area (changes that will be included in the next commit you make). In GitHub Desktop, this means making sure that the box is checked next to the file name on the left-hand side. Create a commit, or a saved snapshot of the files. To do this in GitHub Desktop, add a Summary (and optional Description) of the changes you have made so far and then click the Commit to \u0026lt;branch-name\u0026gt; button. Generally, commit often while working on a new feature! Push these changes to the remote repository; in other words, publish the changes made on this branch to GitHub. In GitHub Desktop, do this by clicking on Publish branch. Repeat steps 3-6 as needed, until you are done making changes (i.e. your feature is done). (If you are working by yourself on this project, you can skip this step!) Create a pull request (PR) on GitHub so that your other project collaborators can look over the changes and leave any feedback. To do this, go to the GitHub page for the repository and view your branch: on the left side, there should be a button with main and a down arrow -- click this and select your branch. At the top, if there is an option to \u0026quot;Pull request\u0026quot;, click that, otherwise click on the \u0026quot;Pull request\u0026quot; tab and then \u0026quot;New pull request\u0026quot;. Merge the changes from your new branch to the main branch, which means combine your new changes with the main branch (including any new changes that have been added to main in the meantime). If you created a PR (step 8), you can merge the PR directly in GitHub. Otherwise, switch to the main branch in GitHub Desktop. Then, click on Current Branch \u0026gt; Choose a branch to merge into main or Branch \u0026gt; Merge into current branchand select your feature branch. Delete your old feature branch if you don't need it anymore.  You can find more information on managing branches and commits in this section of the GitHub Desktop Docs.\nCommands (Command Line Git) Note: you can add the --help flag behind any of these commands to find out more information about them including the arguments/options that can be passed in.\n   command what it does     git commit create a snapshot of changes made to a repository since last commit   git commit -m \u0026quot;MESSAGE\u0026quot; create a commit ^ and add a useful message   git status get the current state of the git repository   git log get the commit history of the current repository \u0026amp; branch   git pull bring the latest changes from the remote repository into your local repo   git push send the latest changes from the local repository to the remote repo   git checkout BRANCHNAME switch to the BRANCHNAME (fill this in) branch, i.e. update the repository's contents to match the tip of BRANCHNAME   git remote -v list the remote(s) for the given local repository    HTML Important HTML Tags    Tag Purpose Playground     \u0026lt;html\u0026gt; \u0026lt;/html\u0026gt; Creates an HTML document    \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; Contains the title of the document \u0026amp; other info that isn't displayed Try it   \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; Contains the visible parts of the document    \u0026lt;title\u0026gt; \u0026lt;/title\u0026gt; Specifies the name of the document in the browser title bar; when bookmarking pages, this is what is bookmarked    \u0026lt;h1\u0026gt; \u0026lt;/h1\u0026gt; to \u0026lt;h6\u0026gt; \u0026lt;/h6\u0026gt; Creates text headlines. H1=largest, H6=smallest Try it   \u0026lt;strong\u0026gt; \u0026lt;/strong\u0026gt; or \u0026lt;b\u0026gt; \u0026lt;/b\u0026gt; Emphasizes a word (usually processed in bold) Try it   \u0026lt;em\u0026gt; \u0026lt;/em\u0026gt; or \u0026lt;i\u0026gt; \u0026lt;/i\u0026gt; Emphasizes a word (usually processed in italics) Try it   \u0026lt;a href=\u0026quot;URL\u0026quot;\u0026gt;clickable text\u0026lt;/a\u0026gt; Creates a link to another web page or website Try it   \u0026lt;p\u0026gt; \u0026lt;/p\u0026gt; Creates a new paragraph Try it   \u0026lt;br /\u0026gt; Interrupts the flow of text to a new line Try it   \u0026lt;div\u0026gt; \u0026lt;/div\u0026gt; Used to format block content with CSS Try it   \u0026lt;span\u0026gt; \u0026lt;span\u0026gt; Used to format inline content with CSS Try it   \u0026lt;ul\u0026gt; \u0026lt;/ul\u0026gt; Creates an unordered list Try it   \u0026lt;ol start=xx\u0026gt; \u0026lt;/ol\u0026gt; Creates an ordered list (start=xx, where xx is a counting number) Try it   \u0026lt;li\u0026gt; \u0026lt;/li\u0026gt; Specifies each list item of either the unordered or ordered list Try it   \u0026lt;img src=\u0026quot;URL\u0026quot; /\u0026gt; Specifies an image located at the URL Try it   \u0026lt;table\u0026gt; \u0026lt;/table\u0026gt; Creates a table Try it   \u0026lt;th\u0026gt; \u0026lt;/th\u0026gt; Creates a table header    \u0026lt;tr\u0026gt; \u0026lt;/tr\u0026gt; Creates a row of a table    \u0026lt;td\u0026gt; \u0026lt;/td\u0026gt; Creates a column within a row of a table    \u0026lt;iframe\u0026gt; \u0026lt;/iframe\u0026gt; Used to embed a webpage within another webpage. Its useful for embedding youtube videos on a web page Try it    ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/references/","title":"References \u0026 Cheat Sheets"}]