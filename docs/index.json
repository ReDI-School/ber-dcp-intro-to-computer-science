[{"body":" Basics of operating systems Linux file system hierarchy Navigation of Linux file system Working with files: Create, View, Manipulate Command line overview  Let\u0026#39;s learn about the computer\u0026#39;s file system! üíª -- ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/file_system/","title":"1 - File System Basics"},{"body":" Git terminology Working with a local repository Creating, initializing, and cloning a repository Basics of branching Staging and committing work Setting up remote repository (GitHub) and pushing local commits  Let\u0026#39;s learn about Git! üíª -- ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/git/","title":"2 - Version Control with Git and GitHub"},{"body":"Programming fundamentals in Python including:\n Functions Data types Conditional logic (if, elif, else and boolean expressions) Control flow (while and for loops) Classes and objects  Introduction to Python üíª -- ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/python/","title":"3 - Programming in Python"},{"body":" Basic knowledge of HTML Basic knowledge of CSS Practical lesson demonstrating HTML \u0026amp; CSS Basic knowledge of JavaScript Practical lesson demonstrating HTML, CSS \u0026amp; JavaScript Job Opportunities (frontend dev)  Basic knowledge of HTML üíª -- ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/web/","title":"4 - Introduction to Web Development"},{"body":"In this awesome course you will learn fundamental computer science skills that are an absolute MUST for working in IT üéâ\nYou will be also introduced to the fundamentals of programming and gain experience with: Python, GitHub, HTML, CSS, JavaScript.\nSections üìö These docs consist of four parts:\n File System Basics Version Control with Git and GitHub Python Programming Introduction to Web Development  After this course ü§î You will...\n Understand files and file systems Use git/GitHub for version control Create basic programs in Python Understand the fundamentals of the web and web development  After the successful completion of this introductory course, you can choose to apply for any other intermediate-level courses offered by ReDI!\nCourses links File System Basics Version Control with Git and GitHub Python Programming Web Fundamentals ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/","title":"Welcome to the course üéâ"},{"body":"Prerequisites Please complete these prerequisites before class, so we can spend as much time as possible on troubleshooting and practice! :)\n‚ú® Remember, reach out on the class slack channel if you run into any issues or have questions!\n   Homework videos from last class posted on slack on the internet, reposted here:\n How the Internet Works in 4 Minutes - 4:03 IP addresses and DNS - 6:45 Packets, Routers, and Reliability - 6:25 HTTP and HTML - 7:07 (Optional) Wires, cables, and WiFi This video is for those who want more details on how information is broken up and transported through the wires that make up the internet, the differences between fiber optics/radio/copper cables, and how WiFI is different than wired internet. It's very interesting but not required :)    Install GitHub Desktop\nIf you are running Mac or Windows on your computer, please install the GitHub Desktop app by following the instructions at this link.\nIf you are using Linux, please reach out to the teachers and let us know, since GitHub Desktop is not available for Linux. You can instead follow the instructions here to install git on Linux.\nNote: GitHub desktop should also automatically install git on the command line. If this does not happen by default and you would like to practice using command line git (warning: more challenging!), you can follow the instructions for your OS here.\n  Sign up and sign in to GitHub üöÄ\nOpen GitHub Desktop. If you are prompted to sign in or create an account, click the prompt to create an account if you don't already have one, otherwise sign in. Both options should open up a GitHub webpage.\nIf you are not prompted to create an account upon opening GitHub Desktop, sign up here: https://github.com/join\nYou can then follow the instructions linked here to sign into (authenticate) your account.\nWhy? In this class, we will use git/GitHub Desktop to...\n store our code collaborate with each other on assignments and projects share and showcase our work    Install Visual Studio Code (VSCode) and configure GitHub Desktop to use this Download and install here: https://code.visualstudio.com/\nAfter you have downloaded this, follow the instructions linked here to configure Visual Studio Code as the default text editor for GitHub Desktop.\nWhat is this? VSCode is an Integrated Development Environment (IDE), which can be used for developing and testing software. Today, we will use this to view and edit text files, and in the future we will use this for editing and writing code.\n  (Optional but highly recommended if you have time!) watch this video: Git and GitHub explained for Beginners. You can skip the section on ignoring files (11:38-15:38).\n  (Optional) if you are unfamiliar with the concept of files and file systems, discussed last class, please watch the following videos as well:\n files and file systems  If this video was difficult to understand or you are unfamiliar with navigating the file system on your computer currently, we recommend that you watch this video and this followup video   this video until 8:30 on file paths     Class Curriculum    Section content Expected time (mins) Pre - Requirements     Lesson Goals 5 minutes ‚ùå   Review and questions from last class 20 minutes videos   Overview of Version Control and GitHub 15-20 minutes ‚ùå   Demo of GitHub and an Open Source Project 5 minutes ‚ùå   Demo of Tasks Today 5-10 minutes ‚ùå   Class break 10 minutes ‚ùå   GitHub Practice in Groups 30-45 minutes GitHub Desktop and account   Wrap-up 5-10 minutes ‚ùå     0. Lesson Goals  Review information about the internet and files Use the GitHub Desktop tutorial to create a repository, branch, commit, and pull request Practice the Fork \u0026amp; Clone workflow that we will use throughout this class for sharing tasks   1. Review and Questions from Last Class (Intro to the Internet)  Kahoot! Go to www.kahoot.it and enter the game PIN from the session. Any questions on the content from last class?   2. Overview of Version Control and GitHub What is Version Control and why is it useful?  System for managing changes to files (including programs, text files, image files, etc.)  Version Control Systems for software (including git) help us understand changes made: what was the change? who made it? when? why?   May display a revision history or information about past edits Why is it useful?  Safely storing and accessing past versions of files  maybe something is now broken, and you want to use an older version that worked you don't want to lose your work on a project if your computer crashes   Collaborating on documents with others: modifying the same document can be tricky without a way of resolving conflicting changes   Some examples involving Version Control Systems:  Google Docs containing a document revision history Microsoft Office restoring an older version of a file if the program crashes with unsaved work Storing a code project in a GitHub repository :)   What are some examples from the teachers' experience?  What are Git and GitHub?  git: Version Control System for tracking and storing files, developed by the creater of Linux (Linus Torvalds); free, open source, and widely used in the software engineering industry GitHub: internet service that allows you to store and collaborate on collections of files stored as git repositories  Why GitHub Desktop?  git is a powerful tool but can be confusing and intimidating at first GitHub Desktop is an open-source tool that is more accessible to new developers and does not require comfort using the command line GitHub Desktop is relies on \u0026quot;best practice\u0026quot; workflows, which should help instill good habits when learning GitHub Desktop has nice visualizations of what is happening within commits, merges, etc. which will help build your understanding of git Skills learned while using GitHub desktop can be applied later to using git on the command line for more advanced, custom use in the future :)  Working with Git \u0026amp; GitHub We will practice these during the class activities today -- it's ok if it doesn't all make sense at the start. The GitHub Desktop Docs are also a great resource!\n This image illustrates the concept of branches (starting a new version with changes), commits (snapshots of these changes/versions), and merges (combining changes from different versions). This image was modified from https://www.nobledesktop.com/learn/git/git-branches.\nStarting a brand new project Scenario: you are just starting on your project, and want to create a repository to store your future work.\nIn this case, we want to create a new repository, which is basically just an empty directory plus some additional hidden files so that git knows that this is a repository and it should watch out for changes.\n  In GitHub Desktop, select File \u0026gt; New Repository or expand Current Repository and click Add \u0026gt; Create New Repository.\n  Fill in the fields in the popup, including the Name. Some notes:\n Name: name of the new directory that will be created and contain your new project. Local Path: points to a directory (folder) where the new repository will live. If you have a directory where you keep your work for this class (recommended), make sure to point Local Path to this directory. Initialize your repository with a README: a README is just a file describing the repository's purpose and use. Git Ignore: you can ignore this one for now. This lets git know if it should ignore changes from certain files. License: you can ignore this one for now. The License describes how others can use and build on your project.    Click Create Repository.\n  If you want to make this repository available on GitHub (the remote), click Publish Repository. In the popup, you can select whether or not the repository should be private (only you + others specifically added to the reopsitory can see it) or not (everyone can see it), and then click on Publish Repository.\n  Joining or copying an existing project Scenario A: your project partner already created a repository and you want to create a local copy so you can collaborate on this.\nScenario B: your computer crashed. Luckily, your project is stored on GitHub, and you want to make a new local copy of this.\nIn these situations, we want to clone an existing repository, which means create a local copy of the repository in your file system (i.e. you can edit these even when not connected to the internet).\n In GitHub Desktop, clone an existing repository by either selecting File \u0026gt; Clone Repository or expand Current Repository and click Add \u0026gt; Clone Repository. If the repository already exists under your own GitHub remote, you can find it under GitHub.com, otherwise, you may need to enter the repository URL after selecting the URL tab.  Scenario C: you want to create a remote copy of starter code used for class activities and projects, which you can then copy locally. Scenario D: you want to contribute to an open source project that you find interesting.\nIn these cases, you additionally may need to fork the project, or create a copy of the repository that you own in GitHub. After completing steps 1 \u0026amp; 2 above:\n  In GitHub desktop, create a new branch.\n  Click Publish Branch. A popup should appear asking something like, \u0026quot;Do you want to fork this repository?\u0026quot; Click Fork This Repository.\n  Another popup will appear like \u0026quot;How are you planning to use this fork?\u0026quot;:\n For most of our class activities (Scenario C above), select \u0026quot;For my own purposes\u0026quot; For contributing to open source projects or projects owned by others (Scenario D above), select \u0026quot;To contribute to the parent project\u0026quot;    You can find more information in the GitHub Desktop Docs here.\nMaking changes Scenario: you have a great idea for a new feature to add to your project.\n Make sure that your Current Branch is main (or the repository default branch). Click on Fetch Origin, which updates your main branch so that you have all the latest changes that you and your project partners have merged. Create a new branch, which will contain your new version of the project with the new feature. In GitHub Desktop, do this by clicking on Current Branch \u0026gt; New Branch or Branch \u0026gt; New Branch. Give your branch (version) a useful and descriptive name, ideally about the changes/feature you want to make in this version. Change the files in your local repository. You can use a text editor or IDE (Integrated Development Environment) to do this. Add the files to your staging area (changes that will be included in the next commit you make). In GitHub Desktop, this means making sure that the box is checked next to the file name on the left-hand side. Create a commit, or a saved snapshot of the files. To do this in GitHub Desktop, add a Summary (and optional Description) of the changes you have made so far and then click the Commit to \u0026lt;branch-name\u0026gt; button. Generally, commit often while working on a new feature! Push these changes to the remote repository; in other words, publish the changes made on this branch to GitHub. In GitHub Desktop, do this by clicking on Publish branch. Repeat steps 3-6 as needed, until you are done making changes (i.e. your feature is done). (If you are working by yourself on this project, you can skip this step!) Create a pull request (PR) on GitHub so that your other project collaborators can look over the changes and leave any feedback. To do this, go to the GitHub page for the repository and view your branch: on the left side, there should be a button with main and a down arrow -- click this and select your branch. At the top, if there is an option to \u0026quot;Pull request\u0026quot;, click that, otherwise click on the \u0026quot;Pull request\u0026quot; tab and then \u0026quot;New pull request\u0026quot;. Merge the changes from your new branch to the main branch, which means combine your new changes with the main branch (including any new changes that have been added to main in the meantime). If you created a PR (step 8), you can merge the PR directly in GitHub. Otherwise, switch to the main branch in GitHub Desktop. Then, click on Current Branch \u0026gt; Choose a branch to merge into main or Branch \u0026gt; Merge into current branchand select your feature branch. Delete your old feature branch if you don't need it anymore.  You can find more information on managing branches and commits in this section of the GitHub Desktop Docs.\nGlossary    Term Meaning     repository (also known as repo) the place where code is stored.   commit a snapshot of changes made to a repository   branch a pointer to a commit; a way to create a separate version of the files   remote a repository that is hosted by a web service   origin the remote repository associated with a project   head the last commit in the current branch   status the current state of the git repository   pull get the latest changes from the remote repository on your local repo   push push the latest changes from the local repository to the remote repo   pull request (also known as a PR) lets you get feedback on your code changes   staging area the intermediate area where a change is added before it is commit     3. Practice with GitHub Use the instructions on workflows above as well as the GitHub Desktop Documentation to work through these tasks in groups. Within the steps, there will be some observational questions about the process. Make sure to discuss and move forward together as a group.\nBefore beginning, we recommend that you create a directory (folder) like redi-code or intro-cs-22 (or another name of your choice) on your computer where you can store all of your repositories and code for this class!\nTask: GitHub Desktop Tutorial In GitHub Desktop, select Create a Tutorial Repository, and follow through the steps of the tutorial. Make sure to read the explanations provided throughout the guide!\nFor more help on completing the tutorial including pictures, check the docs here.\nTask: Creating a Repository and Making Changes  Create a new repository called test-repo-03-22. See the instructions above for starting a brand new project. Initialize the project with a README. Open the repository in VSCode (or another text editor). In VSCode, add some text to the README.md file. In GitHub Desktop, can you see the changes that you made to the README.md file? If not, check in with your group and/or a teacher. Once you have seen the changes, add a message to the Summary field at the bottom left-hand corner and create a commit, saving a snapshot of this new version. Publish this repository to a remote repository on GitHub. You can choose to make it public by unchecking the Keep this code private button if you'd like to share the repository page with the teachers! Check the repository page on GitHub. There should be a button in GitHub Desktop to Open the repository page on GitHub in your browser which will take you to this page. If you cannot find this page or the repository does not exist under your GitHub account, ask your group members and/or a teacher. In VSCode, create a new file called new-file.txt and write some text. In GitHub Desktop, what does this new file look like? Add a descriptive message and create a new commit. Publish these changes to GitHub.  Congratulations! You have created a new repository locally and pushed these changes to GitHub!\nTask: Working with an Existing Repository (Fork \u0026amp; Clone)  Fork and make a local copy of this repository: https://github.com/ReDI-School/intro-to-cs-git-review. See the instructions above for joining or copying an existing project for more details, and make sure to follow the additional steps to fork the repository! Open the files in the repository in VSCode (or another text editor if you weren't able to install VSCode). If you configured VSCode as your default editor, you can do this easily by going to Repository \u0026gt; Open in Visual Studio Code. Time to make some changes! Review the instructions above for making changes if needed to help with the following steps :) In GitHub Desktop, create a new branch called test-branch to contain the new changes. In the some-files directory in the repository, delete the file that is empty (has no contents). (Hint: open and look through the files in VSCode to find the empty files.). In GitHub Desktop, how can you tell that the file has been deleted? Create a commit to \u0026quot;save\u0026quot; your changes. Give it the following message (summary): \u0026quot;Delete file \u0026lt;name-of-file\u0026gt;\u0026quot;, replacing \u0026lt;name-of-file\u0026gt; with the name of the deleted file. One of the non-empty files has the contents: \u0026quot;Hello, I'm a file! What's your name?\u0026quot;. Modify this file that answers the question with your name (or one of your choosing)! Can you tell that a file has been modified? If not, ask someone in your group or a teacher for help before moving on. If so, in the same way as above, create another commit with a descriptive message of your choice. Publish your two commits to the remote repository on GitHub. c.txt seems to be out of place. Move this file into the some-files directory. In VSCode, you can do this by dragging the file into the desired directory. What does this change look like in GitHub Desktop? Create a commit for this change. Delete the delete-me directory. Create a commit for this change. Publish your remaining two commits to the remote repository on GitHub. Let's go ahead and create a pull request (PR) to merge test-branch to main. Assign someone in your group and one of your teachers as reviewers for the PR. (Optional) review any other PRs that you are tagged on. (Optional) once you have received an approving review on your PR, you can merge the PR!   Extra resources  GitHub's Git Guides: lots of useful guides explaining the different commands and components of git  About Git: more information about version control and git   GitHub's Git Cheatsheet: contains a useful glossary and cheatsheet of basic git commands and concepts Writing a good commit messages, by FreeCodeCamp A visual introduction to Git, by Ashley Keller Introduction to Version Control and Git: more information on version control and why we use it as well as an overview of Git and GitHub    Homework  Finish the exercises from class. Optionally: send a link to the GitHub page of your repository to the teachers, and tag a teacher on your pull request (PR). (Optional): make additional changes to the repository you created in the second task in class. (Optional): go through the GitHub collaboration tutorial. Review the extra resources and reach out to the class slack channel if you have any questions!  ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/git/git_and_github_desktop/","title":"22/March - Version Control with Git and GitHub"},{"body":"Pre Requisites None for today!\n Class Curriculum    Section content Expected time (mins) Pre - Requirements     Check-in and questions from last class 5 minutes ‚ùå   Lesson Goals 5 minutes ‚ùå   Python Overview 15 minutes ‚ùå   Hands-on Python exercise (in pairs) 45-60 minutes ‚ùå   Break 10 minutes ‚ùå   Synthesis of Python Concepts from Exercise 15-30 minutes ‚ùå   (Possible) \u0026quot;Hello World\u0026quot; in Python Exercise 20 minutes ‚ùå   Check-out 5 minutes ‚ùå    Lesson Goal Have a high-level idea of what Python is and start getting comfortable reading and writing basic statements in this programming language.\n0. Python Overview Q\u0026amp;A Intro   What is Python?\n  What is a high-level programming language?\n  What are terms that you may hear when discussing programs and programming languages?\n  BLACK_BOX - outputs ] --   How and in what fields is Python typically used?\n  What examples of things you can do with Python?\n   What questions do you have so far?  1. Hands-on Python Activity Go through this Exercise at your own pace in your groups. Make sure you are all doing this together and asking questions.\nThere is no rush -- it is completely fine not to finish the whole exercise!!\nThe purpose here is to start getting familiar with Python syntax through trial-and-error (so getting things wrong is completely expected and part of this process!). After this section, we will go through the activity as a group and discuss our observations of rules and concepts from Python that we took from the exercise.\nWhen you get an answer wrong, make sure you look at the correct answer below and try to understand what the expression means from the correct answer.\nRefresher of some math operators that you will see:\n +: addition -: subtraction *: multiplication a \u0026lt; b: less than --\u0026gt; \u0026quot;a is less than b\u0026quot; a \u0026gt; b: greater than --\u0026gt; \u0026quot;a is greater than b\u0026quot;  2. Python Concepts - Sharing \u0026amp; Synthesizing We will go over many of these concepts in more detail in the coming weeks, so no problem if it takes a little time for them to make sense!\nOne note about the code snippets below: in Python, we can write comments by using the # symbol; anything after this symbol is not interpreted as code or executed. This can be a really convenient way to write notes to yourselves (or future developers!) when trying to understand code you wrote.\n What observations did you have from the exercise?  Data Types   What is a data type?\n  What are examples of different data types that you saw?\n strings (ex: 'asdf', 'hello my name is x', 'a', '123') integers (ex: 1, -100, 1383234) floats (floating point values) (ex: 1.0, -100.1234, 0.0000003, 1e5) booleans (ex: True, False) lists (ex: [3, 1, 'r', 'e'], [], [3.2, 3, 4.5]) functions (ex: def my_function (a, b): ...)  (more data types that weren't shown in this exercise will be discussed in later sessions)\n  Variables   What is a variable? What's an example?\nSome word (starting with a letter, and can contain letters, numbers, and underscore _) that represents some value. We set the value of a variable with =, for example: test_var = 10 sets the variable test_var to be equal to the value of 10. Setting the value of a variable is often called assigning a variable.\n  Iterables (lists, strings, ...)   What does the len keyword do? i.e. len('asdf') or len([1,2,3,4])\nlen gets the length of any \u0026quot;iterable\u0026quot; -- any \u0026quot;thing\u0026quot; that is made up of other things that you can \u0026quot;iterate\u0026quot; or count through: list, string, tuple, dictionary, set...\n  What does the [#] syntax do?\nThis indexes into an iterable and gets you the # value of it. Note that the \u0026quot;first\u0026quot; index is \u0026quot;0\u0026quot;, because we 0-index in Python. For example:\n1 a = \u0026#39;asdf\u0026#39; 2 b = [1,2,3,4] 3 a[0] 4 # outputs: -\u0026gt; \u0026#39;a\u0026#39; 5 b[3] 6 # outputs: -\u0026gt; 4   Booleans and conditions   What does the == symbol mean? What about !=?\n== is \u0026quot;equals\u0026quot;, != is \u0026quot;does not equal\u0026quot;.\n  What is the difference between = and ==?\n= is for assigning some value to a variable, while == is for testing for equality between the two sides.\n  What does the if keyword do?\nThis is a conditional statement: if CONDITION: means: \u0026quot;if CONDITION evaluates to True, then execute the code that follows directly after the statement\u0026quot;\n  How about an if ... else statement?\n1if CONDITION_A: 2 STATEMENT_A 3else: 4 STATEMENT_B In this example, \u0026quot;if CONDITION_A evaluates to True, then execute STATEMENT_A. Otherwise (if CONDITION_A evaluates to False), then execute STATEMENT_B. --\u0026gt;\n  How about if ... elif ... else?\n1if CONDITION_A: 2 STATEMENT_A 3elif CONDITION_B: 4 STATEMENT_B 5else: 6 STATEMENT_C In this example, \u0026quot;if CONDITION_A evaluates to True, then execute STATEMENT_A only. Otherwise (if CONDITION_A evaluates to False), then check if CONDITION_B evaluates to True and if so, execute STATEMENT_B only. If both CONDITION_A and CONDITION_B evaluate to False, then execute STATEMENT_C. Note that here, we are only ever execute one of the STATEMENT_'s, even if multiple conditions evaluate to True.\n  Functions   What is a function?\n1def my_test_function(a): 2 return a A function is a sequence of steps or tasks (written in a block of code), which may or may not take in arguments. Whenever we call a function, we execute this defined set of steps (with any arguments passed in). The above example function takes in some value and simply returns, or gives us back, this value when we call it like so: my_test_function(12) # evaluates to 12\n  3. (if there is time) \u0026quot;Hello, World!\u0026quot; in Python It's something of a tradition in the Computer Science world when learning a new language to write code that outputs \u0026quot;Hello, World!\u0026quot;. Check out this Wikipedia article for more information on why :).\nFor today, go ahead and try that out in this Python playground, which will allow you to execute some test code by clicking on the Play button (triangle) on the top of the console window.\nExample solutions will be posted in a few days :)\nTask 0: write code that outputs \u0026quot;Hello, World!\u0026quot; Tip: there is a built-in print function in Python that takes some input and outputs this to standard out (STDOUT), which is in this case the right side of the playground console. (Recall that the # stands for a \u0026quot;comment\u0026quot; in Python, meaning that this line is just a \u0026quot;note\u0026quot; to yourself and does not need to be included.)\nExample usage:\n1print(\u0026#34;asdf asdf\u0026#34;) 2# outputs -\u0026gt; asdf asdf 3print(\u0026#34;my name is\u0026#34;, \u0026#34;Robot\u0026#34;) 4# outputs -\u0026gt; my name is Robot   Task 1: create and call a function that prints \u0026quot;Hello, World!\u0026quot; Tip: Modify the code you wrote in the previous task so that this happens within a function that you define.  Task 2: create a function that returns the string \u0026quot;Hello, World!\u0026quot;. Call this function and print the output. A solution:\n1def hello_world(): 2 return \u0026#34;Hello, World!\u0026#34; 3 4print(hello_world()) Task 3: modify your function so you can greet a specific name: \u0026quot;Hello, Person\u0026quot; In other words:\n1my_hello_world(\u0026#34;Noor\u0026#34;) 2# expected output -\u0026gt; \u0026#34;Hello, Noor\u0026#34; \"Hello, Noor\" print(hello_world(\"Jose\")) # output - \"Hello, Jose\" ``` Another solution: ```python def hello_world(name): print(\"Hello, \" + name) hello_world(\"Noor\") # output - \"Hello, Noor\" hello_world(\"Jose\") # output - \"Hello, Jose\" ``` -- Additional practice (all optional)  Modify your \u0026quot;greeter\u0026quot; using any of the concepts we discussed; perhaps include a conditional expression (i.e. only greet IF ...). Try to write and evaluate any Python expressions that you saw in the silent teacher activity in the playground. Write your own function to return or print some value.  Extra resources and references from class  Python playground \u0026quot;Hello, World!\u0026quot; on Wikipedia Silent Teacher exercise from class Python foundation docs List of some open source Python projects  ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/python/intro_to_python/","title":"24/March - Introduction to Python"},{"body":"Intro to Computer Science Spring 2022, Berlin üá©üá™\nHere you will find most of the content for our courses, prerequisites for each class, summaries of the classes and extra content so you can work on your own.\nGet started with the course üöÄ\n Margaret Hamilton - She sent rockets to the moon üöÄ\n  ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/","title":"Berlin 2022 - Intro to Computer Science"},{"body":"This section contains cheat sheets and glossaries on some of the topics we have covered for quick reference.\nTable of Contents  Table of Contents Command Line  Useful commands   git \u0026amp; GitHub Desktop  Glossary Working with GitHub Desktop  Starting a brand new project Joining or copying an existing project Making changes   Commands (Command Line Git)   HTML  Important HTML Tags     Command Line Useful commands    command what it does     man (mac/linux), help (windows) show information about what a command does and how to use it   pwd print working directory (print the path to where I currently am in the file system)   cd change directory (this moves you, the viewer of the terminal, to a new location in the file system). You may use an absolute file path or a relative path where . is the current working directory and .. is the parent directory.   ls list the contents of the directory   mkdir make a directory   touch create a new file   rm delete a file (note: to delete a directory, add the option -r or -d)   cp copy a file (note: to copy a directory you probably need to add an option (like -r))   mv move a file or directory to a new location (note: this can also be useful for changing the name of a file/directory)   echo print some text; often used in conjunction with other commands   cat print the contents of the file   \u0026gt; this is an operator: X \u0026gt; Y will redirect (send) the outputs of command X to Y; if Y exists, it this will overwrite the existing file.   \u0026gt;\u0026gt; this is an operator similar to the above: X \u0026gt;\u0026gt; Y will send the outputs of command X to Y; if Y exists, it this will append to the existing file.    git \u0026amp; GitHub Desktop Glossary    Term Meaning     repository (also known as repo) the place where code is stored.   commit a snapshot of changes made to a repository   branch a pointer to a commit; a way to create a separate version of the files   remote a repository that is hosted by a web service   origin the remote repository associated with a project   head the last commit in the current branch   status the current state of the git repository   pull get the latest changes from the remote repository on your local repo   push push the latest changes from the local repository to the remote repo   pull request (also known as a PR) lets you get feedback on your code changes   staging area the intermediate area where a change is added before it is commit    Working with GitHub Desktop Common ways of using GitHub Desktop based on scenarios that you may run into.\nStarting a brand new project Scenario: you are just starting on your project, and want to create a repository to store your future work.\nIn this case, we want to create a new repository, which is basically just an empty directory plus some additional hidden files so that git knows that this is a repository and it should watch out for changes.\n  In GitHub Desktop, select File \u0026gt; New Repository or expand Current Repository and click Add \u0026gt; Create New Repository.\n  Fill in the fields in the popup, including the Name. Some notes:\n Name: name of the new directory that will be created and contain your new project. Local Path: points to a directory (folder) where the new repository will live. If you have a directory where you keep your work for this class (recommended), make sure to point Local Path to this directory. Initialize your repository with a README: a README is just a file describing the repository's purpose and use. Git Ignore: you can ignore this one for now. This lets git know if it should ignore changes from certain files. License: you can ignore this one for now. The License describes how others can use and build on your project.    Click Create Repository.\n  If you want to make this repository available on GitHub (the remote), click Publish Repository. In the popup, you can select whether or not the repository should be private (only you + others specifically added to the reopsitory can see it) or not (everyone can see it), and then click on Publish Repository.\n  Joining or copying an existing project Scenario A: your project partner already created a repository and you want to create a local copy so you can collaborate on this.\nScenario B: your computer crashed. Luckily, your project is stored on GitHub, and you want to make a new local copy of this.\nIn these situations, we want to clone an existing repository, which means create a local copy of the repository in your file system (i.e. you can edit these even when not connected to the internet).\n In GitHub Desktop, clone an existing repository by either selecting File \u0026gt; Clone Repository or expand Current Repository and click Add \u0026gt; Clone Repository. If the repository already exists under your own GitHub remote, you can find it under GitHub.com, otherwise, you may need to enter the repository URL after selecting the URL tab.  Scenario C: you want to create a remote copy of starter code used for class activities and projects, which you can then copy locally. Scenario D: you want to contribute to an open source project that you find interesting.\nIn these cases, you additionally may need to fork the project, or create a copy of the repository that you own in GitHub. After completing steps 1 \u0026amp; 2 above:\n  In GitHub desktop, create a new branch.\n  Click Publish Branch. A popup should appear asking something like, \u0026quot;Do you want to fork this repository?\u0026quot; Click Fork This Repository.\n  Another popup will appear like \u0026quot;How are you planning to use this fork?\u0026quot;:\n For most of our class activities (Scenario C above), select \u0026quot;For my own purposes\u0026quot; For contributing to open source projects or projects owned by others (Scenario D above), select \u0026quot;To contribute to the parent project\u0026quot;    You can find more information in the GitHub Desktop Docs here.\nMaking changes Scenario: you have a great idea for a new feature to add to your project.\n Make sure that your Current Branch is main (or the repository default branch). Click on Fetch Origin, which updates your main branch so that you have all the latest changes that you and your project partners have merged. Create a new branch, which will contain your new version of the project with the new feature. In GitHub Desktop, do this by clicking on Current Branch \u0026gt; New Branch or Branch \u0026gt; New Branch. Give your branch (version) a useful and descriptive name, ideally about the changes/feature you want to make in this version. Change the files in your local repository. You can use a text editor or IDE (Integrated Development Environment) to do this. Add the files to your staging area (changes that will be included in the next commit you make). In GitHub Desktop, this means making sure that the box is checked next to the file name on the left-hand side. Create a commit, or a saved snapshot of the files. To do this in GitHub Desktop, add a Summary (and optional Description) of the changes you have made so far and then click the Commit to \u0026lt;branch-name\u0026gt; button. Generally, commit often while working on a new feature! Push these changes to the remote repository; in other words, publish the changes made on this branch to GitHub. In GitHub Desktop, do this by clicking on Publish branch. Repeat steps 3-6 as needed, until you are done making changes (i.e. your feature is done). (If you are working by yourself on this project, you can skip this step!) Create a pull request (PR) on GitHub so that your other project collaborators can look over the changes and leave any feedback. To do this, go to the GitHub page for the repository and view your branch: on the left side, there should be a button with main and a down arrow -- click this and select your branch. At the top, if there is an option to \u0026quot;Pull request\u0026quot;, click that, otherwise click on the \u0026quot;Pull request\u0026quot; tab and then \u0026quot;New pull request\u0026quot;. Merge the changes from your new branch to the main branch, which means combine your new changes with the main branch (including any new changes that have been added to main in the meantime). If you created a PR (step 8), you can merge the PR directly in GitHub. Otherwise, switch to the main branch in GitHub Desktop. Then, click on Current Branch \u0026gt; Choose a branch to merge into main or Branch \u0026gt; Merge into current branchand select your feature branch. Delete your old feature branch if you don't need it anymore.  You can find more information on managing branches and commits in this section of the GitHub Desktop Docs.\nCommands (Command Line Git) Note: you can add the --help flag behind any of these commands to find out more information about them including the arguments/options that can be passed in.\n   command what it does     git commit create a snapshot of changes made to a repository since last commit   git commit -m \u0026quot;MESSAGE\u0026quot; create a commit ^ and add a useful message   git status get the current state of the git repository   git log get the commit history of the current repository \u0026amp; branch   git pull bring the latest changes from the remote repository into your local repo   git push send the latest changes from the local repository to the remote repo   git checkout BRANCHNAME switch to the BRANCHNAME (fill this in) branch, i.e. update the repository's contents to match the tip of BRANCHNAME   git remote -v list the remote(s) for the given local repository    HTML Important HTML Tags    Tag Purpose Playground     \u0026lt;html\u0026gt; \u0026lt;/html\u0026gt; Creates an HTML document    \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; Contains the title of the document \u0026amp; other info that isn't displayed Try it   \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; Contains the visible parts of the document    \u0026lt;title\u0026gt; \u0026lt;/title\u0026gt; Specifies the name of the document in the browser title bar; when bookmarking pages, this is what is bookmarked    \u0026lt;h1\u0026gt; \u0026lt;/h1\u0026gt; to \u0026lt;h6\u0026gt; \u0026lt;/h6\u0026gt; Creates text headlines. H1=largest, H6=smallest Try it   \u0026lt;strong\u0026gt; \u0026lt;/strong\u0026gt; or \u0026lt;b\u0026gt; \u0026lt;/b\u0026gt; Emphasizes a word (usually processed in bold) Try it   \u0026lt;em\u0026gt; \u0026lt;/em\u0026gt; or \u0026lt;i\u0026gt; \u0026lt;/i\u0026gt; Emphasizes a word (usually processed in italics) Try it   \u0026lt;a href=\u0026quot;URL\u0026quot;\u0026gt;clickable text\u0026lt;/a\u0026gt; Creates a link to another web page or website Try it   \u0026lt;p\u0026gt; \u0026lt;/p\u0026gt; Creates a new paragraph Try it   \u0026lt;br /\u0026gt; Interrupts the flow of text to a new line Try it   \u0026lt;div\u0026gt; \u0026lt;/div\u0026gt; Used to format block content with CSS Try it   \u0026lt;span\u0026gt; \u0026lt;span\u0026gt; Used to format inline content with CSS Try it   \u0026lt;ul\u0026gt; \u0026lt;/ul\u0026gt; Creates an unordered list Try it   \u0026lt;ol start=xx\u0026gt; \u0026lt;/ol\u0026gt; Creates an ordered list (start=xx, where xx is a counting number) Try it   \u0026lt;li\u0026gt; \u0026lt;/li\u0026gt; Specifies each list item of either the unordered or ordered list Try it   \u0026lt;img src=\u0026quot;URL\u0026quot; /\u0026gt; Specifies an image located at the URL Try it   \u0026lt;table\u0026gt; \u0026lt;/table\u0026gt; Creates a table Try it   \u0026lt;th\u0026gt; \u0026lt;/th\u0026gt; Creates a table header    \u0026lt;tr\u0026gt; \u0026lt;/tr\u0026gt; Creates a row of a table    \u0026lt;td\u0026gt; \u0026lt;/td\u0026gt; Creates a column within a row of a table    \u0026lt;iframe\u0026gt; \u0026lt;/iframe\u0026gt; Used to embed a webpage within another webpage. Its useful for embedding youtube videos on a web page Try it    ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/references/","title":"References \u0026 Cheat Sheets"}]