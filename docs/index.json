[{"body":" Basics of operating system A brief history and potential of Linux Command Line Linux file system hierarchy Navigation of Linux file system Working with files: Create, View, Manipulate Creation of hard and soft links Using command options  Let\u0026#39;s learn the Command Line! üíª ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/command/","title":"1 - Operating systems \u0026 Command Line"},{"body":" Git terminology Working with a local repository on the command line Creating, initializing, and cloning a repository Basics of branching Staging and commiting work Setting up remote repository (GitHub) and pushing local commits  Let\u0026#39;s learn about Git! üíª ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/git/","title":"2 - Version Control with Git and GitHub"},{"body":" Basic knowledge of HTML Basic knowledge of CSS Practical lesson demonstrating HTML \u0026amp; CSS Basic knowledge of JavaScript Practical lesson demonstrating HTML, CSS \u0026amp; JavaScript Job Opportunities (frontend dev)  Basic knowledge of HTML üíª ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/web/","title":"3 - Web development"},{"body":"Programming fundamentals in Python including:\n Functions Data types Conditional logic (if, elif, else and boolean expressions) Control flow (while and for loops) Classes and objects  Introduction to Python üíª ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/python/","title":"4 - Programming in Python"},{"body":"In this awesome course You will be learning fundamental computer science skills that are an absolute MUST for any IT field üéâ\nYou will be also introduced to programming and have your very first practical experience with one of the most popular programming languages: Python, HTML, CSS and Javascript.\nSections üìö These docs consists of four parts:\n Basic Command Line (Linux) Version Control with GIT Web Fundamentals Introduction to Programing (Python)  After this course ü§î  Understand and use the basic command line Use git/GitHub repository Understand the fundamentals of the web and its working Do basic python programming  After the successful completion of this introductory course, you can choose and apply for any other intermediate-level courses offered by ReDI!\nCourses links Basic Command Line Version Control with GIT Web Fundamentals Introduction to Programing (Python) ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/","title":"Welcome to the course üéâ"},{"body":"Preparations 1. Review exercises from Version Control with Git and GitHub (11/March) Reivew the content from the Git and GitHub lecture. We'll use github to store the HTML files we create in this lecture.\nReview Version Control with Git and GitHub: 11/March 2. Review exercises from Using an IDE (Integrated development environment) (18/March) Review the content from last lecture on Using an IDE with VsCode. We'll use VsCode to work on creating HTML files in this lecture.\nReview Using an IDE with VsCode: 18/March 3. Read through the following HTML tutorials from the W3Schools  HTML Introduction HTML Elements HTML Attributes HTML Headings HTML Paragraphs HTML Styles HTML Text Formatting HTML Colors HTML Links HTML Images HTML Tables HTML Lists HTML IFrames HTML Forms HTML Form Elements HTML Input Types HTML Video HTML Audio HTML YouTube  4. Watch these Videos The following video from Khan Academy's Internet 101 series will give you a high-level overview of how HTTP and HTML works.\n  HTTP and HTML - 7:07\n What is a web browser? What does HTTP stand for? How does it work? What is it used for? What is HTML? What is a GET request? What is a POST request? What is a cookie? What are SSL and TLS? Why are these important? How can you tell when these are in use? What is the difference between HTTPS and HTTP?    5. HTML class practice repository on Github Visit the following github page and follow the instructions to work on the activity for this class\n https://github.com/ReDI-School/ber-intro-to-cs-2021-html-journal   Class Curriculum    Section content Expected time (mins) Pre - Requirements     Lesson Agenda and Goals 5 minutes ‚ùå   Go over preparation questions in small groups 10-15 minutes Preparations section   Kahoot on preparatory material 10-15 minutes Preparations section   Review HTML Activity task as a whole class 10-15 minutes Preparations section   Class break 10 minutes ‚ùå   HTML Activity (in smaller groups) * link 45-60 minutes VsCode and Git installed    Lesson Goal Understand what HTML is, why we use it and create a HTML-based journal with links and graphics\nHTML - What is it? HTML, HyperText Markup Language, is a markup language for documents designed to be displayed in a Web Browser.\nWeb brosers fetch HTML documents from Web servers over the internet or on your laptop\nStructure of HTML Documents HTML elements are the building blocks of HTML pages and specify how text, images, video and interactive forms can be embedded on a web page which is being displayed in the browser.\nHTML elements are specified using tags that are within angle brackets \u0026lt;\u0026gt; for example the \u0026lt;html\u0026gt; tag. Tags usually come in pairs of start and end tags. For example \u0026lt;html\u0026gt; and \u0026lt;/html\u0026gt;. Usually when speaking about HTML tags, we simply ignore whether it is a start or end tag and simply use the tag name.\nThe set of all start and end tags in a HTML document form a hierarchy (just like a family tree). For example in the HTML markup below, the \u0026lt;html\u0026gt; tag is the parent of the \u0026lt;head\u0026gt; and \u0026lt;body\u0026gt; tags. The \u0026lt;title\u0026gt; tag is a child of the \u0026lt;head\u0026gt; tag and a grandchild of the \u0026lt;html\u0026gt; tag.\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3 \u0026lt;head\u0026gt; 4 \u0026lt;title\u0026gt;This is a title\u0026lt;/title\u0026gt; 5 \u0026lt;/head\u0026gt; 6 \u0026lt;body\u0026gt; 7 \u0026lt;div\u0026gt; 8 \u0026lt;p\u0026gt;Hello world!\u0026lt;/p\u0026gt; 9 \u0026lt;/div\u0026gt; 10 \u0026lt;/body\u0026gt; 11\u0026lt;/html\u0026gt; Important HTML Tags    Tag Purpose Playground     \u0026lt;html\u0026gt; \u0026lt;/html\u0026gt; Creates an HTML document    \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; Contains the title of the document \u0026amp; other info that isn't displayed Try it   \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; Contains the visible parts of the document    \u0026lt;title\u0026gt; \u0026lt;/title\u0026gt; Specifies the name of the document in the browser title bar; when bookmarking pages, this is what is bookmarked    \u0026lt;h1\u0026gt; \u0026lt;/h1\u0026gt; to \u0026lt;h6\u0026gt; \u0026lt;/h6\u0026gt; Creates text headlines. H1=largest, H6=smallest Try it   \u0026lt;strong\u0026gt; \u0026lt;/strong\u0026gt; or \u0026lt;b\u0026gt; \u0026lt;/b\u0026gt; Emphasizes a word (usually processed in bold) Try it   \u0026lt;em\u0026gt; \u0026lt;/em\u0026gt; or \u0026lt;i\u0026gt; \u0026lt;/i\u0026gt; Emphasizes a word (usually processed in italics) Try it   \u0026lt;a href=\u0026quot;URL\u0026quot;\u0026gt;clickable text\u0026lt;/a\u0026gt; Creates a link to another web page or website Try it   \u0026lt;p\u0026gt; \u0026lt;/p\u0026gt; Creates a new paragraph Try it   \u0026lt;br /\u0026gt; Interrupts the flow of text to a new line Try it   \u0026lt;div\u0026gt; \u0026lt;/div\u0026gt; Used to format block content with CSS Try it   \u0026lt;span\u0026gt; \u0026lt;span\u0026gt; Used to format inline content with CSS Try it   \u0026lt;ul\u0026gt; \u0026lt;/ul\u0026gt; Creates an unordered list Try it   \u0026lt;ol start=xx\u0026gt; \u0026lt;/ol\u0026gt; Creates an ordered list (start=xx, where xx is a counting number) Try it   \u0026lt;li\u0026gt; \u0026lt;/li\u0026gt; Specifies each list item of either the unordered or ordered list Try it   \u0026lt;img src=\u0026quot;URL\u0026quot; /\u0026gt; Specifies an image located at the URL Try it   \u0026lt;table\u0026gt; \u0026lt;/table\u0026gt; Creates a table Try it   \u0026lt;th\u0026gt; \u0026lt;/th\u0026gt; Creates a table header    \u0026lt;tr\u0026gt; \u0026lt;/tr\u0026gt; Creates a row of a table    \u0026lt;td\u0026gt; \u0026lt;/td\u0026gt; Creates a column within a row of a table    \u0026lt;iframe\u0026gt; \u0026lt;/iframe\u0026gt; Used to embed a webpage within another webpage. Its useful for embedding youtube videos on a web page Try it    Glossary    Term Meaning     HTML Hypertext Markup Language is a markup language used to specify what we want on Web Pages e.g. Tables, lists, links   CSS Cascading Style Sheets is a style sheet language for styling web pages e.g. for the colors or format of text   Static web page A static web page is a web page whose content cannot be changed when displayed in a browser   Dynamic web page A dynamic web page is a web page whose content can be changed based on various conditions for example based on the user's location or user's browser type   Browser compatibility This is the phenomenon where a certain web page or website works differently across different browsers. For example, you might ask \u0026quot;Is this HTML element compatible with Internet Explorer 11?\u0026quot; if you want to know if a HTML element will work as expected with Internet Explorer 11   W3Schools This is a website which provides documentation for HTML and CSS   Hypertext Hypertext describes texts on the web that forms links. A web page is a hypertext document which contains links allowing us to go from one page to the next   Cascading Cascading, in the context of CSS, is the process of combining/merging several style sheets before they are applied to a HTML element   Markup language A markup language defines a set of rules for describing documents in a format that is both human-readable and machine-readable   Programming language A programming language provides a set of commands and syntax that can be used to write computer programs which are understood by the computer    Extra resources  HTML Class Practice HTML cheatsheet, by Stanford University  Next class preparation Basics knowledge of CSS ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/web/basic_html/","title":"25/March - Basic knowledge of HTML"},{"body":"Preparations 1. Watch these Videos  Why Is CSS So Weird? - Theory \u0026amp; history Learn CSS in 20 Minutes - Practice Learn CSS Flexbox 15 Minutes - Practice Learn CSS Grid 20 Minutes - Practice  2. HTML class practice repository on Github We'll continue to apply some style to the journal we started building in our previous session Basic HTML\n https://github.com/ReDI-School/ber-intro-to-cs-2021-html-journal   Class Curriculum    Section content Expected time (mins) Pre - Requirements     Lesson Agenda and Goals 5 minutes ‚ùå   Live demo on basic CSS 25 minutes Preparations section   Kahoot on basics of html and css 15 minutes Preparations section   Review CSS Activity task as a whole class 10 minutes ‚ùå   Class break 10 minutes ‚ùå   CSS Activity (in smaller groups) 45-60 minutes VsCode and Git installed    Lesson Goal Understand what CSS is, why we use it and how we can apply it to style HTML pages\nCSS - What is it? CSS (Cascading Style Sheets) is a declarative language that controls how webpages look in the browser. The browser applies CSS style declarations to selected elements to display them properly. A style declaration contains the properties and their values, which determine how a webpage looks.\nCSS is one of the three core Web technologies, along with HTML and JavaScript. CSS usually styles HTML elements, but can be also used with other markup languages like SVG or XML.\nCSS Rule A CSS rule is a set of properties associated with a selector. Here is an example that makes every HTML paragraph yellow against a black background:\n1/* The selector \u0026#34;p\u0026#34; indicates that all paragraphs in the document will be affected by that rule */ 2p { 3 /* The \u0026#34;color\u0026#34; property defines the text color, in this case yellow. */ 4 color: yellow; 5 6 /* The \u0026#34;background-color\u0026#34; property defines the background color, in this case black. */ 7 background-color: black 8} How does CSS Actually Work When a browser displays a document, it must combine the document's content with its style information. It processes the document in a number of stages, which we've listed below. Bear in mind that this is a very simplified version of what happens when a browser loads a webpage, and that different browsers will handle the process in different ways. But this is roughly what happens.\n  The browser loads the HTML (e.g. receives it from the network).\n  It converts the HTML into a DOM (Document Object Model). The DOM represents the document in the computer's memory.\n  The browser then fetches most of the resources that are linked to by the HTML document, such as embedded images and videos ... and linked CSS! JavaScript is handled a bit later on in the process, and we won't talk about it here to keep things simpler.\n  The browser parses the fetched CSS, and sorts the different rules by their selector types into different \u0026quot;buckets\u0026quot;, e.g. element, class, ID, and so on. Based on the selectors it finds, it works out which rules should be applied to which nodes in the DOM, and attaches style to them as required (this intermediate step is called a render tree).\n  The render tree is laid out in the structure it should appear in after the rules have been applied to it.\n  The visual display of the page is shown on the screen (this stage is called painting).\n  How CSS is structured There are typically 3 ways we do that to include CSS in a HTML Page:\n Inline CSS  1\u0026lt;h1 style=\u0026#34;color: blue\u0026#34;\u0026gt; Hello world! \u0026lt;/h1\u0026gt; Internal CSS  1\u0026lt;head\u0026gt; 2 \u0026lt;style\u0026gt; 3 h1 { 4 color: blue; 5 } 6 \u0026lt;/style\u0026gt; 7\u0026lt;/head\u0026gt; External CSS  1\u0026lt;head\u0026gt; 2 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;style.css\u0026#34;\u0026gt; 3\u0026lt;/head\u0026gt; CSS Selectors  Element  The first way to select an HTML element is by simply using the name:\n1h1 { 2 font-size: 20px; 3} 4p { 5 color: green; 6} 7div { 8 margin: 10px; 9} We are selecting different elements like h1, p, div and giving them different style attributes. The font-size controls the size of the text, color sets the text color, and margin adds spacing around the element.\nClass  Another way of selecting HTML elements is by using the class attribute. In HTML, we can assign different classes to our elements. Each element can have multiple classes, and each class can also be applied to multiple elements as well.\n1\u0026lt;div class=\u0026#39;container\u0026#39;\u0026gt; 2 \u0026lt;h1\u0026gt; This is heading \u0026lt;/h1\u0026gt; 3\u0026lt;/div\u0026gt; 4 5 6.container { 7 background-color: blue; 8} In the code above, we have assigned the class of container to the div element. In the stylesheet, we select our class using .className format and giving it a blue background color.\nID  Like classes, we can also use IDs to select HTML elements and apply styling to them. The only difference between class and ID is that one ID can be assigned to only one HTML element in one page.\n1\u0026lt;div\u0026gt; 2 \u0026lt;p id=\u0026#39;para1\u0026#39;\u0026gt; This is a paragraph \u0026lt;/p\u0026gt; 3\u0026lt;/div\u0026gt; 4 5 6#para1 { 7 color: green; 8 font-size: 16px; 9} Extra resources  Learn to style HTML using CSS Build a Classic Layout FAST in CSS Grid Inspecting the CSS Cascade using Firefox DevTools Flexbox Froggy Grid Garden CSS Diner  Next class preparation Practical lesson demonstrating HTML \u0026amp; CSS ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/web/basic_css/","title":"30/March - Basic knowledge of CSS (Cascading Style Sheet)"},{"body":"Prerequisites  Decide who to build a website for: you? your pet? someone else? Pick a simple background image for your website. You can choose a landscape photo you've taken or search for images that are free to use e.g. from Unsplash or search Ecosia and filter by license  Class Curriculum    Section content Expected time (mins) Pre - Requirements     Kahoot on previous material 15 minutes ‚ùå   Lesson Agenda and Goals 5 minutes ‚ùå   HTML/CSS Activity (in smaller groups) 35 minutes VsCode and Git installed   Class break 10 minutes ‚ùå   HTML/CSS Activity (in smaller groups) 40 minutes VsCode and Git installed   Questions and Review 10 minutes VsCode and Git installed    Lesson Goal Practice using HTML and CSS to build a website.\nThe following tutorial will go through the process of making a website for you, but you can adapt it to make the website for anything you want.\nLegend ‚úèÔ∏è - do this section in your IDE (VSCode) or terminal\nüé® - this is a section that you can customise and make changes\nüìñ - this is a note, you do not need to do anything with this code\n0. Set up the repository ‚úèÔ∏è We will start working from the following repository: https://github.com/ReDI-School/ber-intro-to-cs-2021-html-css-website\nFork the repository and then clone your fork of the repo. Hint: git clone ...\nNote: there is a branch corresponding to each section of the tutorial. If at any point you get stuck, you can check out the completed code for that section. These are the branch names:\n 1-starting-html 2-navigation-bar 3-introduction 4-about-section 5-contact-section 1. Adding some HTML to start ‚úèÔ∏è Open the repository in VSCode. Go to the file index.html. Add the following and save the changes:\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; 5 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; 6 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;assets/css/style.css\u0026#34;\u0026gt; 7 \u0026lt;title\u0026gt; PLEASE CHANGE ME \u0026lt;/title\u0026gt; 8\u0026lt;/head\u0026gt; 9\u0026lt;body\u0026gt; 10 11\u0026lt;!-- Leave this space empty for content --\u0026gt; 12 13\u0026lt;/body\u0026gt; 14\u0026lt;/html\u0026gt; üìñ What does each of these lines mean?\n The page is defined as a HTML document:  1\u0026lt;!DOCTYPE html\u0026gt;  The character set is defined as UTF-8:  \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; A meta viewport tag is used to ensure the site looks good on different screen sizes e.g. mobile, laptop:  \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1\u0026quot;\u0026gt; A link to the CSS file we will use to style the site is added. This file is located elsewhere in the repository:  \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;assets/css/style.css\u0026quot;\u0026gt; A title is added:  \u0026lt;title\u0026gt; PLEASE CHANGE ME \u0026lt;/title\u0026gt; The visual website content will be contained within the body. Right now it contains only a comment:  \u0026lt;body\u0026gt; \u0026lt;!-- Leave this space empty for content --\u0026gt; \u0026lt;/body\u0026gt; Now view this in the browser.\n‚úèÔ∏è First we need to know the present working directory. Open the terminal and cd into the website repository. Then type the following and copy the output:\npwd Open your browser and copy the following into the address bar (but replace the text enclosed in \u0026lt;\u0026gt; with the paste of your working directory):\nfile://\u0026lt;paste the pwd\u0026gt;/index.html You should see:\n The text in the tab says PLEASE CHANGE ME The webpage is blank  üé® Lastly, change the text PLEASE CHANGE ME in index.html to my website (or your preferred text), and refresh the page. What has changed?\n2. Navigation Bar (navbar) We have an empty webpage - so much space to fill! Let's start with a navbar.\nA navbar contains a list of the places to navigate to on a website e.g. Home, Notifications, Messages.\nOur website will contain three sections: Home, About and Contact.\nContent (HTML) ‚úèÔ∏è Add the following in between the two \u0026lt;body\u0026gt; tags (replacing the comment).\n1\u0026lt;!-- Header --\u0026gt; 2\u0026lt;header class=\u0026#34;intro\u0026#34;\u0026gt; 3 \u0026lt;!-- Navbar --\u0026gt; 4 \u0026lt;div class=\u0026#34;navbar\u0026#34;\u0026gt; 5 \u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;button\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt; 6 \u0026lt;a href=\u0026#34;#about\u0026#34; class=\u0026#34;button\u0026#34;\u0026gt;About\u0026lt;/a\u0026gt; 7 \u0026lt;a href=\u0026#34;#contact\u0026#34; class=\u0026#34;button\u0026#34;\u0026gt;Contact\u0026lt;/a\u0026gt; 8 \u0026lt;/div\u0026gt; 9\u0026lt;/header\u0026gt; üìñ What does this mean?\n The \u0026lt;header\u0026gt; tag is used to specify that a header is added to the page. This typically contains a navigation bar and/or introductory information.  1\u0026lt;header class=\u0026#34;intro\u0026#34;\u0026gt; 2... 3\u0026lt;/header\u0026gt; 4 The \u0026lt;div\u0026gt; tag represents a new section or division. The \u0026lt;a\u0026gt; tag is used to link from one page to another, or if a # is used, to link to another section on the same page. Later on we will create sections for About and Contact.  1 \u0026lt;div class=\u0026#34;navbar\u0026#34;\u0026gt; 2 \u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;button\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt; 3 \u0026lt;a href=\u0026#34;#about\u0026#34; class=\u0026#34;button\u0026#34;\u0026gt;About\u0026lt;/a\u0026gt; 4 \u0026lt;a href=\u0026#34;#contact\u0026#34; class=\u0026#34;button\u0026#34;\u0026gt;Contact\u0026lt;/a\u0026gt; 5 \u0026lt;/div\u0026gt; Go to your browser and refresh the page to display this content. You will see that the navbar content is present but is unstyled, so we will add some styling with CSS.\nStyling (CSS) ‚úèÔ∏è In your IDE open the file: assets/css/style.css.\n Add the following to style and set a the colour of the navbar:  1body { 2 margin: 0px; 3} 4 5.navbar { 6 background-color: #5354f4; 7 overflow: hidden; 8} üé® The text #5354f4 represents a hex colour code. Use a colour picker to choose a different colour and change this!\nNext, style the navigation bar links by adding the following to style.css:  1/*Navigation bar links*/ 2.navbar a { 3 display: block; 4 padding: 20px 25px; 5 text-align: center; 6 text-decoration: none; 7 float: left; 8 color: white; 9} üé® For each of these items, see if you can figure out what it does either by making a search on Ecosia or by editing/removing them.\nLastly change what happens when a mouse is hovering over a link, by adding the following:  1/*Hovering over navigation bar*/ 2.navbar a:hover { 3 background-color: #faf800; 4 color: black; 5} üé® Again, change each of these to understand what they are doing.\n3. Adding an introduction header Within the header, we want to introduce ourselves and say hello to the world. We will add a greeting here.\nContent (HTML) ‚úèÔ∏è Return to the index.html file and add the following content after the navbar section and still between the \u0026lt;header\u0026gt; tags:\n1 \u0026lt;!-- Introduction --\u0026gt; 2 \u0026lt;div class=\u0026#34;summary\u0026#34;\u0026gt; 3 \u0026lt;h1 class=\u0026#34;name\u0026#34;\u0026gt;Hello, my name is ___ \u0026lt;/h1\u0026gt; 4 \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;My title\u0026lt;/h3\u0026gt; 5 \u0026lt;/div\u0026gt; The \u0026lt;h\u0026gt; tags are used to create different headings and subheadings. Here \u0026lt;h1\u0026gt; is used as the main heading, and \u0026lt;h3\u0026gt; as a subheading.\nüé® Now customise the greeting and title with your name and title e.g. your title could be Redi School Student, Programmer or even an emoji like: üíª.\nStyling (CSS) ‚úèÔ∏è Open style.css again.\nWe will change the font and position the intro text in the centre of the screen. Then we will add a background image.\n Change the font  Where you have previously, added:\nbody { margin: 0px; } Replace this with the following:\n1body, 2html { 3 height: 100%; 4 margin: 0px; 5} 6body, 7h1, 8h2, 9h3, 10h4, 11h5, 12h6, 13p { 14 font-family: Arial, sans-serif; 15 font-weight: 500; 16 color: #5354f4; 17} This will:\n make the body have 100% of the screen height. change the font for all text types to Arial, and change the text colour and weight.  üé® Again, customise the following:\n font font-weight colour  Now we will center the text in the screen  ‚úèÔ∏è Add the following to the CSS file:\n1/*Introduction*/ 2.summary { 3 position: absolute; 4 top: 50%; 5 left: 50%; 6 transform: translate(-50%,-50%); 7 8 text-align: center; 9 letter-spacing: 4px; 10} Read through each of these items. Can you figure out what each of them is doing? Try searching Ecosia, asking one of the instructors or experimenting by changing them.\nLastly, we will add a background image  For this, we will need the image that you selected as part of your preparation work.\nSave this image to the folder: assets/images and give it the name background.jpg (or if it is an png image, background.png)\n‚úèÔ∏è Now add the following to style.css:\n1.intro { 2 height: 100%; 3 background-image: url(\u0026#34;../images/background.png\u0026#34;); 4 background-size: cover; 5} If your background image has a .jpg extension, change this to url(\u0026quot;../images/background.jpg\u0026quot;);.\n4. About section ‚úèÔ∏è Next we will add an about section. Between the \u0026lt;/header\u0026gt; tag and \u0026lt;/body tag, add the following:\nContent (HTML) 1\u0026lt;!-- About --\u0026gt; 2\u0026lt;div class=\u0026#34;about\u0026#34; id=about\u0026gt; 3 \u0026lt;h2\u0026gt;About Me\u0026lt;/h2\u0026gt; 4 \u0026lt;p\u0026gt;Some things I like are ___ . I am learning about ____. \u0026lt;/p\u0026gt; 5\u0026lt;/div\u0026gt; üé® Customise the text between the \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; paragraph tags.\nStyling (CSS) ‚úèÔ∏è To style the text in the About section, add the following:\n1/*about section*/ 2 3.about h2, p { 4 text-align: left; 5 padding-left: 25%; 6 padding-top: 1%; 7 padding-bottom: 1%; 8 9} 10 11.about p { 12 font-size: 20px; 13} This will align the text and change the font size of the paragraph.\nüé® Change the font size and padding.\n5. Contact section Finally, we will add a Contact section with a list of links for how to contact us.\nContent (HTML) ‚úèÔ∏è Add the following underneath the About section:\n1\u0026lt;!-- Contact --\u0026gt; 2\u0026lt;div class = \u0026#34;contact\u0026#34; id=contact\u0026gt; 3 \u0026lt;h2\u0026gt;Contact\u0026lt;/h2\u0026gt; 4 \u0026lt;ul\u0026gt; 5 \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;https://github.com/\u0026lt;exampleuser\u0026gt;\u0026#34;\u0026gt;GitHub\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; 6 \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;mailto:example@email.com\u0026#34;\u0026gt;Email\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; 7 \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;https://twitter.com/\u0026lt;exampleuser\u0026gt;\u0026#34;\u0026gt;Twitter\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; 8 \u0026lt;/ul\u0026gt; 9\u0026lt;/div\u0026gt; This creates a Contact section with an unordered list (\u0026lt;ul\u0026gt;). Each list item \u0026lt;li\u0026gt; is a link to different forms of contact.\nüé® Customise this list by adding/removing/editting the contents, but don't add any contact details that you are not comfortable with.\nStyling (CSS) We will style the Contact section similiarly to the About section. The main difference is that this time we have a list and we want to style the list and its items.\n‚úèÔ∏è Add the following to the style.css document.\n1.contact h2, ul, li { 2 text-align: left; 3 padding-left: 25%; 4 padding-top: 1%; 5 padding-bottom: 1%; 6} 7 8.contact li { 9 padding-left: 1%; 10} 11 12.contact a { 13 border-bottom: dotted; 14 text-decoration: none; 15} üé® Learn what each of these is doing by customising the section, looking up what they mean or removing them entirely!\n6. Follow-up Here are some things you can do to continue your work:\n Compile a list of questions: what didn't you understand? Share the questions in the team slack. Remember if you are unsure about something, then someone else probably is too. Sharing questions openly helps everyone learn, including the teachers and instructors. Further customise the website by adding or removing sections, for example adding a section for photos or fun facts. Commit your changes and push your code to GitHub. Publish your website on GitHub using GitHub Pages  Next class preparation Basics of JavaScript ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/web/html_css/","title":"01/April - Practical Demonstration of HTML and CSS"},{"body":"Preparations  üìΩÔ∏è Learn JavaScript - Full Course for Beginners - Watch as much as you can üìö Javascript basics   Class Curriculum    Section content Expected time (mins) Pre - Requirements     Lesson Agenda and Goals 5 minutes ‚ùå   Live demo on basic JS 45 minutes Preparations section   Review of the Activity task as a whole class 10 minutes ‚ùå   Class break 10 minutes ‚ùå   JS Activity (in smaller groups) 45-60 minutes VsCode and Git installed    Lesson Goal To gain familiarity with what JavaScript is, what it can do, and how it fits into a web site.\nJavascript - What is it? JavaScript is a scripting language that enables you to create dynamically updating content, control multimedia, animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.) It is the third layer of the layer cake of standard web technologies.\n JavaScript is a lightweight interpreted programming language. JavaScript can both be used as a client-side and server-side programming language JavaScript is an untyped programming language   1\u0026lt;p\u0026gt;Player 1: Chris\u0026lt;/p\u0026gt; 1p { 2 font-family: \u0026#39;helvetica neue\u0026#39;, helvetica, sans-serif; 3 text-align: center; 4 border: 2px solid rgba(0,0,200,0.6); 5 color: rgba(0,0,200,0.6); 6 display: inline-block; 7 cursor: pointer; 8} 1const para = document.querySelector(\u0026#39;p\u0026#39;); 2 3para.addEventListener(\u0026#39;click\u0026#39;, updateName); 4 5function updateName() { 6 let name = prompt(\u0026#39;Enter a new name\u0026#39;); 7 para.textContent = \u0026#39;Player 1: \u0026#39; + name; 8}   What can JavaScript do The core client-side JavaScript language consists of some common programming features that allow you to do things like:\n  Store useful values inside variables.\n  Operate on text pieces to form new text pieces\n  Running code in response to certain events occurring on a web page.\n  Dynamically modify HTML and CSS to update a web page ( with the DOM API)\n  Retrieves geographical information ( with the Geolocation API )\n  Create animated 2D and 3D graphics (with the Canvas and WebGL APIs)\n  Play audio and video right in a web page, create audio and video calls ( with the Audio and Video APIs like HTMLMediaElement and WebRTC)\n  And much,much more!\n  How do you add JavaScript to your page There are typically 3 ways we do that to include JS in a HTML Page ( just like CSS):\n Inline JS  1\u0026lt;button onclick=\u0026#34;javascript:alert(\u0026#39;You clicked me!\u0026#39;)\u0026#34;\u0026gt;Click me!\u0026lt;/button\u0026gt; Internal JS  1\u0026lt;head\u0026gt; 2 \u0026lt;script\u0026gt; 3 let counter = 1; 4 counter++; 5 alert(\u0026#34;Counter is now:\u0026#34;, counter); 6 \u0026lt;/script\u0026gt; 7\u0026lt;/head\u0026gt; External JS  1\u0026lt;head\u0026gt; 2 \u0026lt;script src=\u0026#34;script.js\u0026#34; defer\u0026gt;\u0026lt;/script\u0026gt; 3 \u0026lt;script src=\u0026#34;script-independent.js\u0026#34; async\u0026gt;\u0026lt;/script\u0026gt; 4\u0026lt;/head\u0026gt; Ways of loading JS scripts  If your scripts should be run immediately and they don't have any dependencies, then use async. If your scripts need to wait for parsing and depend on other scripts and/or the DOM being in place, load them using defer and put their corresponding \u0026lt;script\u0026gt; elements in the order you want the browser to execute them.  Basic JS Guide  Comments:  1/* 2Comments are important because they help other people understand 3what is going on in your code. 4This is a multi line comment 5*/ 6 7// This is a single line comment Variables:  Stand-in values that you can use to perform operations.\n1 2// The most common variable. It can be reassigned but only accessed within a function. Variables 3// defined with var move to the top when the code is executed. 4var name = \u0026#34;JavaScript\u0026#34; 5// Can not be reassigned and not accessible before they appear within the code. 6const PI = 3.14 7// Similar to const, the let variable can be reassigned but not re-declared. 8let lastName = \u0026#34;Language\u0026#34; Data Types  Variables can contain different types of values and data types. You use = to assign them:\n1let age = 23 // Numbers 2let x // variables 3let a = \u0026#34;init\u0026#34; // text - strings 4let b = 1 + 2 + 3 // operations 5let c = true // true or false, booelans 6const PI = 3.14 // constants 7let person = {firstName:\u0026#34;John\u0026#34;, lastName:\u0026#34;Doe\u0026#34;} //objects 8let numbers = [1, 2, 3] // arrays - contain 3 items Operators  If you have variables, you can use them to perform different kinds of operations. To do so, you need operators. Basic\n1+ ‚Äî //Addition 2- ‚Äî //Subtraction 3* ‚Äî Multiplication 4/ ‚Äî Division 5(...) ‚Äî Grouping operator, operations within brackets are executed earlier than those outside 6% ‚Äî Modulus (remainder ) 7++ ‚Äî Increment numbers 8-- ‚Äî Decrement numbers  Comparison\n== ‚Äî Equal to === ‚Äî Equal value and equal type != ‚Äî Not equal !== ‚Äî Not equal value or not equal type \u0026gt; ‚Äî Greater than \u0026lt; ‚Äî Less than \u0026gt;= ‚Äî Greater than or equal to \u0026lt;= ‚Äî Less than or equal to ? ‚Äî Ternary operator  Logical\n\u0026amp;\u0026amp; ‚Äî Logical and || ‚Äî Logical or ! ‚Äî Logical not   Functions  JavaScript functions are blocks of code that perform a certain task. A basic function looks like this:\n1function name(parameter1, parameter2, parameter3) { 2 console.log(parameter1); 3} Extra resources  üìΩÔ∏è Learn JavaScript - Full Course for Beginners - Continue watching üìö Learn JS üìö JavaScript for impatient programmers  Next class preparation Practical lesson JS ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/web/basic_js/","title":"06/April - Basic knowledge of Javascript"},{"body":"Preparations  Class Curriculum    Section content Expected time (mins) Pre - Requirements     Intro to Lesson 5 minutes ‚ùå   Practical Activity (in smaller groups) 40-50 minutes VsCode and Git installed   Checkout 5 minutes ‚ùå    Lesson Goal Practice what we've learned so far!\nWe're going to make use of the command line, HTML, CSS and Javascript to create a web page that displays the time and date!\n1. Set up a new repository  Open the terminal. Create a new directory and move to the new directory:  mkdir date-time-website \u0026amp;\u0026amp; cd date-time-website  Create a README:  echo \u0026quot;# Time and Date Website\u0026quot; \u0026gt; README.md  Initialise a new repository and change the branch to main:  git init git checkout -b main  Create the first commit:  git a . git commit -m \u0026quot;Initialise the repository with a README\u0026quot; 2. Create the HTML files  Open VSCode from the terminal:  code .   Create a file called index.html\n  Add the following to index.html:\n  1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; 5 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; 6 \u0026lt;title\u0026gt; Date and Time Website \u0026lt;/title\u0026gt; 7\u0026lt;/head\u0026gt; 8 9\u0026lt;body\u0026gt; 10 \u0026lt;h1\u0026gt; Today\u0026#39;s date is Tuesday, 13th April \u0026lt;/h1\u0026gt; 11 \u0026lt;h2\u0026gt; The time is 20:30 CET \u0026lt;/h2\u0026gt; 12\u0026lt;/body\u0026gt; 13 14\u0026lt;/html\u0026gt; This sets up the content of the webpage. But there is a problem! We have hard-coded the date and time. To hard-code something means to set it so that it cannot be changed or updated. The webpage will always say it is Tuesday, 13th of April, even when it is not. In Section 3 we will use Javascript to display the correct date and time always.\n  Run LiveServer\n  Add and commit this to git.\n[hint: git add . and git commit -m \u0026quot;...\u0026quot;, replacing ... with a meningful message.]\n  3. Create the CSS Files   Create a file called style.css.\n  Add the following to style.css to style the page:\n  1body { 2 text-align: center; 3 background-color: teal; 4 font-family: Arial, sans-serif; 5 font-weight: 500; 6 color: silver; 7}  In index.html, append the following between the \u0026lt;head\u0026gt; tags to reference the css file:  1 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;style.css\u0026#34;\u0026gt;   Refresh LiveServer\n  Change the colours and font weight.\n  Add and commit your changes to git.\n[hint: git add . and git commit -m \u0026quot;...\u0026quot;, replacing ... with a meaningful message.]\n  4. Introduce Javascript to find the date and time   Create a file called script.js\n  Add the following to the script:\n  1var date = new Date(); 2 3// We can take a look at what d contains with the console: 4console.log(date) 5 6// Extract the date from d: 7var currentDate = date.toDateString() 8 9// Extract the time from d: 10var currentTime = date.toLocaleTimeString() 11 12document.body.innerHTML = \u0026#34;\u0026lt;h1\u0026gt;Today\u0026#39;s date is \u0026#34; + currentDate + \u0026#34;\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt; The time is \u0026#34; + currentTime + \u0026#34;\u0026lt;/h2\u0026gt;\u0026#34; Here we use the Javascript Date object to retrieve the date and time and assign it to a variable, d. We then make use of two methods toDateString() and toLocalTimeString() to extract only the information that we want (the date and time) from the variable, d and assign this information to two new variables, currentDate and currentTime. The document.body.innerHTML. If this is your first time encountering the term variable, one of the teachers can explain what the term means.\n Replace the following in index.html:  1\u0026lt;body\u0026gt; 2 \u0026lt;h1\u0026gt; Today\u0026#39;s date is Tuesday, 13th April \u0026lt;/h1\u0026gt; 3 \u0026lt;h2\u0026gt; The time is 20:30 CET \u0026lt;/h2\u0026gt; 4\u0026lt;/body\u0026gt; with :\n1 2\u0026lt;body\u0026gt; 3 \u0026lt;script src=\u0026#34;./script.js\u0026#34; \u0026gt;\u0026lt;/script\u0026gt; 4\u0026lt;/body\u0026gt;   Refresh LiveServer\n  Use your browser's Developer Tools to inspect the page, and take a look at what was logged in the Javascript you wrote (console.log(date))\n  Add and commit these changes to git.\n[hint: git add . and git commit -m \u0026quot;...\u0026quot;, replacing ... with a meaningful message.]\n  5. Push to Github   Create a repository on GitHub, called date-time-website\n  Connect the GitHub repository to your local repository:\n[Hint: git remote add origin https://...]\n  Push your work to Github\n  Learning more HTML, CSS or Javascript To learn more about HTML, CSS and/or Javascript:\n  Learn creative coding with p5js. With creative coding, you can make beautiful and interactive things like this or this. Try out the getting started documentation to start learning how to use p5js or watch a Coding Train Introductory Playlist.\n  Mozilla Web Development Docs\n  Free Code Camp - Introduction to Javascript\n  javascript.info\n  ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/web/practice_html_css_js/","title":"13/April - Practice Javascript, HTML and CSS"},{"body":"Pre Requisites Create an account in code.org website\n https://studio.code.org/users/sign_up  Class Curriculum    Section content Expected time (mins) Pre - Requirements     Teacher/Student introduction 20-30 mins ‚ùå   Showing the outline of the course: 5-10 mins ‚ùå   Intro to computer science: 20-30 minutes ‚ùå   Small break 5mins ‚ùå   Dance Party 20-30 mins Register code.org   Small introduction to what is software/code 20-30 mins ‚ùå   Next class overview 5 mins ‚ùå    Extra resources  Intro to computer science Harvard - Binary Exploring how computers work How do computers remember History of computer science Scratch Presentation   Next class preparation Operating systems \u0026amp; Command Line Basics Part 1 ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/command/intro/","title":"02/March - Inspiration class "},{"body":"Pre Requisites Create an account on repl.it\n https://repl.it/signup  Class Curriculum    Section content Expected time (mins) Pre - Requirements     Operating system (OS) basics 20-25 minutes ‚ùå   Principle of abstraction 5-10 minutes ‚ùå   Graphical \u0026amp; command line interfaces to OS 5-10 minutes ‚ùå   Linux file system hierarchy 5-10 minutes repl.it account   Class break 10 minutes ‚ùå   The Linux command line 35-40 minutes repl.it account   Job opportunities 5-10 minutes ‚ùå   Next class overview 5 minutes ‚ùå    Operating system (OS) basics  Questions  Can you think of any operating systems in nature? Can you think of any operating systems in society? What are some operating systems you've used?    Principle of abstraction  Questions:  Can you think of other examples of the Principle of abstraction in:  Society Science \u0026amp; Technology      The Linux command line  Questions:  Create an account on repl.it Click + New Repl on the top-left side of the page Select Bash from the Language drop-down menu Click create repl Explore the following commands in your bash command line interface on repl.it:  echo pwd ls cd cat cp mv mkdir touch find grep history date whoami      Job opportunities  Systems Administrator DevOps Engineer Site Reliability Engineer Questions:  Can you think of any other career opportunities?    Extra resources  Presentation Computer Basics: Understanding Operating Systems Operating Systems: Crash Course Computer Science #18 Beginner's Guide to the Bash Terminal What Is Abstraction in Computer Science How to use the Command Line Terminal On Your Mac How to Install Linux Terminal on Windows 10 Jobs: Linux \u0026amp; Career Opportunities Jobs: Inside Site Reliability Engineering Jobs: Career Switch to IT   Next class preparation Command Line Basics Part 2 ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/command/command_line_part1/","title":"04/March - Operating Systems \u0026 Command Line Basics"},{"body":"Prerequisites  You have completely set up one of the three Python development options  VsCode PyCharm Google Colab Notebook   You have solved the tasks from the last class   Class Curriculum    Section content Expected time (mins) Pre - Requirements     Lesson Goals 5 minutes ‚ùå   Check-in on pre-reqs and questions from last class 15 minutes ‚ùå   Procedural programming 10 minutes ‚ùå   Object-oriented Programming 10 minutes ‚ùå   Pillars of object-oriented programming 10 minutes ‚ùå   Break 10 minutes ‚ùå   Pillars of object-oriented programming 10 minutes ‚ùå   Task: Extend the pet clinic example 20 minutes ‚ùå   Bonus Task: Implement a REDI School Management System 20 minutes ‚ùå   Check-out 10 minutes ‚ùå    0. Lesson Goals  Learn the difference between procedural vs. object-oriented programming. Learn the pillars of object-oriented programming in Python  Classes Objects Constructor functions Object Methods Inheritance    1. Check-In  What was particularly challenging last class? Are there any remaining questions from last class?  2. Procedural Programming Procedural programming involves writing sequential code which is executed from top to the bottom of the file. You are not allowed to switch steps otherwise the program will fail to run. You can think of procedural programming like the process of boiling some spaghetti.\n You get a clean pot You pour some water into the pot You switch on the cooker You wait for the water to start boiling You add the Spaghetti You add some salt You wait for about 10 to 15 minutes for the Spaghetti to cook  Here are some characteristics of procedural programming:\n In procedural programming, program is divided into small parts called functions. Procedural programming follows top down approach. Adding new data and functions is not easy. Procedural programming does not have any proper way for hiding data so it is less secure. In procedural programming, function is more important than data. Procedural programs are not modelled according to real-world structure. Procedural programming languages include C, FORTRAN, Pascal, Basic etc  3. Object-Oriented Programming Object-oriented programming involves writing code in terms of the objects that make up the problem you are trying to solve. The definitions of these objects in the code can be switched around without causing the program to fail. You can think of object-oriented programming like the process of solving a jigsaw puzzle.\nHere are some characteristics of object-oriented programming:\n In object-oriented programming, the program is divided into small parts called objects. Object-oriented programming follows bottom up approach. Adding new data and function is easy. Object-oriented programming provides data hiding so it is more secure. In object-oriented programming, data is more important than function. Object-oriented programs are modelled according to real-world structure. Object-oriented programming languages include C++, Java, Python, C# etc.  4. Pillars of Object-Oriented Programming in Python Classes Classes represent a group of objects you would like to manage in your program. Classes in python are declared as follows:\n1class class_name: 2 class_body For example if you are writing code to manage the pets at a pet clinic then your program is managing different pets, whether they are dogs, cats, turtles etc. In your program you would represent all these different breeds using a Pet class.\n1class Pet: 2 pass  Note: The pass keyword is used when we do not want to specify any details of the class.  Objects When we define a class only the description or a blueprint of all possible objects defined by that class is created. For example one particular cat at the pet clinic is an object of the Pet class. When you create an object from a class in your code, you assign it to a variable to allow you do something meaningful with that specific object. You create an object and assign it to a variable as follows:\n1object_variable = class_name() For example, an object for a cat called Maya can be created from the Pet class as follows:\n1maya = Pet() Now you can print the Maya object\n1print(maya) 2# outputs something like -\u0026gt; \u0026lt;__main__.Pet object at 0x7ff41e9bcdd0\u0026gt;  Note: The 0x7ff41e9bcdd0 above is the address of Maya in memory on my computer. The value will be different on your computer  Constructor functions The examples above are classes and objects in their simplest form, and are not really useful in real life applications.\nTo understand the meaning of classes we have to understand the built-in __init__() constructor function.\nAll classes have a function called __init__(), which is always executed when an object of the class is being constructed.\nUse the __init__() function to assign values to object properties, or other operations that are necessary to do when the object is being created:\nFor example, in the example from above\n1maya = Pet() We know that object relates to a cat called Maya because we stored the object in a variable called maya.\nNow consider if we instead named the variable differently:\n1pet_one = Pet() We've lost all hints that the pet_one object actually refers to Maya. We can add a constructor function to the Pet class which will allow us to give names to pets objects we create.\n1class Pet: 2 def __init__(self, name): 3 self.name = name  Note: The self parameter is a reference to the current class object and is used to access variables that belong to the object.  With the new constructor function added to the Pet class, we can now create pet objects with actual names\n1pet_one = Pet(\u0026#34;Maya\u0026#34;) 2pet_two = Pet(\u0026#34;Felix\u0026#34;) And we can selectively print the names of each pet\n1print(pet_one.name) 2print(pet_two.name) 3# outputs 4# Maya 5# Felix Object Methods Objects can also contain functions called Methods. Methods allow the program to perform actions on objects.\nLet us add a hello method to the Pet class that the pets can use to introduce themselves (if they could speak)\n1class Pet: 2 def __init__(self, name): 3 self.name = name 4 5 def hello(self): 6 print(\u0026#34;Hello my name is \u0026#34; + self.name) Now we can create a pet called called Maya and have her say hello!\n1pet_one = Pet(\u0026#34;maya\u0026#34;) 2pet_one.hello() 3# output -\u0026gt; Hello my name is maya Class inheritance Inheritance allows us to define a class that is a sub-category of another class. For example at the pet clinic, we have a Pet class. But using the Pet class, we cannot differentiate between cats, dogs, turtles or birds.\nWe can create new classes for the different kinds of animals at the pet clinic and have all of them inherit from the Pet class.\n1class Pet: 2 def __init__(self, name): 3 self.name = name 4 5 def hello(self): 6 print(\u0026#34;Hello my name is \u0026#34; + self.name) 7 8class Cat(Pet): 9 pass 10 11class Dog(Pet): 12 pass 13 14class Turtle(Pet): 15 pass 16 17class Bird(Pet): 18 pass The Pet class is known as the parent class.\nThe Cat, Dog, Turtle and Bird classes are known as child class.\nNow we can create more pet objects using their specific classes and they will all be able to say hello because they've inherited the hello method from the Pet class\n1cat_one = Cat(\u0026#34;maya\u0026#34;) 2dog_one = Dog(\u0026#34;bosco\u0026#34;) 3turtle_one = Turtle(\u0026#34;speedy\u0026#34;) 4bird_one = Bird(\u0026#34;diver\u0026#34;) 5 6cat_one.hello() 7dog_one.hello() 8turtle_one.hello() 9bird_one.hello() 10 11# outputs 12# Hello my name is maya 13# Hello my name is bosco 14# Hello my name is speedy 15# Hello my name is diver Even though we now have various child classes of the parent class Pet, each of those child classes have characteristics that apply to only them. For example cats can meow, dogs can bark, birds can fly and turtles can hide in their shell.\nWe can add more specific class methods into the various child classes to provide more specific behaviors.\nLets add:\n A meow method to the Cat class which causes the cat to make the meow sound A bark method to the Dog class which causes the cat to bark A fly method to the Bird class which causes the bird to fly A hide method to the Turtle class which causes the turtle to go into its shell  1class Pet: 2 def __init__(self, name): 3 self.name = name 4 5 def hello(self): 6 print(\u0026#34;Hello my name is \u0026#34; + self.name) 7 8class Cat(Pet): 9 def meow(self): 10 print(\u0026#34;Meeeeeooooww! I am a cat!\u0026#34;) 11 12class Dog(Pet): 13 def bark(self): 14 print(\u0026#34;Wooof! Woof! I am a dog!\u0026#34;) 15 16class Turtle(Pet): 17 def hide(self): 18 print(\u0026#34;Hide! I\u0026#39;m shy! I am a turtle!\u0026#34;) 19 20class Bird(Pet): 21 def fly(self): 22 print(\u0026#34;Swoooosh! I\u0026#39;m flying away! I am a bird!\u0026#34;) Now lets get all our pets to first say hello and then perform the actions they are good at\n1cat_one = Cat(\u0026#34;maya\u0026#34;) 2dog_one = Dog(\u0026#34;bosco\u0026#34;) 3turtle_one = Turtle(\u0026#34;speedy\u0026#34;) 4bird_one = Bird(\u0026#34;diver\u0026#34;) 5 6cat_one.hello() 7cat_one.meow() 8 9dog_one.hello() 10dog_one.bark() 11 12turtle_one.hello() 13turtle_one.hide() 14 15bird_one.hello() 16bird_one.fly() 17 18# outputs 19# Hello my name is maya 20# Meeeeeooooww! I am a cat! 21# Hello my name is bosco 22# Wooof! Woof! I am a dog! 23# Hello my name is speedy 24# Hide! I\u0026#39;m shy! I am a turtle! 25# Hello my name is diver 26# Swoooosh! I\u0026#39;m flying away! I am a bird! 5. Task: Extend the pet Clinic Example  Write out all the code in the examples above in your preferred python environment and verify that they work for you Add the ability to specify an age of the pet to the Pet class Create a list of 20 pets:  5 cats with different names and ages 5 dogs with different names and ages 5 turtles with different names and ages 5 birds with different names and ages   Update the hello method in the Pet class to also print the age of the pet Using a for-loop, go through the list of 20 pets and for each pet with an even-numbered age, make the pet say hello!  6. Bonus Task: Implement a REDI School Management System  Create a School class which represents all the different REDI school locations Each school location will be an object of the School class Create a Course class which represents all the different courses offered at REDI School Each actual course will be an object of the Course class Create a Student class which represents all the different students in a REDI School course Each actual student will be an object of the Student class Each student object must have a name Each course object must have a course name and a list of students Each school object must have a location name and a list of courses Test your system by:  Creating 3 REDI School objects representing the locatios in Germany Creating 1 course object representing a course offered at one of the schools (3 course objects in total) Creating students objects representing each of the students of the Intro To CS course.    Additional Resources  Python Classes/Objects Python Inheritance  ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/python/python_classes/","title":"04/May - Object-oriented Python"},{"body":"Prerequisites  [Optional]: review the w3 schools' materials on Python classes   Class Curriculum    Section content Expected time (mins) Pre - Requirements     Lesson Goals 5 minutes ‚ùå   Check-in on pre-reqs, recap, questions from last class 10 - 15 minutes ‚ùå   Kahoot 10 - 15 minutes ‚ùå   Exercises in groups 30 minutes ‚ùå   Break 10 minutes ‚ùå   Exercises in groups 40 minutes ‚ùå   Check-out 10 minutes ‚ùå    0. Lesson Goals  Practice object-oriented programming concepts  1. Check-In  What was particularly challenging last class? Are there any remaining questions from last class?  2. Kahoot Let's do a Kahoot to check our understanding of the concepts covered last class!\n3. Exercises (part 1) In groups, go through the exercises on this tutorial. Try not to look at the solutions until you have finished the problem. Copy the skeleton code into your local development setup (VSCode, PyCharm, or Google Colab) and try to achieve the \u0026quot;expected output\u0026quot; described for each exercise. Make sure everyone in your group has understood and produced the proper output before moving on to the next task in this section :)\n4. Exercises (part 2) In groups, let's start building a card game in Python. (While we won't implement an entire game in this activity, implementing a Blackjack, Poker, or other game-player could be a fun project!)\nThe goal will be to describe the real-world situation of a deck of cards using Python code. This is meant to be challenging; Google is your friend here, use it to look up how to do things and to help you understand the material!\nExample solutions to parts 1-3 will be posted after class :)\n If you aren't sure what a deck of cards is, feel free to check out this Wikipedia page or chat with your group :). The rest of this exercise assumes a standard 52-card deck (French deck), but feel free to use a different style if you wish.\n  Define a Card class.\n What properties should this class have? Include an object method that displays the card. (Hint: you can print the properties of the card.) Test your implementation by creating and displaying a few cards (ex. Ace of Spades, 4 of Hearts, 10 of Diamonds...)    Define a Deck class.\n What properties should this class have? In the init constructor, make sure to build some representation of the 52-card deck. (Hint: use a nested for loop to create all the necessary cards) Include an object method that displays the deck. Test your implementation by displaying the deck. Is the whole deck there and as you expect?    (Challenge) Define a Hand class. A Hand is a list of cards that has a total value. For now, go ahead and assume that the value of a Hand is the sum of the values of each card and you can feel free to use the following scheme: Ace = 1 point, 2 = 2 points ... , King = 13 points. (Hint: consider using a dictionary mapping from card type to value.)\n What properties should this class have? Include a method to get the value of the hand. Include a method to display the hand. Test your implementation by creating (instantiating) a few Hand objects and displaying them.    (Optional challenge tasks / Project ideas) Note: all of these are supposed to be challenging, and implementing a combination of these (or the last one) could be an exciting project later in the coming weeks as well! Feel free to extend the example above by picking any of the additional tasks to \u0026quot;add-on\u0026quot; to your deck of cards:\n Deck: add a draw function which returns the next card drawn in the deck. Deck: add a shuffle function which gives the deck a random order. (Hint: use the Python random library to do this; feel free to Google or ask for help on how to access these functions) Hand: choose a game of your choice (i.e. Blackjack, Poker, ...) and write a method to either 1) compare two hands or 2) an object method that tells you if this is a winnning hand Game: (this could be a project for later in the class ;)) choose a 2-player card game of your choice and implement a game played by two auto-players ???: feel free to add additional classes or properties that you think make sense or are missing!  ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/python/python_classes_practical/","title":"06/May - Object-oriented Python"},{"body":"  Pre Requisites   Create an account on repl.it\n  Optional( for Windows users only): How to Install Linux Terminal on Windows 10\n  Class Curriculum    Section content Expected time (mins) Pre - Requirements     Digital Career Support Team 10-15 minutes ‚ùå   Recap Session 1 15-20 minutes ‚ùå   Navigation of Linux file system 5-10 minutes ‚ùå   Create, view, manipulate files \u0026amp; folders 5-10 minutes ‚ùå   Class break 10 minutes ‚ùå   Group project: Creating a journal/diary 20-25 minutes repl.it account   Installing software \u0026amp; package managers 10-15 minutes ‚ùå   Summary \u0026amp; Next class overview 10 minutes ‚ùå    Recap Session 1  Questions  Linux and Windows are ... To create a directory in linux we use the command: ... To create a file in linux we use the command: ... Commands like above/before expect us to provide also an ...    Navigating through the Linux File System 1root@abc40003dc7a:/# pwd 2/ 3root@abc40003dc7a:/# cd home/ 4root@abc40003dc7a:/home# pwd 5/home 6root@abc40003dc7a:/home# cd deliergky/ 7root@abc40003dc7a:/home/deliergky# pwd 8/home/deliergky 9root@abc40003dc7a:/home/deliergky# cd .. 10root@abc40003dc7a:/home# pwd 11/home 12root@abc40003dc7a:/home# cd .. 13root@abc40003dc7a:/# pwd 14/ 1root@abc40003dc7a:/home/deliergky# pwd 2/home/deliergky 3root@abc40003dc7a:/home/deliergky# cd ~ 4root@abc40003dc7a:~# pwd 5/root 1$ ls -an 2total 88 3drwxr-xr-x 1 0 0 4096 Mar 8 17:48 . 4drwxr-xr-x 1 0 0 4096 Mar 8 17:48 .. 5drwxr-xr-x 2 0 0 4096 Feb 22 22:47 bin 6drwxr-xr-x 2 0 0 4096 Apr 24 2018 boot 7drwxr-xr-x 5 0 0 360 Mar 8 17:48 dev 8drwxr-xr-x 1 0 0 4096 Mar 8 18:29 etc 9drwxr-xr-x 1 0 0 4096 Mar 8 18:31 home 10drwxr-xr-x 1 0 0 4096 Mar 8 17:59 lib 11drwxr-xr-x 2 0 0 4096 Feb 22 22:46 lib64 12drwxr-xr-x 2 0 0 4096 Feb 22 22:43 media 13drwxr-xr-x 2 0 0 4096 Feb 22 22:43 mnt 14drwxr-xr-x 2 0 0 4096 Feb 22 22:43 opt 15dr-xr-xr-x 127 0 0 0 Mar 8 17:48 proc 16drwx------ 2 0 0 4096 Feb 22 22:47 root 17drwxr-xr-x 1 0 0 4096 Mar 4 02:24 run 18drwxr-xr-x 1 0 0 4096 Mar 4 02:24 sbin 19drwxr-xr-x 2 0 0 4096 Feb 22 22:43 srv 20dr-xr-xr-x 13 0 0 0 Mar 8 17:48 sys 21drwxrwxrwt 1 0 0 4096 Mar 8 18:04 tmp 22drwxr-xr-x 1 0 0 4096 Feb 22 22:43 usr 23drwxr-xr-x 1 0 0 4096 Feb 22 22:47 var Create, view, manipulate files \u0026amp; folders  Create a file:  1root@abc40003dc7a:/home/deliergky# mkdir -p 2021/03  Create a folder:  1root@abc40003dc7a:/home/deliergky# touch 2021/03/08.log  Copy a file:  1root@abc40003dc7a:/home/deliergky# cp 2021/03/09.log 2021/03/10.log 2root@abc40003dc7a:/home/deliergky# cat 2021/03/10.log 3Learning something cool @ReDI  Copy a folder:  1root@abc40003dc7a:/home/deliergky# cp -r 2021/03/ 2021/04 2root@abc40003dc7a:/home/deliergky# ls -an 2021/04/ 3total 16 4drwxr-xr-x 2 0 0 4096 Mar 8 18:58 . 5drwxr-xr-x 4 0 0 4096 Mar 8 18:58 .. 6-rw-r--r-- 1 0 0 0 Mar 8 18:58 07.log 7-rw-r--r-- 1 0 0 0 Mar 8 18:58 08.log 8-rw-r--r-- 1 0 0 30 Mar 8 18:58 09.log 9-rw-r--r-- 1 0 0 30 Mar 8 18:58 11.log 10root@abc40003dc7a:/home/deliergky#  Delete/Remove a file:  1root@abc40003dc7a:/home/deliergky# rm 2021/04/09.log 2root@abc40003dc7a:/home/deliergky# ls -an 2021/04/ 3total 12 4drwxr-xr-x 2 0 0 4096 Mar 8 19:01 . 5drwxr-xr-x 4 0 0 4096 Mar 8 18:58 .. 6-rw-r--r-- 1 0 0 0 Mar 8 18:58 07.log 7-rw-r--r-- 1 0 0 0 Mar 8 18:58 08.log 8-rw-r--r-- 1 0 0 30 Mar 8 18:58 11.log 9root@abc40003dc7a:/home/deliergky#  Delete/Remove a folder:  1root@abc40003dc7a:/home/deliergky# rm 2021/04/ 2rm: cannot remove \u0026#39;2021/04/\u0026#39;: Is a directory 3root@abc40003dc7a:/home/deliergky# rm -r 2021/04/ 4root@abc40003dc7a:/home/deliergky#   View a file:  1root@abc40003dc7a:/home/deliergky# cat 2021/03/08.log 2International Women\u0026#39;s Day (March 8) is a global day celebrating the social, economic, cultural, and political achievements of women. The day also marks a call to action for accelerating women\u0026#39;s equality.  List a folder's content:  1root@abc40003dc7a:/home/deliergky# ls -an 2021/03/ 2total 12 3drwxr-xr-x 2 0 0 4096 Mar 8 18:35 . 4drwxr-xr-x 3 0 0 4096 Mar 8 18:31 .. 5-rw-r--r-- 1 0 0 0 Mar 8 18:35 07.log 6-rw-r--r-- 1 0 0 204 Mar 8 18:41 08.log 7-rw-r--r-- 1 0 0 0 Mar 8 18:34 09.log  Update a file's content:  1root@abc40003dc7a:/home/deliergky# echo \u0026#34;Learning something cool @ReDI\u0026#34; \u0026gt; 2021/03/09.log 2root@abc40003dc7a:/home/deliergky# cat 2021/03/09.log 3Learning something cool @ReDI  Rename a file:  1root@abc40003dc7a:/home/deliergky# mv 2021/03/10.log 2021/03/11.log 2root@abc40003dc7a:/home/deliergky# ls -an 2021/03/ 3total 16 4drwxr-xr-x 2 0 0 4096 Mar 8 18:49 . 5drwxr-xr-x 3 0 0 4096 Mar 8 18:31 .. 6-rw-r--r-- 1 0 0 0 Mar 8 18:35 07.log 7-rw-r--r-- 1 0 0 0 Mar 8 18:44 08.log 8-rw-r--r-- 1 0 0 30 Mar 8 18:47 09.log 9-rw-r--r-- 1 0 0 30 Mar 8 18:48 11.log   Group project: Creating a journal/diary Let's create a simple diary in the following format: 2021/03/09.log\nWhere:\n 2021 represents the year and is a folder 03 represents the month and is a folder 09.log represents the day and is a file  Add also some content to the files ;-)\n 1root@abc40003dc7a:/home/deliergky# ls -alR 2021/ 22021/: 3total 20 4drwxr-xr-x 5 root root 4096 Mar 8 19:05 . 5drwxr-xr-x 3 root root 4096 Mar 8 18:31 .. 6drwxr-xr-x 2 root root 4096 Mar 8 18:49 03 7drwxr-xr-x 2 root root 4096 Mar 8 19:05 04 8drwxr-xr-x 2 root root 4096 Mar 8 19:05 05 9 102021/03: 11total 16 12drwxr-xr-x 2 root root 4096 Mar 8 18:49 . 13drwxr-xr-x 5 root root 4096 Mar 8 19:05 .. 14-rw-r--r-- 1 root root 0 Mar 8 18:35 07.log 15-rw-r--r-- 1 root root 0 Mar 8 18:44 08.log 16-rw-r--r-- 1 root root 30 Mar 8 18:47 09.log 17-rw-r--r-- 1 root root 30 Mar 8 18:48 11.log 18 192021/04: 20total 16 21drwxr-xr-x 2 root root 4096 Mar 8 19:05 . 22drwxr-xr-x 5 root root 4096 Mar 8 19:05 .. 23-rw-r--r-- 1 root root 0 Mar 8 19:05 07.log 24-rw-r--r-- 1 root root 0 Mar 8 19:05 08.log 25-rw-r--r-- 1 root root 30 Mar 8 19:05 09.log 26-rw-r--r-- 1 root root 30 Mar 8 19:05 11.log 27 282021/05: 29total 16 30drwxr-xr-x 2 root root 4096 Mar 8 19:05 . 31drwxr-xr-x 5 root root 4096 Mar 8 19:05 .. 32-rw-r--r-- 1 root root 0 Mar 8 19:05 07.log 33-rw-r--r-- 1 root root 0 Mar 8 19:05 08.log 34-rw-r--r-- 1 root root 30 Mar 8 19:05 09.log 35-rw-r--r-- 1 root root 30 Mar 8 19:05 11.log   Installing software \u0026amp; package managers    Package: collections of files that are bundled together and can be installed and removed as a group\n1root@abc40003dc7a:/# apt show golang 2Package: golang 3Version: 2:1.10~4ubuntu1 4Priority: optional 5Section: devel 6Source: golang-defaults 7Origin: Ubuntu 8Maintainer: Ubuntu Developers \u0026lt;ubuntu-devel-discuss@lists.ubuntu.com\u0026gt; 9Original-Maintainer: Go Compiler Team \u0026lt;pkg-golang-devel@lists.alioth.debian.org\u0026gt; 10Bugs: https://bugs.launchpad.net/ubuntu/+filebug 11Installed-Size: 11.3 kB 12Depends: golang-1.10, golang-doc (\u0026gt;= 2:1.10~4ubuntu1), golang-go (\u0026gt;= 2:1.10~4ubuntu1), golang-src (\u0026gt;= 2:1.10~4ubuntu1) 13Homepage: https://golang.org 14Supported: 5y 15Download-Size: 2896 B 16APT-Sources: http://archive.ubuntu.com/ubuntu bionic/main amd64 Packages 17Description: Go programming language compiler - metapackage   Keeps track of what software is installed\n1root@abc40003dc7a:/# apt list golang 2Listing... Done 3golang/bionic,now 2:1.10~4ubuntu1 amd64 [installed]   Allows you to easily install new software\n1root@abc40003dc7a:/# apt-get install golang 2Reading package lists... Done 3Building dependency tree 4Reading state information... Done 5The following additional packages will be installed: 6binutils binutils-common binutils-x86-64-linux-gnu build-essential cpp cpp-7 dirmngr dpkg-dev fakeroot g++ g++-7 gcc gcc-7 gcc-7-base gnupg gnupg-l10n 7gnupg-utils golang-1.10 golang-1.10-doc golang-1.10-go golang-1.10-race-detector-runtime golang-1.10-src golang-doc golang-go golang-race-detector-runtime 8golang-src gpg gpg-agent gpg-wks-client gpg-wks-server gpgconf gpgsm libalgorithm-diff-perl libalgorithm-diff-xs-perl libalgorithm-merge-perl libasan4 9libasn1-8-heimdal libassuan0 libatomic1 libbinutils libc-dev-bin libc6-dev libcc1-0 libcilkrts5 libdpkg-perl libfakeroot libfile-fcntllock-perl 10libgcc-7-dev libgdbm-compat4 libgdbm5 libglib2.0-0 libglib2.0-data libgomp1 libgssapi3-heimdal libhcrypto4-heimdal libheimbase1-heimdal 11libheimntlm0-heimdal libhx509-5-heimdal libicu60 libisl19 libitm1 libkrb5-26-heimdal libksba8 libldap-2.4-2 libldap-common liblocale-gettext-perl liblsan0 12libmpc3 libmpfr6 libmpx2 libnpth0 libperl5.26 libquadmath0 libreadline7 libroken18-heimdal libsasl2-2 libsasl2-modules libsasl2-modules-db libsqlite3-0 13libssl1.1 libstdc++-7-dev libtsan0 libubsan0 libwind0-heimdal libxml2 linux-libc-dev make manpages manpages-dev netbase patch perl perl-modules-5.26 14pinentry-curses pkg-config readline-common shared-mime-info xdg-user-dirs xz-utils 15Suggested packages: 16binutils-doc cpp-doc gcc-7-locales dbus-user-session libpam-systemd pinentry-gnome3 tor debian-keyring g++-multilib g++-7-multilib gcc-7-doc 17libstdc++6-7-dbg gcc-multilib autoconf automake libtool flex bison gdb gcc-doc gcc-7-multilib libgcc1-dbg libgomp1-dbg libitm1-dbg libatomic1-dbg 18libasan4-dbg liblsan0-dbg libtsan0-dbg libubsan0-dbg libcilkrts5-dbg libmpx2-dbg libquadmath0-dbg parcimonie xloadimage bzr ca-certificates git mercurial 19subversion scdaemon glibc-doc gdbm-l10n libsasl2-modules-gssapi-mit | libsasl2-modules-gssapi-heimdal libsasl2-modules-ldap libsasl2-modules-otp 20libsasl2-modules-sql libstdc++-7-doc make-doc man-browser ed diffutils-doc perl-doc libterm-readline-gnu-perl | libterm-readline-perl-perl pinentry-doc 21readline-doc 22The following NEW packages will be installed: 23binutils binutils-common binutils-x86-64-linux-gnu build-essential cpp cpp-7 dirmngr dpkg-dev fakeroot g++ g++-7 gcc gcc-7 gcc-7-base gnupg gnupg-l10n 24gnupg-utils golang golang-1.10 golang-1.10-doc golang-1.10-go golang-1.10-race-detector-runtime golang-1.10-src golang-doc golang-go 25golang-race-detector-runtime golang-src gpg gpg-agent gpg-wks-client gpg-wks-server gpgconf gpgsm libalgorithm-diff-perl libalgorithm-diff-xs-perl 26libalgorithm-merge-perl libasan4 libasn1-8-heimdal libassuan0 libatomic1 libbinutils libc-dev-bin libc6-dev libcc1-0 libcilkrts5 libdpkg-perl libfakeroot 27libfile-fcntllock-perl libgcc-7-dev libgdbm-compat4 libgdbm5 libglib2.0-0 libglib2.0-data libgomp1 libgssapi3-heimdal libhcrypto4-heimdal 28libheimbase1-heimdal libheimntlm0-heimdal libhx509-5-heimdal libicu60 libisl19 libitm1 libkrb5-26-heimdal libksba8 libldap-2.4-2 libldap-common 29liblocale-gettext-perl liblsan0 libmpc3 libmpfr6 libmpx2 libnpth0 libperl5.26 libquadmath0 libreadline7 libroken18-heimdal libsasl2-2 libsasl2-modules 30libsasl2-modules-db libsqlite3-0 libssl1.1 libstdc++-7-dev libtsan0 libubsan0 libwind0-heimdal libxml2 linux-libc-dev make manpages manpages-dev netbase 31patch perl perl-modules-5.26 pinentry-curses pkg-config readline-common shared-mime-info xdg-user-dirs xz-utils 320 upgraded, 100 newly installed, 0 to remove and 0 not upgraded. 33Need to get 110 MB of archives. 34After this operation, 496 MB of additional disk space will be used. 35Do you want to continue? [Y/n]   Upgrade software to newer versions,\n1root@abc40003dc7a:/# apt-get upgrade golang 2Reading package lists... Done 3Building dependency tree 4Reading state information... Done 5golang is already the newest version (2:1.10~4ubuntu1). 6Calculating upgrade... Done 70 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.   Remove software that you previously installed\n1root@abc40003dc7a:/# apt-get remove golang 2Reading package lists... Done 3Building dependency tree 4Reading state information... Done 5The following packages were automatically installed and are no longer required: 6binutils binutils-common binutils-x86-64-linux-gnu build-essential cpp cpp-7 dirmngr dpkg-dev fakeroot g++ g++-7 gcc gcc-7 gcc-7-base gnupg gnupg-l10n 7gnupg-utils golang-1.10 golang-1.10-doc golang-1.10-go golang-1.10-race-detector-runtime golang-1.10-src golang-doc golang-go golang-race-detector-runtime 8golang-src gpg gpg-agent gpg-wks-client gpg-wks-server gpgconf gpgsm libalgorithm-diff-perl libalgorithm-diff-xs-perl libalgorithm-merge-perl libasan4 9libasn1-8-heimdal libassuan0 libatomic1 libbinutils libc-dev-bin libc6-dev libcc1-0 libcilkrts5 libdpkg-perl libfakeroot libfile-fcntllock-perl 10libgcc-7-dev libgdbm-compat4 libgdbm5 libglib2.0-0 libglib2.0-data libgomp1 libgssapi3-heimdal libhcrypto4-heimdal libheimbase1-heimdal 11libheimntlm0-heimdal libhx509-5-heimdal libicu60 libisl19 libitm1 libkrb5-26-heimdal libksba8 libldap-2.4-2 libldap-common liblocale-gettext-perl liblsan0 12libmpc3 libmpfr6 libmpx2 libnpth0 libperl5.26 libquadmath0 libreadline7 libroken18-heimdal libsasl2-2 libsasl2-modules libsasl2-modules-db libsqlite3-0 13libssl1.1 libstdc++-7-dev libtsan0 libubsan0 libwind0-heimdal libxml2 linux-libc-dev make manpages manpages-dev netbase patch perl perl-modules-5.26 14pinentry-curses pkg-config readline-common shared-mime-info xdg-user-dirs xz-utils 15Use \u0026#39;apt autoremove\u0026#39; to remove them. 16The following packages will be REMOVED: 17golang 180 upgraded, 0 newly installed, 1 to remove and 0 not upgraded. 19After this operation, 11.3 kB disk space will be freed. 20Do you want to continue? [Y/n] Y 21(Reading database ... 21037 files and directories currently installed.) 22Removing golang (2:1.10~4ubuntu1) ...   Downloaded from software repositories(repos, sources, feeds)\n1root@abc40003dc7a:/# apt-get update 2Get:1 http://archive.ubuntu.com/ubuntu bionic InRelease [242 kB] 3Get:2 http://security.ubuntu.com/ubuntu bionic-security InRelease [88.7 kB] 4Get:3 http://security.ubuntu.com/ubuntu bionic-security/multiverse amd64 Packages [24.5 kB] 5Get:4 http://archive.ubuntu.com/ubuntu bionic-updates InRelease [88.7 kB] 6... 7Fetched 22.0 MB in 27s (810 kB/s) 8Reading package lists... Done   Varies by Operating System \u0026amp; Distribution\n  MacOS: brew install golang, AppStore\n  Windows: PackageManagement, Chocalatey...\n   Linux: yum, apt-get, zypper\n     Extra resources  Linux Filesystem Hierarchy - Part 1 Linux Filesystem Hierarchy - Part 2 Briana's Bash Tutorial: How to Use the Command Line in Linux, Windows, and Mac A linux command line primer Learn Enough Command Line to Be Dangerous Linux command line basic cheat sheet The Linux Command Handbook Package Managers What is a package manager in Linux   Next class preparation Version Control with GIT ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/command/command_line_part2/","title":"09/March/2021 - Command Line Basics Part 2"},{"body":"Pre Requisites 1. Install Git üíæ First! Check if you already have git installed, open your command line and run:\n1git --version If you see something like the following output then you already have git installed:\n1git version 2.x.x Otherwise, here are instructions to install Git:\n For Windows For MacOS  2. Sign up to GitHub üöÄ Sign up here: https://github.com/join\nWhy?\n We will use it in the class to store our code It can be used to collaborate with others It can be used to showcase your work  3. Watch the first 8:07 minutes of this video üìΩÔ∏è This Git and GitHub Tutorial For Beginners by Amigoscode.\nWhat you will learn:\n An overview of why Git and Github are so useful  You can watch the rest if you want, but for the purpose of the class, the first eight minutes are sufficient.\n4. Read this üìö Read this Introduction to Version Control and Git by CodeBar.\nWhat you will learn:\n What is version control? Why do we use it? Overview of Git as a version control system Overview of GitHub as a place to store code Common terminology   Class Curriculum    Section content Expected time (mins) Pre - Requirements     Review Learnings from Preparatory Materials 15 minutes video + article   Lesson Goals 5-10 minutes ‚ùå   Make a local repository and first commits 10-15 minutes git   Create a GitHub repository and push commits 10-15 minutes git and github   Class break 10 minutes ‚ùå   Make a branch and open a pull request 15-20 minutes git and github   Fork and clone a GitHub repository 10-15 minutes git and github   Wrap-up and next class overview 10-15 minutes ‚ùå    Lesson Goal Use Git and GitHub to make a profile README for your GitHub account.\n1. Create a local repository First, create a new directory and give it the same name as your GitHub username (the reason for this will become clear later):\n1mkdir \u0026lt;github-username\u0026gt; Move into that directory\n1cd \u0026lt;github-username\u0026gt; Initialise an empty git repository with the branch name, main:\n1git init -b main Now you have an empty local repository üéâ\n2. Make a commit Next, we want to make changes within this repository and save (or commit!) them.\nA commit is a way to save changes you‚Äôve made to a repository. It is powerful because it allows you to keep snapshots of your repository at any given time.\nFirst, we create a new file:\n1touch README.md This is a README file using markdown syntax.\nNext, we will add some text to this file to say hello to the world.\n1echo \u0026#34;# Hello, my name is \u0026lt;your name\u0026gt; :)\u0026#34; \u0026gt; README.md Then view the status of the current git repository:\n1git status The README.md file will appear in the untracked files. We want to track this file and add it to the staging area so it will be included in the next commit:\n1git add . Then check the status again.\nLet's commit this file with a helpful commit message:\n1git commit -m \u0026#34;Initialise repository with a README\u0026#34; Finally, we can take a look at the log, to view metadata about our previous commits:\n1git log 3. Create a remote repository (on GitHub) Sign in to GitHub: https://github.com\nOn the top navigation bar, click the + button and select ‚ÄòNew repository‚Äô\nCreate a new repository: Give the repository the same name as your username, make sure it is ‚ÄòPublic‚Äô then click ‚ÄòCreate repository‚Äô.\n4. Push the contents of your local repository to the remote Now we want to associate our local repository with the one we have created on GitHub and push the contents of our local repository to GitHub.\nConnect the local repository with the remote repository:\n1git remote add origin https://github.com/\u0026lt;user\u0026gt;/\u0026lt;repo\u0026gt;.git Verify that the remote was added:\n1git remote -v You should see the following output:\n1origin\thttps://github.com/\u0026lt;user\u0026gt;/\u0026lt;repo\u0026gt;.git (fetch) 2origin\thttps://github.com/\u0026lt;user\u0026gt;/\u0026lt;repo\u0026gt;.git (push) Finally push your changes to GitHub:\n1git push -u origin main Check your GitHub repository to see if it contains your README file, and look at your profile to see that it is displayed!\nWell done on sharing your first repository üéâ\n5. Create a branch Now we want to make some changes to our README, but we don't want to commit them to the main branch yet. Therefore, we will use another branch.\nCreate a new branch, called ‚Äòadd-more-detail‚Äô:\n1git checkout -b add-more-detail Open the README.md file in a text editor (e.g. Notepad or TextEdit) and make some changes. Here is a template you can use:\n1# Hello, my name is \u0026lt;your name\u0026gt; üëã 2 3Pronouns: \u0026lt;your pronouns\u0026gt; 4Learning: command line, Git, HTML, CSS, Javascript, Python 5Interests: \u0026lt;your interests\u0026gt; You can be as creative as you want by adding text, emoji, images or gifs (and more!).\nOnce you have made some changes it is time to add and commit them:\n1git add . 2git commit -m \u0026#34;Add some new information\u0026#34; Then push the branch with the changes to the remote repository:\n1git push origin add-more-detail Take a look at your README profile - has it been updated?\n6. Create a pull request Let's say we want to get feedback on the changes we've made. We can do this with a Pull Request.\nGo to GitHub and view your branch. Select 'Create new pull request'.\nAssign the person you are paired with to review your pull request.\nReviewing a pull request If somebody has requested your feedback, you can use this as an opportunity to:\n Ask questions and provide feedback about the changes Approve the changes Request further changes  Once you have reviewed the changes, click Review changes and then Approve.\nMerge a pull request Once your pull request has been reviewed, you can merge it so that the main branch is updated with your changes.\nOn your pull request, go to the bottom of the page and select Rebase and merge.\nYou can now go to your command line, checkout the main branch and pull the changes so that your local main branch is up to date:\n1git checkout main 2git pull origin main Finally, take a look at your updated GitHub profile README and celebrate what you've achieved!\n7. Fork and clone a repository Note üìù\nThis task is unrelated to the previous tasks, but has been included because these features are useful.\nA fork is a copy of someone else‚Äôs remote repository, sometimes you will make a fork to build on someone else's work.\nNavigate to https://github.com/octocat/Spoon-Knife\nOn the top-right, select 'Fork'.\nOnce you have forked the repository, we can clone it to download a copy of the repository to your local machine. On the repository, select Code and copy the HTTPS link. Then navigate to your terminal and run:\n1git clone https://github.com/\u0026lt;user\u0026gt;/\u0026lt;repo\u0026gt;.git 8. Follow-up activity: make improvements to your GitHub Profile README There are plenty of wonderful examples out there, take a look at the examples in this repository for inspiration: https://github.com/abhisheknaiidu/awesome-github-profile-readme\nGlossary    Term Meaning     repository (also known as repo) the place where code is stored.   commit a snapshot of changes made to a repository   branch a pointer to a commit   remote a repository that is hosted by a web service   origin the remote repository associated with a project   head the last commit in the checked-out branch   status the current state of the git repository   pull get the latest changes from the remote repository on your local repo   push push the latest changes from the local repository to the remote repo   pull request (also known as a PR) lets you get feedback on your code changes   staging area the intermediate area where a change is added before it is commit    Extra resources  Writing a good commit messages, by FreeCodeCamp Markdown cheatsheet Learning git branching, by pcottle Dangit, git, by @ksylor (available in multiple languages) Learn git concepts, not Commands, by Nico Riedmann A visual introduction to Git, by Ashley Keller   Next class preparation Review Git and Command Line; Web Overview ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/git/git_and_github/","title":"11/March - Version Control with Git and GitHub"},{"body":"Prerequisites  [Optional]: Finish the materials from the previous lesson   Class Curriculum    Section content Expected time (mins) Pre - Requirements     Lesson Goals 5 minutes ‚ùå   Check-in on questions from last class 5 minutes ‚ùå   Kahoot 10 - 15 minutes ‚ùå   Exercises in groups 40 minutes ‚ùå   Break 10 minutes ‚ùå   Exercises in groups 50 minutes ‚ùå   Check-out 10 minutes ‚ùå    Check-In  What was particularly challenging last class? Are there any remaining questions from last class?  Kahoot Let's do a Kahoot to check our understanding of the concepts we've learned so far.\nLesson Goals Build a text adventure game in Python and practice:\n Object-oriented programming concepts Flow control Methods and functions  Introduction We are going to use Python to create a text adventure which runs on the command line.\nThe story will follow you as the main character, and your attempt to travel out of Berlin to visit M√ºggelsee on a sunny day.\nYou will have to choose a mode of transport and will encounter different obstacles on your way to the lake. The modes of transport that you can choose are walking, bicycle or S-Bahn.\nBased on the choices you make, the game will have a different outcome.\nDEMO\n1. Setup project  Create a new folder called python_adventures In the folder, create a new file called, adventure.py  2. Classes and Objects Brainstorm what you would want to represent as objects in order to create a story which contains a character and different modes of transport.\n What classes can you come up with? What instance attributes could they have? What class methods could they have?    SOLUTION  There are many ways that you could solve this, which means there is no exact right or wrong answer. However, for the purpose of this exercise, we will create the following:\n A Story class, with three methods: start, middle, end. A Character class, with two instance attributes: name and transportation. A Transportation class, with two instance attributes: speed and description, and with one method: encounter_obstacles Since we have three methods of transportation, we will have three subclasses of transportation: Walk, Bicycle and SBahn.   i. Go ahead and create these classes and methods in adventure.py. For now, leave the methods empty.\n  SOLUTION - Story Class  1class Story: 2 def __init__(self): 3 pass 4 5 def start(self): 6 pass 7 8 def middle(self, character, transportation): 9 pass 10 11 def end(self, character): 12 pass 13 14 new_story = Story() 15 new_story.start()    SOLUTION - Character Class  1class Character: 2 def __init__(self, name, transportation): 3 self.name = name 4 self.transportation = transportation  When defining the Bicycle, Walk and SBahn classes, you can already set the following name, speed, and description:\nWalk\nname: \u0026quot;walking\u0026quot;\nspeed: \u0026quot;slow\u0026quot;\ndescription: \u0026quot;It is a long and tiring walk, but scenic.üö∂\u0026quot;\nBicycle\nname: \u0026quot;bicycle\u0026quot;\nspeed: \u0026quot;average\u0026quot;\ndescription: \u0026quot;Efficient and green - cycling is a great way to explore! üö≤\u0026quot;\nS-Bahn\nname: \u0026quot;S-Bahn\u0026quot;\nspeed: \u0026quot;fast\u0026quot;\ndescription: \u0026quot;The S-Bahn is busy with people getting out of the city today, but you can read a book, listen to music and gaze out the window. üöâ\u0026quot;\n  SOLUTION - Transportation Classes  1class Transportation: 2 def __init__(self, name, speed, description, obstacles): 3 self.name = name 4 self.speed = speed 5 self.description = description 6 7 def encounter_obstacles(self): 8 pass 9 10 11class Walk(Transportation): 12 def __init__(self): 13 self.name = \u0026#34;walking\u0026#34; 14 self.speed = \u0026#34;slow\u0026#34; 15 self.description = \u0026#34;It is a long and tiring walk, but scenic.üö∂\u0026#34; 16 17 def encounter_obstacles(self): 18 pass 19 20 21class SBahn(Transportation): 22 def __init__(self): 23 self.name = \u0026#34;sbahn\u0026#34; 24 self.speed = \u0026#34;fast\u0026#34; 25 self.description = \u0026#34;The S-Bahn is busy with people getting out of the city today, but you can read a book, listen to music and gaze out the window. üöâ\u0026#34; 26 27 def encounter_obstacles(self): 28 pass 29 30 31class Bicycle(Transportation): 32 def __init__(self): 33 self.name = \u0026#34;bicycle\u0026#34; 34 self.speed = \u0026#34;average\u0026#34; 35 self.description = \u0026#34;Efficient and green - cycling is a great way to explore! üö≤\u0026#34; 36 37 def encounter_obstacles(self): 38 pass  ii. At the end of the file, create a new_story object from the Story class. Call the start method on new story, so that a new story is created when the program is run.\n3. Create the story introduction The introduction of the story will always be the same. We should ask the player for their name, introduce the story with some opening text and ask the player which mode of transport they would like to take.\ni. First, we want to create an introduction for the player to start the story. Please copy and paste the following function into python_adventure.py. This function should be kept outside of any class. (Ordinarily you should not copy and paste from tutorials, but in this case there is a lot of text which is not useful for you to type out):\n1def introduction_text(name): 2 print(\u0026#34;\u0026#34;) 3 print( 4 \u0026#34;It\u0026#39;s a beautiful summer\u0026#39;s day in Berlin, and you are stuck in Hermannplatz :(\u0026#34; 5 ) 6 print( 7 \u0026#34;You don\u0026#39;t want to be here. It is too noisy, there is too much traffic and all this concrete makes it uncomfortably warm\u0026#34; 8 ) 9 print(\u0026#34;The lakes are calling...\u0026#34;) 10 print(\u0026#34;\u0026#34;) # The purpose of this print statement is to make the CLI output easier to read 11 print(f\u0026#34;Well {name}, today we go to M√ºggelsee!\u0026#34;) 12 print(\u0026#34;\u0026#34;) ii. Go to the start() method of the Story class. Using the input() method, ask the player what their name is. Assign their input to a variable, name.\niii. In the next line of start(), call the function introduction_text and pass in the name variable as an argument.\niv. In the next line of start(), ask the user how they plan to travel to the lake using the string \u0026quot;The only question is, how should we go to the lake? a. walking, b. bicycle or c. sbahn\\n\u0026quot;. Assign the input to a variable called choice.\nv. In the next part of start(), we will be using an if, elif, else statement to check the choice. If it is a, create a new variable called transportation and assign the object Walk() to it, if choice is b assign the object Bicycle() to transportation, otherwise if the choice is c assign the object SBahn() to transportation. Use the else branch to catch the scenario where a player inputs none of these options by printing a message to the player and exiting.\nvi. In the next part of start, we want to create a Character object, using the name and transportation choice that the player has given us already.\nvii. Finally, to complete this method, we will want to call the method to start the next part of the story middle, and pass the character and transportation objects to it.\n  SOLUTION - START  1def introduction_text(name): 2 print(\u0026#34;\u0026#34;) 3 print( 4 \u0026#34;It\u0026#39;s a beautiful summer\u0026#39;s day in Berlin, and you are stuck in Hermannplatz :(\u0026#34; 5 ) 6 print( 7 \u0026#34;You don\u0026#39;t want to be here. It is too noisy, there is too much traffic and all this concrete makes it uncomfortably warm\u0026#34; 8 ) 9 print(\u0026#34;The lakes are calling...\u0026#34;) 10 print(\u0026#34;\u0026#34;) 11 print(f\u0026#34;Well {name}, today we go to M√ºggelsee!\u0026#34;) 12 print(\u0026#34;\u0026#34;) 13 14class Story: 15 def __init__(self): 16 pass 17 18 def start(self): 19 name = input(\u0026#34;What is your name?\\n\u0026#34;) 20 introduction_text(name) 21 22 choice = input( 23 \u0026#34;The only question is, how should we go to the lake? a. walking, b. bicycle or c. sbahn\\n\u0026#34; 24 ) 25 if choice == \u0026#34;a\u0026#34;: 26 transportation = Walk() 27 elif choice == \u0026#34;b\u0026#34;: 28 transportation = Bicycle() 29 elif choice == \u0026#34;c\u0026#34;: 30 transportation = SBahn() 31 else: 32 print(\u0026#34;You have not selected a valid option!\u0026#34;) 33 exit() 34 35 character = Character(name, transportation) 36 37 self.middle(character, transportation)  Run the program and see what happens\n4. The middle of the story The middle or content of the story will vary depending on the mode of transportation that the user takes. We will use the middle() method as a way to begin this in the same way for each mode of transport, and then use the encounter_obstacles() method of each transport type to create a different storyline.\ni. To begin the middle() of the story, we print a message to the player to confirm their choice of transport and share some details about it. In the first line of middle(), print the following message to the player: \u0026quot;Travelling by {transportation.name} is {transportation.speed}. {transportation.description}\\n\u0026quot; (Hint: you will need to use an f-string).\nii. Next call the encounter_obstacles() method of the transportation object that you passed into middle() method.\niii. Lastly, call the end() method which will trigger the end of the story.\nWe haven't yet created any obstacles for the player, we will do this in Section 6.\n  SOLUTION - MIDDLE  1 def middle(self, character, transportation): 2 print( 3 f\u0026#34;Travelling by {transportation.name} is {transportation.speed}. {transportation.description}\\n\u0026#34; 4 ) 5 transportation.encounter_obstacles() 6 self.end(character)  Run the program and see what happens!\n5. End of the story We will reach the end of the story when the player's character has reached the lake. When this happens, we will print a message to the player and the game will end.\ni. Print a message to the player, which says: \u0026quot;Yay, {character.name}! You reached the lake by {character.transportation.name}. Time to swim and spend the rest of the day snoozing in the sun ‚õµ\u0026quot;\n  SOLUTION - END  1 def end(self, character): 2 print( 3 f\u0026#34;Yay, {character.name}! You reached the lake by {character.transportation.name}. Time to swim and spend the rest of the day snoozing in the sun ‚õµ\u0026#34; 4 )  Run the program and see what happens!\n6. Fill in the obstacles of the story Each story will have some obstacles, and depending on the player's choice when encountering these obstacles, the character will or will not make it to the lake.\nWalk There is one obstacle when walking. Since it is a long walk from Hermannplatz, if the player leaves too late it will be dark when they arrive.\ni. Write code to ask the player the following question: \u0026quot;What time do you leave Hermannplatz? a. Before 14:00 b. After 14:00\\n\u0026quot;. Assign their input to a variable called choice.\nii. If the choice is a, print the following message: \u0026quot;You are very tired when you get to the lake and fall asleep.\\n While you are asleep a wild boar runs off with your belongings üêó\u0026quot;\niii. If the choice is b, print the following message: \u0026quot;Oh no, it is too late. By the time you reach the lake, it is already dark and time to go home. üåâ :(\u0026quot; and exit the program.\nQuestion: what happpens if the choice is neither a nor b?\n  SOLUTION - WALK OBSTACLES  1 def encounter_obstacles(self): 2 choice = input( 3 \u0026#34;What time do you leave Hermannplatz? a. Before 14:00 b. After 14:00\\n\u0026#34; 4 ) 5 if choice == \u0026#34;a\u0026#34;: 6 print( 7 \u0026#34;You are very tired when you get to the lake and fall asleep.\\nWhile you are asleep a wild boar runs off with your belongings üêó\u0026#34; 8 ) 9 if choice == \u0026#34;b\u0026#34;: 10 print( 11 \u0026#34;Oh no, it is too late. By the time you reach the lake, it is already dark and time to go home. üåâ :(\u0026#34; 12 ) 13 exit()  Bicycle There are two obstacles that the player can encounter while cycling: the cobblestones of Berlin and seeing your friends having fun in Neuk√∂lln.\ni. Write code to ask the player the following question: \u0026quot;You are cycling past the Landwehr canal and spot your friend in a boat on the canal.\\nWhat do you do? a. Stop and join the boat party or b. wave and continue\\n\u0026quot;. Assign their input to a variable called choice.\nii. If the choice is a, do nothing and let the program continue.\niii. If the choice is b, print the following message: \u0026quot;Who needs the lake? Put on some sunglasses and bob along the canal all day.üö£\u0026quot; and exit the program.\niv. Write code to ask the player the following question: \u0026quot;Uh oh, another cobble stone road gives you a flat tire.\\nWhat do you do? a. Fix it b. Go home\\n\u0026quot;. Assign their input to a variable called choice.\nv. If the choice is a, do nothing and let the program continue.\nvi. If the choice is b, print the following message: \u0026quot;That's all the adventure for today! The lake will have to wait for another day\u0026quot; and exit the program.\n  SOLUTION - BICYCLE OBSTACLES  1 def encounter_obstacles(self): 2 choice = input( 3 \u0026#34;You are cycling past the Landwehr canal and spot your best friend in a boat on the canal.\\nWhat do you do? a. Stop and join the boat party or b. wave and continue\\n\u0026#34; 4 ) 5 if choice == \u0026#34;b\u0026#34;: 6 print( 7 \u0026#34;Who needs the lake? Put on some sunglasses and bob along the canal all day.üö£\u0026#34; 8 ) 9 exit() 10 if choice == \u0026#34;a\u0026#34;: 11 pass 12 13 choice = input( 14 \u0026#34;Uh oh, another cobble stone road gives you a flat tire.\\nWhat do you do? a. Fix it b. Go home\\n\u0026#34; 15 ) 16 if choice == \u0026#34;a\u0026#34;: 17 pass 18 if choice == \u0026#34;b\u0026#34;: 19 print( 20 \u0026#34;That\u0026#39;s all the adventure for today! The lake will have to wait for another day\u0026#34; 21 ) 22 exit()  S-Bahn There is one obstacle when on the S-Bahn: the player misses there stops and ends up at Erkner.\ni. Write code to ask the player the following question: \u0026quot;You miss your stop and end up in Erkner. What do you do? a. Stay there b. Get back on the s-bahn\\n\u0026quot;. Assign their input to a variable called choice.\nii. v. If the choice is a, do nothing and let the program continue.\niii. If the choice is b, print the following message: \u0026quot;Great! Spend the rest of the day exploring the sights and sounds around Erker!\u0026quot; and exit the program.\n  SOLUTION - WALK OBSTACLES  1 def encounter_obstacles(self): 2 choice = input( 3 \u0026#34;You miss your stop and end up in Erkner. What do you do? a. Stay there b. Get back on the s-bahn\\n\u0026#34; 4 ) 5 if choice == \u0026#34;b\u0026#34;: 6 print( 7 \u0026#34;Great! Spend the rest of the day exploring the sights and sounds around Erker!\u0026#34; 8 ) 9 if choice == \u0026#34;a\u0026#34;: 10 pass  7. Run the program Ta-da, you have finished developing the program! Now trying playing the game.\n8. Follow-up ideas  Add another mode of transport that the player can take Add more obstacles and choices for the player for each mode of transport Use the things you've learned to make an entirely different story  Continue Learning  Get involved with the Python Community. Organisations and meetups: PyLadies Berlin, PyBerlin and more.  ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/python/practical_python/","title":"11/May - Adventures in Python"},{"body":"Pre Requisites None for today!\n Class Curriculum    Section content Expected time (mins) Pre - Requirements     Check-in and questions from last class 5 minutes ‚ùå   Lesson Goals 5 minutes ‚ùå   Python Overview 15 minutes ‚ùå   Hands-on Python exercise (in pairs) 45-60 minutes ‚ùå   Break 10 minutes ‚ùå   Synthesis of Python Concepts from Exercise 15-30 minutes ‚ùå   (Possible) \u0026quot;Hello World\u0026quot; in Python Exercise 20 minutes ‚ùå   Check-out 5 minutes ‚ùå    Lesson Goal Have a high-level idea of what Python is and start getting comfortable reading and writing basic statements in this programming language.\n0. Python Overview Q\u0026amp;A Intro   What is Python?\nPython is a high-level programming language\n  What is a high-level programming language?\n \u0026quot;program\u0026quot;: writing instructions for your computer to execute; this could be a simple \u0026quot;calculator\u0026quot; program that adds two numbers, it could be something that prints out values to your terminal or sends information to a remote server/web-page, etc. \u0026quot;programming language\u0026quot;: the language (set of words used according to specific syntax rules) that lets you write a program that can be executed on a machine \u0026quot;high-level\u0026quot;: there are different ways of interacting with the computer; at the lowest level, this is the binary code that computers can read and execute. Above that are different levels of closeness to machine-readable code: directly above is machine or assembly code that is slightly more readable but also compiles into this binary code for computers. There are more levels above this, and at the highest level (like Python), code words in human-readable languages (like English) represent large series of simple assembly steps. You can write some complex set of loops, etc. and the \u0026quot;Python interpreter\u0026quot; \u0026quot;interprets\u0026quot; these instructions in Python, turning them into something that the machine can comprehend. You don't have to worry about managing how your computer stores memory (more on this later), since Python takes care of this.    What are terms that you may hear when discussing programs and programming languages?\n \u0026quot;abstraction\u0026quot;: something that has usually \u0026quot;hidden away\u0026quot; the inner complexities of a system; usually simplifies how we understand something. \u0026quot;under the hood\u0026quot;: the details of how something works when you look past the \u0026quot;layers of abstraction\u0026quot; (see above); digging into the numerous, smaller steps of how a program, application, etc. actually functions \u0026quot;black box\u0026quot;: a system whose inner-workings you do not understand; all you can see are the inputs and outputs. [ inputs -\u0026gt; BLACK_BOX -\u0026gt; outputs ]    How and in what fields is Python typically used?\n Data science: Python has many libraries (including pandas) that are useful for doing data analysis or statistics. Can be very efficient in how fast it computes data, and is for many people easier to read compared with other programming languages. Machine Learning, Deep Learning: Python notebooks and libraries (including TensorFlow and keras) make it easy and clear to create neural networks and train machine learning models for prediction and generation tasks. Running systems and infrastructure: SREs (Site Reliability Engineers) often use python as a scripting language to quickly examine, configure, and maintain infrastructure systems. Compared with other languages, it takes little code/time to write and execute a function in Python.    What examples of things you can do with Python?\n Write programs of all kinds! Write a backend server for your web application, to process (receive, send) HTTP requests Use pandas to analyze a data set Create and train a neural network or other machine learning/deep learning model ???    What questions do you have so far?\n  1. Hands-on Python Activity Go through this Exercise at your own pace in your groups. Make sure you are all doing this together and asking questions.\nThere is no rush -- it is completely fine not to finish the whole exercise!!\nThe purpose here is to start getting familiar with Python syntax through trial-and-error (so getting things wrong is completely expected and part of this process!). After this section, we will go through the activity as a group and discuss our observations of rules and concepts from Python that we took from the exercise.\nWhen you get an answer wrong, make sure you look at the correct answer below and try to understand what the expression means from the correct answer.\nRefresher of some math operators that you will see:\n +: addition -: subtraction *: multiplication a \u0026lt; b: less than --\u0026gt; \u0026quot;a is less than b\u0026quot; a \u0026gt; b: greater than --\u0026gt; \u0026quot;a is greater than b\u0026quot;  2. Python Concepts - Sharing \u0026amp; Synthesizing We will go over many of these concepts in more detail in the coming weeks, so no problem if it takes a little time for them to make sense!\nOne note about the code snippets below: in Python, we can write comments by using the # symbol; anything after this symbol is not interpreted as code or executed. This can be a really convenient way to write notes to yourselves (or future developers!) when trying to understand code you wrote.\n What observations did you have from the exercise?  Data Types   What is a data type?\n  What are examples of different data types that you saw?\n strings (ex: 'asdf', 'hello my name is x', 'a', '123') integers (ex: 1, -100, 1383234) floats (floating point values) (ex: 1.0, -100.1234, 0.0000003, 1e5) booleans (ex: True, False) lists (ex: [3, 1, 'r', 'e'], [], [3.2, 3, 4.5]) functions (ex: def my_function (a, b): ...)  (more data types that weren't shown in this exercise will be discussed in later sessions)\n  Variables   What is a variable? What's an example?\nSome word (starting with a letter, and can contain letters, numbers, and underscore _) that represents some value. We set the value of a variable with =, for example: test_var = 10 sets the variable test_var to be equal to the value of 10. Setting the value of a variable is often called assigning a variable.\n  Iterables (lists, strings, ...)   What does the len keyword do? i.e. len('asdf') or len([1,2,3,4])\nlen gets the length of any \u0026quot;iterable\u0026quot; -- any \u0026quot;thing\u0026quot; that is made up of other things that you can \u0026quot;iterate\u0026quot; or count through: list, string, tuple, dictionary, set...\n  What does the [#] syntax do?\nThis indexes into an iterable and gets you the # value of it. Note that the \u0026quot;first\u0026quot; index is \u0026quot;0\u0026quot;, because we 0-index in Python. For example:\n1 a = \u0026#39;asdf\u0026#39; 2 b = [1,2,3,4] 3 a[0] 4 # outputs: -\u0026gt; \u0026#39;a\u0026#39; 5 b[3] 6 # outputs: -\u0026gt; 4   Booleans and conditions   What does the == symbol mean? What about !=?\n== is \u0026quot;equals\u0026quot;, != is \u0026quot;does not equal\u0026quot;.\n  What is the difference between = and ==?\n= is for assigning some value to a variable, while == is for testing for equality between the two sides.\n  What does the if keyword do?\nThis is a conditional statement: if CONDITION: means: \u0026quot;if CONDITION evaluates to True, then execute the code that follows directly after the statement\u0026quot;\n  How about an if ... else statement?\n1if CONDITION_A: 2 STATEMENT_A 3else: 4 STATEMENT_B In this example, \u0026quot;if CONDITION_A evaluates to True, then execute STATEMENT_A. Otherwise (if CONDITION_A evaluates to False), then execute STATEMENT_B. --\u0026gt;\n  How about if ... elif ... else?\n1if CONDITION_A: 2 STATEMENT_A 3elif: CONDITION_B: 4 STATEMENT_B 5else: 6 STATEMENT_C In this example, \u0026quot;if CONDITION_A evaluates to True, then execute STATEMENT_A only. Otherwise (if CONDITION_A evaluates to False), then check if CONDITION_B evaluates to True and if so, execute STATEMENT_B only. If both CONDITION_A and CONDITION_B evaluate to False, then execute STATEMENT_C. Note that here, we are only ever execute one of the STATEMENT_'s, even if multiple conditions evaluate to True.\n  Functions   What is a function?\n1def my_test_function(a): 2 return a A function is a sequence of steps or tasks (written in a block of code), which may or may not take in arguments. Whenever we call a function, we execute this defined set of steps (with any arguments passed in). The above example function takes in some value and simply returns, or gives us back, this value when we call it like so: my_test_function(12) # evaluates to 12\n  3. (if there is time) \u0026quot;Hello, World!\u0026quot; in Python It's something of a tradition in the Computer Science world when learning a new language to write code that outputs \u0026quot;Hello, World!\u0026quot;. Check out this Wikipedia article for more information on why :).\nFor today, go ahead and try that out in this Python playground, which will allow you to execute some test code by clicking on the Play button (triangle) on the top of the console window.\nExample solutions will be posted in a few days :)\nTask 0: write code that outputs \u0026quot;Hello, World!\u0026quot; Tip: there is a built-in print function in Python that takes some input and outputs this to standard out (STDOUT), which is in this case the right side of the playground console. (Recall that the # stands for a \u0026quot;comment\u0026quot; in Python, meaning that this line is just a \u0026quot;note\u0026quot; to yourself and does not need to be included.)\nExample usage:\n1print(\u0026#34;asdf asdf\u0026#34;) 2# outputs -\u0026gt; asdf asdf 3print(\u0026#34;my name is\u0026#34;, \u0026#34;Robot\u0026#34;) 4# outputs -\u0026gt; my name is Robot   A Solution:\n1print(\u0026#34;Hello, World!\u0026#34;) Task 1: create and call a function that prints \u0026quot;Hello, World!\u0026quot; Tip: Modify the code you wrote in the previous task so that this happens within a function that you define.  A Solution:\n1def hello_world(): 2 print(\u0026#34;Hello, World!\u0026#34;) 3 4# Let\u0026#39;s call the function and print this 5print(hello_world()) Task 2: create a function that returns the string \u0026quot;Hello, World!\u0026quot;. Call this function and print the output. A solution:\n1def hello_world(): 2 return \u0026#34;Hello, World!\u0026#34; 3 4print(hello_world()) Task 3: modify your function so you can greet a specific name: \u0026quot;Hello, Person\u0026quot; In other words:\n1my_hello_world(\u0026#34;Noor\u0026#34;) 2# expected output -\u0026gt; \u0026#34;Hello, Noor\u0026#34; A solution:\n1def hello_world(name): 2 return (\u0026#34;Hello,\u0026#34;, name) 3 4print(hello_world(\u0026#34;Noor\u0026#34;)) 5# output -\u0026gt; \u0026#34;Hello, Noor\u0026#34; 6print(hello_world(\u0026#34;Jose\u0026#34;)) 7# output -\u0026gt; \u0026#34;Hello, Jose\u0026#34; Another solution:\n1def hello_world(name): 2 print(\u0026#34;Hello,\u0026#34;, name) 3 4hello_world(\u0026#34;Noor\u0026#34;) 5# output -\u0026gt; \u0026#34;Hello, Noor\u0026#34; 6hello_world(\u0026#34;Jose\u0026#34;) 7# output -\u0026gt; \u0026#34;Hello, Jose\u0026#34; Additional practice (all optional)  Modify your \u0026quot;greeter\u0026quot; using any of the concepts we discussed; perhaps include a conditional expression (i.e. only greet IF ...). Try to write and evaluate any Python expressions that you saw in the silent teacher activity in the playground. Write your own function to return or print some value.  Extra resources and references from class  Python playground \u0026quot;Hello, World!\u0026quot; on Wikipedia Silent Teacher exercise from class Python foundation docs List of some open source Python projects  ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/python/intro_to_python/","title":"15/April - Introduction to Python"},{"body":"We will spend the first part of class going over how the internet works conceptually and then spend the rest of the session doing practical exercises using Git, GitHub, and the command line.\nPrerequisites 1. Watch these Videos These videos from Khan Academy's Internet 101 series will give you a high-level overview of how the internet works. Please try to take notes on the questions below each video; we will go over these in class as well, but they cover the main points from the videos. Write down any other questions you have or anything you don't understand as well! :)\n  IP addresses and DNS - 6:45\n What is the internet? What is an ISP? What is a protocol? What is the Internet Protocol (IP) for? How does it work? What is the difference between IPv4 and IPv6? What is the Domain Name System (DNS) and what does a DNS server do? How and when does a computer use this?      Packets, Routers, and Reliability - 6:25\n What is a packet? What does a router do? What is fault tolerance? What is TCP? What does it ensure?      HTTP and HTML - 7:07\n What is a web browser? What does HTTP stand for? How does it work? What is it used for? What is HTML? What is a GET request? What is a POST request? What is a cookie? What are SSL and TLS? Why are these important? How can you tell when these are in use? What is the difference between HTTPS and HTTP?     (Optional) Wires, cables, and WiFi: This video is for those who want more details on how information is broken up and transported through the wires that make up the internet, the differences between fiber optics/radio/copper cables, and how WiFI is different than wired internet. It's very interesting but not required :)  2. Review exercises from Thursday (11/March) Review the content from last class. Make sure that have completed the prerequisites from last class, including that your email is verified on GitHub. If you get stuck or feel confused about anything, no worries! Please write down any questions you have so that we can go over these in class.\nReview Previous Session: 11/March  Class Curriculum    Section content Expected time (mins) Pre - Requirements     Lesson Agenda and Goals 5 minutes ‚ùå   Go over video questions in small groups 10-15 minutes videos   Kahoot on preparatory material 10-15 minutes videos   Review tricky questions as a whole class 10-15 minutes videos   Class break 10 minutes ‚ùå   Git Activity (in smaller groups) 45-60 minutes review last class    Lesson Goals  Have a high-level understanding of how the internet works Feel more comfortable with Git, GitHub, and the command line  Git and Command Line Review 0. Command Line cheat sheet Go through the following commands and operators to remind yourself what each of them does, and when you would use them.\nRemember that you can look up what a command does by using the man (manual-pages) command on Mac and Linux, or help command on Windows cmd. For example: man echo would give you information on what the echo command does and how to use it.     command what it does     echo print some text   pwd print working directory (print the path to where I currently am in the file system)   ls list the contents of the directory   cd change directory (this moves you, the viewer of the terminal, to a new location in the file system)   cat print the contents of the file   cp copy a file (note: to copy a directory you probably need to add an option (like -r) to copy a directory)   mv move a file or directory to a new location (note: this can also be useful for changing the name of a file/directory)   mkdir make a directory   touch create a new file   rm delete a file (note: to delete a directory, add the option -r or -d)   \u0026gt; the redirection operator (X \u0026gt; Y will send the outputs of command X to Y; if Y exists, it this will overwrite the existing file.)    1. Fork and clone repository First, navigate to the directory where you want to clone the repository. (If you don't already have a designated folder for class materials, create a directory for this and navigate into it.) Cloning a repository means creating a local copy of another repository, usually one that is stored on a remote server like GitHub.\nFork this repository. In the top right corner, click Fork. You may be prompted with a question like \u0026quot;Where should we fork this repository to?\u0026quot; If so, click your GitHub username; this will create a copy of the repository to your account.\nYou should then be automatically taken to the main page of this repository. On the upper right side, click Code (in green) and copy the HTTPS link. Then in your terminal run git clone \u0026lt;link-you-copied\u0026gt;. For example, this should look something like the following (with github-username replaced with your own github username):\n1git clone https://github.com/github-username/intro-to-cs-git-review.git Check that this directory now exists. (Hint: list the contents of the directory you are in, and make sure you see the cloned folder.)\nMove into that directory:\n1cd intro-to-cs-git-review Check the status of the git repository:\n1git status You should see output something like:\n1On branch main 2Your branch is up to date with \u0026#39;origin/main\u0026#39;. 3 4nothing to commit, working tree clean If so, great! You have successfully forked and cloned this repository. If not, check in with someone in your group or one of the teachers to help before moving on to the next steps.\n2. Checkout a new branch One of the great things about Git is being able to work on the same repository as others at the same time. A typical way of doing this when working on a project is by creating and checking out a new branch (via git checkout -b \u0026lt;branch-name\u0026gt;), making changes and committing your work, and pushing this work to your separate branch. Once you are ready to publish your changes to the main branch, you can create a pull request (PR) to have others review your changes and merge them to the main branch.\nEven though you are working on your own repository alone (since you forked, this is your own repository), let's practice creating a new branch so we can make some changes there and eventually merge this back to the main branch. Let's call this branch \u0026lt;github-username\u0026gt;/test-branch (leave out the \u0026lt;\u0026gt;, for example, for me, I would call the branch eelanagaraj/test-branch):\n1git checkout -b \u0026lt;github-username\u0026gt;/test-branch Check the status of the repository again before moving on to the next step, and make sure that you are on the correct branch. (Hint: run git status which displays the branch you are on, and make sure this is what you expect.)\n3. Making and committing some changes This activity should remind you a bit of the directory \u0026quot;maze\u0026quot; exploration activity that we did with Erg√ºn last week.\nLet's go ahead and explore the contents of this repository. For these tasks, feel free to look at your notes, the cheat sheet above, or ask each other for help if you're not sure how to complete a task :)\n  Print your current directory, to double check that you are in the right place :) The end of the path should be the name of the cloned repository.\n  Check what files and directories are present in this repository.\n  Print the contents of the README.md file. Now, compare the output in your terminal to the README displayed on the original remote repository. (Note: the README.md file will be displayed by default on your remote repository page!)\n  Move into the some-files directory. What files are in this repository?\n  Check the contents of each of the files in this folder (some-files). Delete the file that is empty (has no contents).\n  Check the status of the repository via git status. If you do not see something that says you deleted a file, please ask someone in your group or a teacher for help before moving on.\n  Stage the changes by running git add . and check the status again to make sure the changes have shown up in your staging area.\n  Create a commit now to \u0026quot;save\u0026quot; your changes--in this case, the deleted file. Try to leave a helpful commit message like below, replacing  with the file you deleted:\n1git commit -m \u0026#34;Deleted file \u0026lt;name-of-file\u0026gt;\u0026#34;   Check that the commit was successful by checking the status of the repository (git status) and checking the log (git log). You should see the commit message that you added at the top of the log, in addition to some previous commits from before you cloned the repository.\n  One of the non-empty files has the contents: Hello, I'm a file! What's your name?. Modify this file that answers the question with your name (or one of your choosing)! So far, we have used: echo \u0026quot;text\u0026quot; \u0026gt; file to add content to a file, but this will overwrite the file with the new contents. Instead, let's append to the file using the following command (replacing \u0026lt;file.txt\u0026gt; with the file you want to write to):\n1echo \u0026#34;My name is ___\u0026#34; \u0026gt;\u0026gt; \u0026lt;file.txt\u0026gt; You can also open this file in a text editor (like Sublime, Microsoft Word, Notepad, etc.) and modify it there and save your changes!\n  Check the git status again. Can you tell that a file has been modified? If not, ask someone in your group or a teacher for help before moving on. If so, in the same way as above, add these changes to your staging area and create another commit with a descriptive message of your choice. Check that this commit appears in the log as well.\n  Let's go ahead and push these commits so far to the remote repository. Run the following, replacing \u0026lt;current-branch\u0026gt; with the branch you are working on (if you forget what it is called, you can run git status or git branch and copy the branch name from there!):\n  1git push origin \u0026lt;current-branch\u0026gt;  Navigate out of the some-files directory, so you are back in the root of the repository. Display the contents of the files there. One of the files seems to be out of place; move this file to the some-files directory. Check that this file is now in the proper place by listing the contents of the directory some-files. Check the status of the repository again (git status). Notice that it thinks the file was deleted from the repository, but that there is now a new \u0026quot;untracked file\u0026quot; of the same name in some-files! Let's now add all of the files to the staging area and check the status of the repository again. What does it look like now? Let's commit these staged changes and check the log again to make sure they appeared. In the root of the repository, go ahead and delete the delete-me directory. (Hint: what option do you need to include to remove a directory?). Add, commit, and push these changes.  4. Create a pull request (PR) on GitHub As we did at the end of last class, let's create a pull request to merge this test-branch to main.\nGo to GitHub and view your branch: on the left side, there should be a button with main and a down arrow -- click this and select your branch. At the top, if there is an option to \u0026quot;Pull request\u0026quot;, click that, otherwise click on the \u0026quot;Pull request\u0026quot; tab and then \u0026quot;New pull request\u0026quot;.\nSince this is a forked branch, we are given the option of submitting a pull request against the original repository that we forked from (listed under base repository). This is often how you can contribute to open source projects -- by forking the repository, making your changes, and then submitting a PR against the original repo for the maintainers of the project to accept or reject.\nFor now, let's just PR within the fork, so change the base repository to be the forked repo. (The base repository and head repository should match, but the base branch should be main).\nAssign someone in your group and one of the teachers to review your pull request.\nTake a moment to review any PRs you were tagged on.\n5. [Optional] Advanced Git practice This is a section for if you are done with the earlier sections and want to try some new git commands out. This is completely optional and more complicated than the previous sections! Remember, you can play around with this repo as much as you want; use it to create new scenarios and test out Git commands to understand what they do. This is a toy repository, and you can always clone a fresh copy (first part of the activity) to restart from scratch, so there is low risk here :)\nFirst, we can use the git reset command to undo changes that we have made.\n Check that you are still on \u0026lt;your-username\u0026gt;/test-branch. Then, checkout a new branch \u0026lt;your-username\u0026gt;/undo-changes, replacing \u0026lt;your-username\u0026gt; with your GitHub username. Look at the git log, which should include all of the commits we made in the previous section. Let's say that we now want to \u0026quot;undo\u0026quot; the changes that we made in the last commit, deleting the delete-me folder. We realized after pushing this change that we actually want to keep this folder. Find and copy the commit hash (looks like a long string of letters and numbers, something like: 6ff15394c57d1d105482efd9359d7a061995fedc) of the commit right before this in the commit log. Let's now \u0026quot;reset\u0026quot; the state of the repository to this commit, right before we committed the change to delete the directory, replacing \u0026lt;commit-hash\u0026gt; with the hash from your commit log:  1git reset --hard \u0026lt;commit-hash\u0026gt;  Check the git status of your directory and the git log now. What is the most recent commit in the commit log now? Check the contents of the repository. Is the delete-me folder present or not? Check the contents of the delete-me folder. Feel free to try resetting the repository to different states (different commit hashes) and exploring a bit. Once you are done, you can checkout (get back onto) the main or test-branch from the earlier section and deleting the branch you just created:  1git checkout main 2git branch -D \u0026lt;your-username\u0026gt;/undo-changes If you still have time and want to continue playing around with Git, try to merge two branches that have made changes on the same file. You can see how Git tries to do this automatically and you may have to \u0026quot;resolve merge conflicts\u0026quot; if Git is not able to automatically merge the changes. To create a situation like this:\n Create two branches from the same \u0026quot;base\u0026quot; and checkout one of them. Remember, replace \u0026lt;new-branch-1\u0026gt; nd \u0026lt;new-branch-2\u0026gt; with branch names of your choice. (Bonus: look up how to do this via the git branch command instead of git checkout -b): 1git checkout -b \u0026lt;new-branch-1\u0026gt; \u0026lt;base-branch\u0026gt; 2git checkout -b \u0026lt;new-branch-2\u0026gt; \u0026lt;base-branch\u0026gt;  Modify and commit to a.txt on  Make a different change to the same file, a.txt on  Try to merge one branch into the other by checkout out  and then running git merge \u0026lt;new-branch-2\u0026gt;. Did you get any merge conflicts? See what the contents of file a.txt are. Try to fix any merge conflicts and commit this merge. Check the log to see what the merge commit looks like.  Extra resources  Interactive Git Cheatsheet - displays and explains different git commands Complete documentation of all git commands - this can feel a bit dense, but can be useful for deepening your understanding of how Git works under the hood.   Next class preparation Using an IDE (Integrated Development Environment) ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/git/review_git_command_line/","title":"16/March - Review Git and Command Line; Intro to the Internet"},{"body":"Prerequisites 1. Install VsCode Visual Studio Code is a freeware source-code editor made by Microsoft for Windows, Linux and macOS. Features include support for debugging, syntax highlighting, intelligent code completion, snippets, code refactoring, and embedded Git. Wikipedia\nDuring this course, while working with HTML and Pything we might end up working with an code editor to make easier interacting with files and folder. An editor can be considered the notebook of a programmer. This, with the terminal, will be considered your main tools to reach your goals :D\nTo install VSCode please download it by clicking on the Download button of the next link -\u0026gt;\nVSCode\nYou can start playing with it if you want, during the class we will see how to work with it.\n2. Review exercises from Tuesday (16/March) Review the content from last class. Make sure that have completed the prerequisites from last class, including that your email is verified on GitHub. If you get stuck or feel confused about anything, no worries! Please write down any questions you have so that we can go over these in class.\nReview Previous Session: 16/March  Class Curriculum    Section content Expected time (mins) Pre - Requirements     Little quiz with Kahoot 10 ‚ùå   Recap of what we did last class + questions? 10 minutes ‚ùå   Learning Markdown 20 minutes ‚ùå   Learners form 10 minutes review last class   Class break 7-10 minutes ‚ùå   Creating our own Journal in Github 45 minutes VSCode installed   Real life example 10 minutes VSCode installed    Lesson Goals  Know how to use an editor and move around What is a Markdown file  Learning Markdown Markdown is a way to write content for the web. It‚Äôs written in what people like to call ‚Äúplaintext‚Äù, which is exactly the sort of text you‚Äôre used to writing and seeing. Plaintext is just the regular alphabet, with a few familiar symbols, like asterisks ( * ) and backticks ( ` ).\nUnlike cumbersome word processing applications, text written in Markdown can be easily shared between computers, mobile phones, and people. It‚Äôs quickly becoming the writing standard for academics, scientists, writers, and many more. Websites like GitHub and reddit use Markdown to style their comments.\nTo get started with the tutorial let¬¥s jump here:\nMARKDOWN TUTORIAL\nCreating your own journal! 0. Command Line cheat sheet Remember that you can look up what a command does by using the man (manual-pages) command on Mac and Linux, or help command on Windows cmd. For example: man echo would give you information on what the echo command does and how to use it.     command what it does     echo print some text   pwd print working directory (print the path to where I currently am in the file system)   ls list the contents of the directory   cd change directory (this moves you, the viewer of the terminal, to a new location in the file system)   cat print the contents of the file   cp copy a file (note: to copy a directory you probably need to add an option (like -r) to copy a directory)   mv move a file or directory to a new location (note: this can also be useful for changing the name of a file/directory)   mkdir make a directory   touch create a new file   rm delete a file (note: to delete a directory, add the option -r or -d)   \u0026gt; the redirection operator (X \u0026gt; Y will send the outputs of command X to Y; if Y exists, it this will overwrite the existing file.)    0. Git cheat sheet These are some of the most famous commands you need.\n   command what it does     git clone \u0026lt;repo\u0026gt; Clone repo located at  onto local machine. Original repo can be located on the local filesystem or on a remote machine via HTTP or SSH.   git config user.name \u0026lt;name\u0026gt; Define author name to be used for all commits in current repo. Devs commonly use --global flag to set config options for current user.   git add \u0026lt;directory\u0026gt; Stage all changes in  for the next commit. Replace  with a  to change a specific file.   git commit -m \u0026quot;\u0026lt;message\u0026gt;\u0026quot; Commit the staged snapshot, but instead of launching a text editor, use  as the commit message.   git status List which files are staged unstaged, and untracked.   git log Display the entire commit history using the default format. For customization see additional options.    1. Fork and clone your new Journal First, navigate to the directory where you want to clone the journal. (If you don't already have a designated folder for class materials, create a directory for this and navigate into it.) Cloning a repository means creating a local copy of another repository, usually one that is stored on a remote server like GitHub.\nFork this repository. In the top right corner, click Fork. You may be prompted with a question like \u0026quot;Where should we fork this repository to?\u0026quot; If so, click your GitHub username; this will create a copy of the repository to your account.\nYou should then be automatically taken to the main page of this repository.\nOn the upper right side, click Code (in green) and copy the HTTPS link. Then in your terminal run git clone \u0026lt;link-you-copied\u0026gt;. For example, this should look something like the following (with github-username replaced with your own github username):\n1git clone https://github.com/ReDI-School/spring-2021-intro-to-programming-md-journal Check that this directory now exists. (Hint: list the contents of the directory you are in, and make sure you see the cloned folder.)\nMove into that directory (small hint -\u0026gt; write cd spring and then press the key TAB and it will autocomplete):\n1cd spring-2021-intro-to-programming-md-journal Check the status of the git repository:\n1git status You should see output something like:\n1On branch main 2Your branch is up to date with \u0026#39;origin/main\u0026#39;. 3 4nothing to commit, working tree clean If so, great! You have successfully forked and cloned this repository. If not, check in with someone in your group or raise your hand so one of the teachers to help before moving on to the next steps.\n2. Checkout a new branch One of the great things about Git is being able to work on the same repository as others at the same time. A typical way of doing this when working on a project is by creating and checking out a new branch (via git checkout -b \u0026lt;branch-name\u0026gt;), making changes and committing your work, and pushing this work to your separate branch. Once you are ready to publish your changes to the main branch, you can create a pull request (PR) to have others review your changes and merge them to the main branch.\nEven though you are working on your own repository alone (since you forked, this is your own repository), let's practice creating a new branch so we can make some changes there and eventually merge this back to the main branch. Let's call this branch \u0026lt;your-github-username\u0026gt;/test-branch (leave out the \u0026lt;\u0026gt;, for example, for me, I would call the branch omarsotillofranco/journal1):\n1git checkout -b \u0026lt;your-github-username\u0026gt;/test-branch Check the status of the repository again before moving on to the next step, and make sure that you are on the correct branch. (Hint: run git status which displays the branch you are on, and make sure this is what you expect.)\n3. Open with VSCode the folder you have just created Open VScode! :D once you are there let's click on file in the top left corner and click on Open.... Look for the the folder in your system you have just created (probably should be around /home) and click it.\nYour VSCode should show now on the left side the differents files and folders from the current scenario.\n4. Complete the tasks in the README.md file from the repository you have just created. In the README.md file from the repo you have just copied there is a section called ## TASKS. Go slowly one by one and complete them by marking them with a X\n5. Adding and committing some changes Once completed! let's make the world know about our recipes. This activity should remind you a bit of the directory \u0026quot;maze\u0026quot; exploration activity that we did with Erg√ºn last week.\n  Check the status of the repository via git status. If you do not see something that says you deleted a file, please ask someone in your group or a teacher for help before moving on.\n  Stage the changes by running git add . or git add --all and check the status again to make sure the changes have shown up in your staging area. They should be green\n  Create a commit now to \u0026quot;save\u0026quot; your changes--in this case, the deleted file. Try to leave a helpful commit message like below, replacing  with the file you deleted:\n1git commit -m \u0026#34;Created my first journal!\u0026#34;   Check that the commit was successful by checking the status of the repository (git status) and checking the log (git log). You should see the commit message that you added at the top of the log, in addition to some previous commits from before you cloned the repository.\n  Let's go ahead and push these commits so far to the remote repository. Run the following, replacing \u0026lt;current-branch\u0026gt; with the branch you are working on (if you forget what it is called, you can run git status or git branch and copy the branch name from there!):\n  1git push origin \u0026lt;current-branch\u0026gt; 6. Create a pull request (PR) on GitHub As we did at the end of last class, let's create a pull request to merge this test-branch to main.\nGo to GitHub and view your branch: on the left side, there should be a button with main and a down arrow -- click this and select your branch. At the top, if there is an option to \u0026quot;Pull request\u0026quot;, click that, otherwise click on the \u0026quot;Pull request\u0026quot; tab and then \u0026quot;New pull request\u0026quot;.\nSince this is a forked branch, we are given the option of submitting a pull request against the original repository that we forked from (listed under base repository). This is often how you can contribute to open source projects -- by forking the repository, making your changes, and then submitting a PR against the original repo for the maintainers of the project to accept or reject.\nFor now, let's just PR within the fork, so change the base repository to be the forked repo. (The base repository and head repository should match, but the base branch should be main).\nAssign someone in your group to the PR 'it can be seen in the right section and approve and merge the changes into main.\n7. (Optional) Let¬¥s swap places Now it is time for your partner to repeat what you have done.\nBUT! instead of forking the repository we will clone directly your partner repository so both of you can contribute towards a shared journal.\nFor that let¬¥s do the following:\n Ask your partner for an URL pointing to his journal repository that both of you have created and existts in Github. Let¬¥s clone the repository (make sure the Pull Request opened is merged and that the main branch has the content you just created) Add some new files, folders, images and after add, commit and push your changes. You can go back to section 3 and repeat the same instructions  Extra resources  Git online VSCode Crash course   VSCODE CHEATSHEET Install an extension Installing an extension\nCreating a new folder To create a folder we first need to click on the left sidebar the explorer icon. After that we click on the New Folder button and name it as we want.\nhttps://www.youtube.com/watch?v=fEp5nWvujhI\nCreating a new file To create a file we first need to click on the left sidebar the explorer icon. After that we click on the New File button and name it as we want.\nhttps://www.youtube.com/watch?v=2QBYlfSQA6s\nCopying a file Right click the file and click on copy or select it a Command/Control+c.\nTo paste it, we go over the folder where we want to paste it and we press Command/Control+c\nSearching for text Press Command/Control+f to search for something in the current opened file. To search in the whole folder click in the magnifying glass.\nNext class preparation Web Fundamentals ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/git/ide_and_review/","title":"18/March - Using an IDE (Integrated development environment)"},{"body":"Pre Requisites  Look into the three Python installation options below (under Python Installation Overview). Spend some time thinking about which option may make sense for you. VSCode or PyCharm will give you the most options and would enable you to continue practicing your command line and git/GitHub skills. Ideally, try getting set up with at least one of the options. We will then troubleshoot and go through this in class for folks who ran into any issues with their setup. (Optional practice) go through exercises on w3 schools for Python through Functions section OR on particular areas that you would like to review. This is entirely optional but good practice! No need to go over Lambda, Classes, Inheritance, or Modules as we have not seen these yet.  Python Installation Overview Google Colab Overview  free, requires a google account (gmail) no need to install Python on your computer, as Colab comes with an interpreter built-in that can run your code easy to create a new document or create a \u0026quot;copy\u0026quot; of assignments that we create can use the UI to save copies to GitHub or to your Google Drive makes it easy to execute and write code in notebook \u0026quot;cells\u0026quot;; it's possible to mix code and text in a readable and clear way notebook-style is very common in the Data Science space, so if you think you may want to go in the direction of data science or analytics, this could be a great option  here's an example iPython Notebook in Colab if you'd like to get a sense of what these are!   can be used for writing Python Notebooks (.ipynb only, no pure .py files) one of the options used in the Intro to Python course with ReDI school recommended if you don't feel as comfortable installing Python on your machine or had difficulties with this, you don't want to work on the command line or use git/GitHub, or you are particularly interested in learning data science/analysis in the future  Setup instructions  Visit Google Colab. You may need to login with your gmail account or else create a Google Account in order to use Google Colab. In the bottom right, click on New Notebook. This will create a new Python Notebook in your Google Drive. Some notes:  You can rename this file by clicking on the name (probably Untitled0) in the top left and renaming this. (See diagram below). (Note) If you want to save this Notebook in GitHub, you can create a repository in GitHub and initialize it with a README or other file. Then, in your Colab notebook, click File \u0026gt; Save Copy to GitHub. You may need to authorize your account (let GitHub know that it's ok for Colab to write to your repositories on your behalf), but then you can select this repository, and Colab will save a copy to it with the current state. If you make changes that you want to commit, you can repeat this process.   In your notebook, click into the cell and write a Python statement of your choice (perhaps, a function to print hello world or add two numbers together). Then, click the play button (or use Shift + Enter) to execute this line of code. After a few seconds, the result of the expression should appear under the cell.  Done! Optionally: check out the Welcome to Colaboratory notebook that Google has provided, and watch the short introductory video in it. This will just give you a sense of what you can do in Colab.  VSCode  free IDE that we have previously used in this class requires you to have installed a version of Python on your machine can be used for writing and executing Python Notebooks (like in Colab) as well as pure Python scripts and modules (.ipynb and .py files) can install extensions to add Python syntax-highlighting and coding tips will require you to continue practicing your command line and git/GitHub skills recommended if you feel comfortable installing Python, want to continue using the command line to navigate your file system and using git/GitHub as you develop your project, or you want to continue deepening your knowledge of one IDE rather than trying out a new platform  Setup Instructions   Download and install Python at this link (latest version -- 3.9.4). Complete all of the installer steps.\n  (Optional) in the installed Python folder, there should be an IDLE program. Double click or run this program, which opens a Python interactive shell. This will execute Python code statements. Try it out by printing something (hint: use the print function)\n  In VSCode, install the following extensions by clicking on the extensions tab on the left, searching for the following extensions, and clicking \u0026quot;Install\u0026quot; (see diagram):\n Python MagicPython Visual Studio IntelliCode Another option: Python Extension Pack which includes all three of the above extensions plus a few more    In VSCode in the View menu in the top left corner, click Command Palette (or use the shortcut Command-Shift-P) which should bring down a dropdown menu. Here, type \u0026quot;Python: Select Interpreter\u0026quot; and click on this option. This should bring up a list of all Python versions installed on your computer -- select 3.9.4, the version you installed.   (Optional) test that this works! Create a new project or a new file with the .py ending (for example: hello_world.py). Have this file output \u0026quot;Hello World!\u0026quot; (hint: use the print function). Click on the green play button in the top right corner to run the code. This should open the terminal in VSCode and print out the output. If you run into errors, try restarting VSCode to make sure all changes were in place, and then if you run into the same issue, Google this error or ask a teacher or peer in class!\n  PyCharm (Community Edition)  Community Edition is free, upgrading to the Professional Edition is not necessary for the purposes of this course an IDE (integrated development environment) designed for Python requires you to have installed a version of Python on your machine built-in awesome features that help you write and execute Python code (function signature help + completion, syntax highlighting) can manage different Python virtual environments for you (different versions of Python, different additional packages specific to projects, etc.) can be used for writing and executing Python Notebooks (like in Colab) as well as pure Python scripts and modules (.ipynb and .py files) will require you to continue practicing your command line and git/GitHub skills one of the options used in the Intro to Python course with ReDI school recommended if you feel comfortable installing Python, want to continue using the command line to navigate your file system and using git/GitHub as you develop your project, or you think you may want to continue learning Python after this course  Setup Instructions   Download and install Python at this link (latest version -- 3.9.4). Complete all of the installer steps.\n  (Optional) in the installed Python folder, there should be an IDLE program. Double click or run this program, which opens a Python interactive shell. This will execute Python code statements. Try it out by printing something (hint: use the print function)\n  In PyCharm, can select different Python interpreters for each project. Since this is our first project, we need to add and setup a first interpreter. (In the future, you can select this interpreter again, or set up a new one in a similar way.)\n  Open PyCharm and click on New Project. Choose a location for the new project; your normal coding folder is a good idea, as this will create a new directory within it.\n  PyCharm will now ask you to configure your interpreter. Click on Previously configured interpreter, then on the three dots to the right of the select. (Note) you can also use PyCharm to create Virtual Environments. This is a more advanced topic and is out of scope for today, but feel free to look into this and reach out if you would like to know more!\n  Select System Installation and select the path to your Python 3.9 installation. Make sure that this is the path to the version of Python you just installed (3.9), not any other version that was already installed on your computer.   Click Create\n  PyCharm may have already created a test main.py file for you. (If not, go ahead and create a file like hello_world.py and have it print out hello world or something else!) Then press the green play button in the top right corner to run this code.\n   Class Curriculum    Section content Expected time (mins) Pre - Requirements     Lesson Goals 5 minutes ‚ùå   Check-in on pre-reqs and questions from last class 10 minutes Read and attempt installation instructions   Short review/demo of each installation option 20 minutes Read and attempt installation instructions   Troubleshooting installation in groups 5-30 minutes Read and attempt installation instructions   Break 10 minutes ‚ùå   Overview of loops (for, while) 10-15 minutes ‚ùå   Hands-on Python exercises (in pairs) rest of class ‚ùå   Check-out 5 minutes ‚ùå    0. Lesson Goals  Have a working development environment on Python. Continue writing code in Python.  1. Check-In  What was particularly challenging last class? Are there any remaining questions from last class? Were there any challenges understanding the pre-requisites for today's class?  2. Short review of each installation option  Colab, PyCharm, VSCode We will also take a look at a Python Notebook (.ipynb) vs. normal Python file .py. What is the difference between these two formats? How do we run each of these?  Notebooks are made up of \u0026quot;cells\u0026quot; which allow you to execute blocks of code. Cells can also contain Markdown or text, so these can be useful for demoing information or for storing plots, charts, and doing data analysis. Notebooks are commonly used in the Data Science and Machine Learning fields. .py files are Python files, and can be executed by a Python interpreter via path/to/python/installation filename.py where you replace path/to/python/installation with the path to the location that you installed Python on your machine and filename.py with the name of your Python file. Your interpreter will also look for a main.py in your module or the statement: if __name__ == '__main__': in a file to know where to begin running your code. This is where you can tell the interpreter to start calling your functions.   We will take a look at the IDLE Python terminal that comes with your Python installation and how you can interactively execute lines of code here. (There are other Python terminals that you can install or use, such as ipython.) This can be useful for testing out your logic and syntax as you are writing a longer program as well!  3. Troubleshooting in Groups We will split up into groups based on whether folks have Python installed or are having issues so that we can troubleshoot and get everyone set up as quickly as possible :)\nGroups that are done with installation can start working on the Python problems from the following section.\n4. for and while loops Loops are a tool that help us execute a block of code a specified amount of times or based on a condition. In Python, there are two loops: for and while loops.\nwhile loops while loops allow us to execute a block of code as long as the condition evaluates to True.\nPlease excuse the ugly diagram :)\nSyntax:\n1while condition: 2 # do things Examples:\n1# This is called an \u0026#34;infinite loop\u0026#34; since the condition is always True!! 2while True: 3 print(\u0026#34;I\u0026#39;m an infinite loop! I won\u0026#39;t stop unless I\u0026#39;m forced to!\u0026#34;) 1count = 0 2while count \u0026lt; 10: 3 print(\u0026#34;hello #\u0026#34;, count) 4 count += 1 5 # outputs: 6 # hello # 0 7 # hello # 1 8 # hello # 2 9 # hello # 3 10 # hello # 4 11 # hello # 5 12 # hello # 6 13 # hello # 7 14 # hello # 8 15 # hello # 9 16 for loops for loops provide a way to go through each value (or set of values) in an iterable (e.g. a list, string, dictionary, etc.) and execute a block of code that uses that value.\nSyntax:\n1for variable(s) in iterable: 2 # do things Examples: (feel free to try executing these in your IDLE terminal, notebook cell, VSCode, or PyCharm :)\n1for num in [1, 2, 3]: 2 print(num) 3 # outputs: 4 # 1 5 # 2 6 # 3 1for letter in \u0026#39;word\u0026#39;: 2 new_word = letter + \u0026#39;!!\u0026#39; 3 print(new_word) 4 # outputs: 5 # w!! 6 # o!! 7 # r!! 8 # d!! 1# python 2for num, letter in [(1, \u0026#39;a\u0026#39;), (2, \u0026#39;b\u0026#39;)]: 3 # Here, we convert number to string using `str` before concatenating with another string 4 print(str(num) + letter) 5 # outputs: 6 # 1a 7 # 2b 8 With for loops, it can also be useful to use the range operator in Python which creates an iterable of numbers. The syntax of this is range(start, end, step), but you will also see this as just range(start, end) or range(end) (in this last case, the start is assumed to be 0). Note that the end value is not included (in other words, \u0026quot;numbers starting with start up until (not through) end\u0026quot;). Here are some examples:\n1for i in range(3): 2 print(i) 3 # outputs: 4 # 0 5 # 1 6 # 2 1list(range(1, 4)) # we can create a list out of a `range` 2# [1, 2, 3] 1list(range(-1, 9, 3)) # here, the step (space between values) is 3 2# [-1, 2, 5, 8] 5. Hands-on Python Tasks Work in groups to solve the following tasks in your new Python Dev setup. You are not expected to get through all of these in class, and they range from easier to harder.\nOptionaally, you may send in a link to a GitHub repository with your solutions (if working in VSCode or PyCharm) or share your notebook (if working in Colab) if you would like feedback on your work :) I will also release solutions later.\nNote: if you are writing in Colab or a Python Notebook, then try to keep each task in a separate code cell. If you are writing in a pure Python file, consider wrapping each task in a function (that is, write a function to solve the task) and call these functions in the if __name__ == '__main__': block to test out your code. This might look something like:\n1# in your file: 2def task_n(a, b): 3 # code to solve task 1 4 ... 5 6 return answer_to_task_n 7 8if __name__ == \u0026#39;__main__\u0026#39;: 9 print(task_n(1, 2)) # prints output of task_n 10 Note: it can be helpful to test out your functions by making sure that the functions return what you expect for a few different inputs. Make sure to try out a variety of inputs including some \u0026quot;edge cases\u0026quot;, or cases that are trickier and can cause problems. These edge cases often have to do with \u0026quot;0\u0026quot; or empty-inputs. (Optional): In Python, you can also write assert statements, where you would state what you believe the function to output to be, and it fails if this is not the case.\nLet's use an example task 0 to illustrate all the points above.\nTask 0 (warmup) Write a function called add_10 that takes in an integer, adds 10, and returns this value. Test out these steps and make sure you feel comfortable with the process. The following tasks won't have a walk through, but you should follow the same rough process.\nSteps:\n Write out your function skeleton, or the empty function with the name and parameters. (Note: n is commonly used to denote a number, but you can also write more descriptive variable names):  1def add_10(n): 2 # TODO: add logic to add 10 3 return \u0026#34;Not implemented\u0026#34; Let's call this function somewhere so we can see what it's outputting. In a .py file:  1if __name__ == \u0026#39;__main__\u0026#39;: 2 # the text is not required, but it helps me see what I called to get the output 3 print(\u0026#34;add_10(3): \u0026#34;, add_10(3)) # for now, this returns \u0026#34;add_10(3): Not implemented\u0026#34; 4 Let's add in some logic and check the values that it is outputting. If these values don't match your expectations (which often happens in programming), then take another look and try to understand what's going wrong. You can add print statements in your code as well to tell you what the values of different variables and conditions are while you are running your code. You should feel encouraged to look things up when you run into issues as well.  1def add_10(n): 2 return n + 10 3 4if __name__ == \u0026#39;__main__\u0026#39;: 5 print(\u0026#34;add_10(3): \u0026#34;, add_10(3)) # this should now print \u0026#34;add_10(3): 13\u0026#34; 6 print(\u0026#34;add_10(-10): \u0026#34;, add_10(-10)) # this should now print \u0026#34;add_10(-10): 0\u0026#34; 7 Optional: you can also use assert statements to confirm your expectations. This is a way of writing simple \u0026quot;test cases\u0026quot; to make sure your logic works. This looks something like:  1def add_10(n): 2 return n + 10 3 4if __name__ == \u0026#39;__main__\u0026#39;: 5 assert add_10(3) == 13 6 assert add_10(-10) == 0 7 assert add_10(0) == 10 8 What happens if the assert statement is wrong? (Hint: try out something like assert add_10(3) == 5 which we expect to fail and see what happens.)\nYou can also add this in to a test function to organize your code:\n1def add_10(n): 2 return n + 10 3 4def test_add_10(): 5 assert add_10(3) == 13 6 assert add_10(-10) == 0 7 assert add_10(0) == 10 8 9 10if __name__ == \u0026#39;__main__\u0026#39;: 11 test_add_10() # expect no output if all assertions passed 12 Task 1 Write a function called longer_string that takes in two strings and returns the longer of the two. If they are the same length, return the first string.\nTask 2 Write a function called is_odd that takes in an integer and returns True if the number is odd and False otherwise.\nHint: look up (Google) what the modulo (%) operator in Python is and use it to determine if a number is odd or even.  Task 3 (parts 1, 2) Write a function called hello_world_n that takes in an integer n and prints \u0026quot;Hello, world!\u0026quot; n times.\n do this using a for loop do this using a while loop  Task 4 Write a function called sum_list that takes in a list of integers (i.e. [3, 0, 10, 4, 5, 3]) and returns the sum of them. Do not use the sum function in your logic, but you can use this to test your logic! (Hint: assert sum(lst) == ...)\nTask 5 Write a function that takes in a list of integers (i.e. [3, 0, 10, 4, 5, 3]) and prints the value of each element greater than 4. For example:\n  input: [3, 0, 10, 4, 5, 3]\n1# output: 2# 10 3# 5   input: [4, 5, 6, 6, 5, 4]\n1# output: 2# 5 3# 6 4# 6 5# 5   input: [4, 3, 2, 1]\n1# no output   Optional Challenge: change your function to take in a second parameter, min_val. Now, print all values in the list greater than this value.\nExample input: [4, 3, 2, 1], 2\n1 # output: 2 # 4 3 # 3   (Challenge) Task 6 (parts 1, 2) Note: this one is optional and meant to be challenging! :)\nLike with task 4, do not use the Python function max in your function, but you can use this to test it out!\n Write a function that takes in a list of integers (i.e. [3, 0, 10, 4, 5, 3]) and returns largest value in the list. Write a function that takes in a list of strings (i.e. ['a', 'asdf', '']) and returns the longest string in the list.  (Challenge) Task 7 (parts 1, 2, 3) Note: this one is optional and meant to be challenging! :)\n  Write a function that takes in an integer and prints all numbers below it that are divisible by 3. (Hint: recall Task 2 -- how can you check if a number is divisible by 3?)\nExample input: 12\n1# output: 2# 0 3# 3 4# 6 5# 9    Modify the function to return how many numbers are divisible by 3, in addition to printing each number. (i.e. the returned value for the example input above would be 4 (0, 3, 6, 9)).\n  Modify this function to make it general -- if the function takes in n and k, find out how many numbers less than n are divisible by k.\nExample input: 8, 2\n1# output: 2# 0 3# 2 4# 4 5# 6 6# returns 4   Additional Resources  W3 schools Python while loops W3 schools Python for loops Tutorialspoint loops in Python additional practice problems on loops and conditions (note: some are challenging!) additional practice problems (note: challenging!)  ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/docs/python/installing_python/","title":"27/April - Installing Python"},{"body":"Welcome to Intro to Computer-Science 2021 course Berlin üá©üá™ Here you will find most of the content for our courses, prerequisites for each class, summaries of the classes and extra content so you can work on your own.\nThis is a work in process document for the course of 2021 in Berlin.  Get started with the course üöÄ\n Margaret Hamilton - She sent rockets to the moon üöÄ\n  ","link":"https://redi-school.github.io/ber-dcp-intro-to-computer-science/","title":"Berlin 2021 - Intro to Computer Science"}]